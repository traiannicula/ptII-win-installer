<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Kubi" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[80.0, 55.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 23, 1059, 737}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[825, 627]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{412.5, 313.5}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Victor Nouvellet">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 585.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="tag36_11_00586.pdf">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[35.0, 520.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="tag36_11_00586.pdf">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{150, 310}">
            </property>
        </property>
    </property>
    <property name="KubiServerIPAddress" class="ptolemy.data.expr.Parameter" value="&quot;169.254.206.120&quot;">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 400.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model controls the Kubi telepresence robot.&#10;&#10;If you have a Kubi, then update the address&#10;and then print out the tag below&#10;and hold it in front of your camera.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 415.0]">
        </property>
    </property>
    <entity name="ClockKubiInterface" class="ptolemy.actor.lib.jjs.JavaScript">
        <display name="Clock Kubi Interface"/>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('tags');&#10;	this.parameter('speed', {type: 'string', value: 100});&#10;	this.parameter('width', {value: 360});&#10;	this.parameter('height', {value: 480});&#10;	this.parameter('precision', {value: 10});&#10;	this.output('movement');&#10;}&#10;&#10;var last_move_ts = new Date();&#10;var network_time = 500;&#10;&#10;function tagsReaction() {&#10;	var width = this.getParameter('width');&#10;	var height = this.getParameter('height');&#10;	var precision = this.getParameter('precision');;&#10;	var speed = this.getParameter('speed');&#10;	&#10;	var tags = this.get('tags');&#10;	&#10;	var x = (width/2) - tags[0].center[0];&#10;	var y = (height/2) - tags[0].center[1];&#10;&#10;	var absX = Math.abs(x);&#10;	var absY = Math.abs(y);&#10;	console.log(&quot;April is &quot; + ((x &gt; 0) ? &quot;right&quot; : &quot;left&quot;) + &quot; by &quot; + absX + &quot;px&quot;);&#10;	&#10;	var pan = Math.log(precision*absX)*(x/absX);&#10;	var tilt = Math.log(precision*absY)*(y/absY);&#10;	if ((new Date()-last_move_ts) &gt; network_time) {&#10;		this.send('movement', {pan: pan, panSpeed: speed, tilt: tilt, tiltSpeed: speed});&#10;		console.log(&quot;Movement sent&quot; + pan);&#10;		last_move_ts = new Date();&#10;	}&#10;}&#10;&#10;exports.initialize = function () {&#10;	this.addInputHandler('tags', tagsReaction);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[245.0, 190.0]">
        </property>
        <property name="speed" class="ptolemy.data.expr.Parameter" value="200">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_rotatePorts" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="precision" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <port name="script" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="movement" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Kubi" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; * Controls a Revolverobotics's Kubi via a iOS Kubi Server app.&#10; * To use it, you need to provide the IP address of the iOS device &#10; * which you can find in Wifi's settings.&#10; * &#10; * First, follow iOS Kubi Server simple steps to start the server given in&#10; * the app itself. Autoconnect toggle lets you start this setup automaticaly&#10; * next time you open the app. CAUTION: Camera streaming will start too &#10; * if Autoconnect is activated!&#10; * &#10; * Second,&#10; * FIXME: What to do next?&#10; *  &#10; * @author Victor Nouvellet &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// Node Host needs util defined.&#10;var util = require('util');&#10;&#10;/** Inputs and outputs definition **/&#10;exports.setup = function() {&#10;    this.input('command');&#10;    this.parameter('kubiLocalServerIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('kubiLocalServerPort', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;8080&quot;&#10;    });&#10;    this.parameter('incremental', {type: 'boolean', value: true});&#10;    this.output('urlRequested', {&#10;        type: &quot;string&quot;&#10;    });&#10;};&#10;&#10;function Kubi() {&#10;    var kubi = {};&#10;    &#10;    kubi.lastUrlRequested = &quot;&quot;;&#10;&#10;    // Private variables&#10;    var debug = true;&#10;    var ipAddress = &quot;&quot;;&#10;    var port = &quot;&quot;;&#10;    var path = &quot;&quot;;&#10;    var url = &quot;&quot;;&#10;    var connected = false;&#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    //Private functions.&#10;&#10;     /**&#10;     *  Parse command to create a command object&#10;     */&#10;     function parseCommand(command) {&#10;        var commandObject = {};&#10;&#10;        if (typeof command === 'string') {&#10;            command = JSON.parse(command);&#10;        }&#10;&#10;        // Check whether input is valid&#10;        if (Object.keys(command).length &lt; 1) {&#10;            self.error(&quot;Command is empty: &quot; + command);&#10;        } else {&#10;            // Get interresting properties&#10;            if (typeof command.pan !== 'undefined') {&#10;                commandObject.pan = command.pan;&#10;            }&#10;            if (typeof command.panDelta !== 'undefined') {&#10;                commandObject.pan = command.panDelta;&#10;            }&#10;            if (typeof command.tilt !== 'undefined') {&#10;                commandObject.tilt = command.tilt;&#10;            }&#10;            if ( typeof command.tiltDelta !== 'undefined') {&#10;                commandObject.tilt = command.tiltDelta;&#10;            }&#10;            if (typeof command.tiltSpeed !== 'undefined') {&#10;                commandObject.tiltSpeed = command.tiltSpeed;&#10;            }&#10;            if (typeof command.panSpeed !== 'undefined') {&#10;                commandObject.panSpeed = command.panSpeed;&#10;            }&#10;            //FIXME: Use commandObject.pan = command.pan || command.panDelta || 0; instead?&#10;        }&#10;&#10;        return commandObject;&#10;     }&#10;&#10;     /**&#10;     *  Build URL to request with commands&#10;     */&#10;     function buildGetUrl(incremental, correctCommand) {&#10;        var requestUrl = url;&#10;        var panVar, tiltVar;&#10;        var panSpeedVar = &quot;panSpeed&quot;;&#10;        var tiltSpeedVar = &quot;tiltSpeed&quot;;&#10;&#10;        console.log(&quot;Building URL...&quot;);&#10;&#10;        if (incremental == true) {&#10;            panVar = &quot;panDelta&quot;;&#10;            tiltVar = &quot;tiltDelta&quot;;&#10;        } else {&#10;            panVar = &quot;pan&quot;;&#10;            tiltVar = &quot;tilt&quot;;&#10;        }&#10;        requestUrl += &quot;?&quot; + panVar + &quot;=&quot; + correctCommand.pan + &quot;&amp;&quot;&#10;                                             + panSpeedVar + &quot;=&quot; + correctCommand.panSpeed + &quot;&amp;&quot;&#10;                                             + tiltVar + &quot;=&quot; + correctCommand.tilt + &quot;&amp;&quot;&#10;                                             + tiltSpeedVar + &quot;=&quot; + correctCommand.tiltSpeed;&#10;        return requestUrl;&#10;     }&#10;&#10;     /**&#10;     *  Report all server errors if they exist and return true in this case.&#10;     */&#10;     function reportIfError(response) {&#10;        var body = response.body;&#10;        //FIXME: Server not ready to give json...&#10;        return true; //Remove this line after server update&#10;        &#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;&#10;        if (body instanceof Array &amp;&amp; obj.length &gt; 0 &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server error report: &quot; + error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;     }&#10;    &#10;    // Public functions.&#10;    &#10;    kubi.connect = function() {&#10;        if (debug) {&#10;            console.log(&quot;Kubi.js: Connecting...&quot;);&#10;        }&#10;        ipAddress = self.getParameter('kubiLocalServerIP');&#10;        port = self.getParameter('kubiLocalServerPort') || &quot;8080&quot;;&#10;        path = self.getParameter('incremental') ? &quot;/incremental&quot; : &quot;/absolute&quot;;&#10;        &#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Kubi server.&quot;;&#10;        }&#10;        &#10;        url = &quot;http://&quot; + ipAddress + &quot;:&quot; + port + path;&#10;        &#10;        connected = true;&#10;        //TODO: Implement token auth on server side&#10;     };&#10;     &#10;     /**&#10;     *  Issue a command to the server.&#10;     */&#10;     kubi.issueCommand = function () {&#10;        var command = self.get('command');&#10;        if (debug) {&#10;            console.log(&quot;Kubi.js: issueCommand(): &quot; + util.inspect(command));&#10;        }&#10;         //TODO: check authentification, queue command until server authentification&#10;         &#10;         kubi.processCommand(command);&#10;     };&#10;     &#10;     /**&#10;     *  Process received command after authentification and connectivity checks.&#10;     */&#10;     kubi.processCommand = function (command) {&#10;        console.log(&quot;Proccessing command&quot;);&#10;        var commandObject = parseCommand(command);&#10;        console.log(&quot;Got command object &quot;);&#10;        if (typeof commandObject !== 'undefined') {&#10;            var requestUrl = buildGetUrl(self.getParameter('incremental'), commandObject);&#10;            &#10;            http.get(requestUrl, function(response) {&#10;            	if (response !== null) {&#10;	                if (false) {&#10;	                    console.log(&quot;Kubi.js: processCommands(): response status: &quot; + response.statusMessage);&#10;	                    console.log(&quot;Kubi.js: processCommands(): response body: &quot; + response.body);&#10;	                }&#10;	                kubi.lastUrlRequested = requestUrl;&#10;	                reportIfError(response);&#10;            	} else {&#10;            		self.error(&quot;Unable to connect to the server on &quot; + requestUrl);&#10;            	}&#10;            	&#10;            	self.send('urlRequested', requestUrl);&#10;            });&#10;            &#10;            return;&#10;        } else {&#10;            console.log(&quot;commandObject undefined&quot;);&#10;        }&#10;     };&#10;     &#10;     &#10;     return kubi;&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.kubi = Kubi.call(this);&#10;    &#10;    console.log(&quot;Kubi.js: Initializing...&quot;);&#10;    this.addInputHandler('command', this.kubi.issueCommand);&#10;    console.log(&quot;Kubi.js: Handler added&quot;);&#10;    this.kubi.connect();&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[445.0, 190.0]">
        </property>
        <property name="kubiLocalServerIP" class="ptolemy.data.expr.Parameter" value="$KubiServerIPAddress">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="kubiLocalServerPort" class="ptolemy.data.expr.Parameter" value="8080">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="incremental" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="script" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="urlRequested" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={891, 112, 91, 44}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[360, 480]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[235.0, 125.0]">
        </property>
    </entity>
    <entity name="AprilTags" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/**&#10; * Accessor to detect AprilTags in an image or stream of images.&#10; * An AprilTag is a pattern of dark and light squares similar to a QR code but easier for&#10; * cameras to detect robustly and at a distance.&#10; * AprilTags were created by Associate Professor Edwin Olson (ebolson@umich.edu),&#10; * EECS, University of Michigan. See [https://april.eecs.umich.edu/](https://april.eecs.umich.edu/#in_browser).&#10; * &#10; * The implementation of this accessor on the Ptolemy II/Nashorn accessor host&#10; * uses an older Java implementation of the AprilTags detector written by Edwin Olson&#10; * and more recently supplanted by a C version that performs much better. But this Java&#10; * version is more easily included in Ptolemy II in a portable way. If you need better&#10; * performance, consider replacing this with the C implementation and using JNI to interface&#10; * to Ptolemy II.&#10; * &#10; * https://april.eecs.umich.edu/software/apriltag.html contains a set of&#10; * pregenerated tags as png and PostScript files.  However, these are of&#10; * low resolution.  To scale them, use linear interpolation to avoid blurring.&#10; * For example, with ImageMagik, use:&#10; *&#10; *  mogrify -scale 1000x1000 *.png; convert *.png tag36h11.pdf&#10; *&#10; * Or, search the web for &quot;tag 36H11&quot;.  &#10; *&#10; * In the Ptolemy tree, a sample file may be found at&#10; * $PTII/ptolemy/actor/lib/jjs/modules/aprilTags//demo/AprilTags/tag36_11_00586.pdf&#10; *&#10; * The input to this accessor is an image or a stream of images, e.g. from the Camera&#10; * accessor.  There are two outputs. The one named _output_ is a modified version&#10; * of the input image that outlines any detected AprilTags in the image&#10; * and indicates their center and ID.  The _tags_ output is an array of&#10; * objects representing the detected tags. Each object includes the following fields:&#10; * &#10; * + _id_: The ID of the detected tag.&#10; * + _center_: An array with two doubles giving the center of the tag in pixel coordinates.&#10; * + _perimeter_: An array with four arrays, each of which gives the x and y coordinates of&#10; *   a corner of the AprilTag.&#10; * &#10; * The AprilTags detector has a large number of parameters that can be tuned via&#10; * the _options_ input. To set an option, provide a JSON object with a field matching&#10; * the option name.  The options are described below using descriptions provided by&#10; * by Edwin Olson in his Java implementation of an AprilTag detector:&#10; * &#10; * + _MagThresh_: When growing components, the intra component variation is&#10; *   allowed to grow when the component is small in size. This&#10; *   threshold affects how much. The default is 1200.&#10; * + _MaxEdgeCost_: Set the maximum angle range allowed for the gradient directions&#10; *   when connecting edges, in radians. This defaults to the radian&#10; *   equivalent of 30 degrees.&#10; * + _MinMag_: Set the gradient magnitude threshold for ignoring pixels.&#10; *   Do not consider pixels whose gradient magnitude is less than&#10; *   minMag. Small values make the detector more sensitive, but also&#10; *   force us to consider many more edges resulting in slower&#10; *   computation time. A value of 0.001 is very sensitive. A value&#10; *   of 0.01 is quite fast. The default is 0.004.&#10; * + _SegDecimate_: Set whether decimating before segmenting is enabled.&#10; *   Instead of blurring the input image before segmentation, we&#10; *   can achieve similar effects by decimating the image by a factor&#10; *   of two. When enabled, this option applies a block LPF filter of&#10; *   width 2, then decimates the image. With this option, not only&#10; *   can we safely set segSigma = 0, but the slowest part of the&#10; *   algorithm (the segmentation) runs about 4 times faster. The&#10; *   downside is that the position of the targets is determined&#10; *   based on the segmentation: lower resolution will result in more&#10; *   localization error. However, the effect on quality is quite&#10; *   modest, and this optimization is generally recommended (along&#10; *   with segSigma = 0). If segSigma is non-zero, the filtering by&#10; *   segSigma occurs first, followed by the block LPF, and the&#10; *   decimation. This defaults to false, indicating that the option&#10; *   is not enabled.&#10; * + _SegSigma_: Set the Gaussian smoothing kernel applied to image (0 == no filter)&#10; *   used when detecting the outline of the box. It is almost always&#10; *   useful to have some filtering, since the loss of small details&#10; *   won't hurt. Recommended value = 0.8 (the default). The case where sigma ==&#10; *   segsigma has been optimized to avoid a redundant filter&#10; *   operation.&#10; * + _Sigma_: Set the Gaussian smoothing kernel applied to image (0 == no filter, the default)&#10; *   used when sampling bits. Filtering is a good idea in cases&#10; *   where A) a cheap camera is introducing artifical sharpening, B)&#10; *   the bayer pattern is creating artifcats, C) the sensor is very&#10; *   noisy and/or has hot/cold pixels. However, filtering makes it&#10; *   harder to decode very small tags. Reasonable values are 0, or&#10; *   [0.8, 1.5].&#10; * + _TagFamily_: Set the name of the tag family being detected.&#10; *   This defaults to &quot;Tag36h11&quot;.&#10; *   The supported families are &quot;Tag16h5&quot;, &quot;Tag25h7&quot;, &quot;Tag25h9&quot;, &quot;Tag36h10&quot;, and &quot;Tag36h11&quot;.&#10; *   The default family seems least susceptible to false positives.&#10; * + _ThetaThresh_: When growing components, the intra component variation is&#10; *   allowed to grow when the component is small in size. This&#10; *   threshold affects how much. The default is 100.&#10; * &#10; *   @accessor image/AprilTags&#10; *   @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *   @input input An input image.&#10; *   @output output An output image, with detected AprilTags outlined in green and identified.&#10; *   @output tags An array of objects, one object for each tag detected in the image.&#10; *   @parameter options The options for the detector. This is a JSON object with fields defined above.&#10; *   It defaults to an empty object, meaning to use default values for all the otpions.&#10; *   @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, input, output, removeInputHandler, require, send,  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var aprilTags = require('aprilTags');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output');&#10;    this.output('tags');&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;};&#10;&#10;var handle;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    handle = self.addInputHandler('input', function () {&#10;        var options = self.get('options');&#10;        var image = self.get('input');&#10;        var result = aprilTags.filter(image, options);&#10;        self.send('output', result);&#10;        var tags = aprilTags.tags();&#10;        if (tags) {&#10;            self.send('tags', tags);&#10;        }&#10;    });&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/image/AprilTags.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 135.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor to detect AprilTags in an image or stream of images.&#10;An AprilTag is a pattern of dark and light squares similar to a QR code but easier for&#10;cameras to detect robustly and at a distance.&#10;AprilTags were created by Associate Professor Edwin Olson (&lt;a href=&quot;mailto:ebolson@umich.edu&quot;&gt;ebolson@umich.edu&lt;/a&gt;),&#10;EECS, University of Michigan. See &lt;a href=&quot;https://april.eecs.umich.edu/#in_browser&quot;&gt;https://april.eecs.umich.edu/&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;The implementation of this accessor on the Ptolemy II/Nashorn accessor host&#10;uses an older Java implementation of the AprilTags detector written by Edwin Olson&#10;and more recently supplanted by a C version that performs much better. But this Java&#10;version is more easily included in Ptolemy II in a portable way. If you need better&#10;performance, consider replacing this with the C implementation and using JNI to interface&#10;to Ptolemy II.&lt;/p&gt;&#10;&lt;p&gt;https://april.eecs.umich.edu/software/apriltag.html contains a set of&#10;pregenerated tags as png and PostScript files.  However, these are of&#10;low resolution.  To scale them, use linear interpolation to avoid blurring.&#10;For example, with ImageMagik, use:&lt;/p&gt;&#10;&lt;p&gt; mogrify -scale 1000x1000 &lt;em&gt;.png; convert &lt;/em&gt;.png tag36h11.pdf&lt;/p&gt;&#10;&lt;p&gt;Or, search the web for &amp;quot;tag 36H11&amp;quot;.  &lt;/p&gt;&#10;&lt;p&gt;In the Ptolemy tree, a sample file may be found at&#10;$PTII/ptolemy/actor/lib/jjs/modules/aprilTags//demo/AprilTags/tag36_11_00586.pdf&lt;/p&gt;&#10;&lt;p&gt;The input to this accessor is an image or a stream of images, e.g. from the Camera&#10;accessor.  There are two outputs. The one named &lt;em&gt;output&lt;/em&gt; is a modified version&#10;of the input image that outlines any detected AprilTags in the image&#10;and indicates their center and ID.  The &lt;em&gt;tags&lt;/em&gt; output is an array of&#10;objects representing the detected tags. Each object includes the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;_id_: The ID of the detected tag.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;center&lt;/em&gt;: An array with two doubles giving the center of the tag in pixel coordinates.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;perimeter&lt;/em&gt;: An array with four arrays, each of which gives the x and y coordinates of&#10;a corner of the AprilTag.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The AprilTags detector has a large number of parameters that can be tuned via&#10;the &lt;em&gt;options&lt;/em&gt; input. To set an option, provide a JSON object with a field matching&#10;the option name.  The options are described below using descriptions provided by&#10;by Edwin Olson in his Java implementation of an AprilTag detector:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;MagThresh&lt;/em&gt;: When growing components, the intra component variation is&#10;allowed to grow when the component is small in size. This&#10;threshold affects how much. The default is 1200.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;MaxEdgeCost&lt;/em&gt;: Set the maximum angle range allowed for the gradient directions&#10;when connecting edges, in radians. This defaults to the radian&#10;equivalent of 30 degrees.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;MinMag&lt;/em&gt;: Set the gradient magnitude threshold for ignoring pixels.&#10;Do not consider pixels whose gradient magnitude is less than&#10;minMag. Small values make the detector more sensitive, but also&#10;force us to consider many more edges resulting in slower&#10;computation time. A value of 0.001 is very sensitive. A value&#10;of 0.01 is quite fast. The default is 0.004.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;SegDecimate&lt;/em&gt;: Set whether decimating before segmenting is enabled.&#10;Instead of blurring the input image before segmentation, we&#10;can achieve similar effects by decimating the image by a factor&#10;of two. When enabled, this option applies a block LPF filter of&#10;width 2, then decimates the image. With this option, not only&#10;can we safely set segSigma = 0, but the slowest part of the&#10;algorithm (the segmentation) runs about 4 times faster. The&#10;downside is that the position of the targets is determined&#10;based on the segmentation: lower resolution will result in more&#10;localization error. However, the effect on quality is quite&#10;modest, and this optimization is generally recommended (along&#10;with segSigma = 0). If segSigma is non-zero, the filtering by&#10;segSigma occurs first, followed by the block LPF, and the&#10;decimation. This defaults to false, indicating that the option&#10;is not enabled.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;SegSigma&lt;/em&gt;: Set the Gaussian smoothing kernel applied to image (0 == no filter)&#10;used when detecting the outline of the box. It is almost always&#10;useful to have some filtering, since the loss of small details&#10;won't hurt. Recommended value = 0.8 (the default). The case where sigma ==&#10;segsigma has been optimized to avoid a redundant filter&#10;operation.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Sigma&lt;/em&gt;: Set the Gaussian smoothing kernel applied to image (0 == no filter, the default)&#10;used when sampling bits. Filtering is a good idea in cases&#10;where A) a cheap camera is introducing artifical sharpening, B)&#10;the bayer pattern is creating artifcats, C) the sensor is very&#10;noisy and/or has hot/cold pixels. However, filtering makes it&#10;harder to decode very small tags. Reasonable values are 0, or&#10;[0.8, 1.5].&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;TagFamily&lt;/em&gt;: Set the name of the tag family being detected.&#10;This defaults to &amp;quot;Tag36h11&amp;quot;.&#10;The supported families are &amp;quot;Tag16h5&amp;quot;, &amp;quot;Tag25h7&amp;quot;, &amp;quot;Tag25h9&amp;quot;, &amp;quot;Tag36h10&amp;quot;, and &amp;quot;Tag36h11&amp;quot;.&#10;The default family seems least susceptible to false positives.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;ThetaThresh&lt;/em&gt;: When growing components, the intra component variation is&#10;allowed to grow when the component is small in size. This&#10;threshold affects how much. The default is 100.&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="An input image.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="An output image, with detected AprilTags outlined in green and identified.">
            </property>
            <property name="tags (port)" class="ptolemy.kernel.util.StringAttribute" value="An array of objects, one object for each tag detected in the image.">
            </property>
            <property name="options (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The options for the detector. This is a JSON object with fields defined above.&#10;  It defaults to an empty object, meaning to use default values for all the otpions.">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="FaceDetector" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Try me!  For 'input', enter /accessors/hosts/browser/demo/computerVision/terraswarmeyes.jpg&#10; *  then click 'react to inputs'.&#10; * &#10; *  A face detector accessor.&#10; *  This accessor detects faces in an input stream.&#10; *&#10; *  The options parameter can include the following fields:&#10; *  * _value_: The MinFaceSize and MaxFaceSize, which defaults to 50 and 400.&#10; *  * _type_: If set to 'JSON'&#10; *&#10; *  The implementation for the Ptolemy II host uses&#10; *  [https://opencv.org](openCV) which is licensed under a BSD 3-clause license.&#10; *&#10; *  @accessor image/FaceDetector&#10; *  @input input A stream of images.&#10; *  @input options The value and type options.&#10; *  @output output The results of filtering the image according to the options&#10; *  @output {int} faceCount The number of faces&#10; *  @author Ilge Akkaya.  Contributor: Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, getParameter, input, output, removeInputHandler, require, send  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var faceDetector = require('@accessors-modules/face-detector');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.parameter('options', {&#10;        'value': '{&quot;MinFaceSize&quot;: 50, &quot;MaxFaceSize&quot;: 500}',&#10;        'type': 'JSON'&#10;    });&#10;    this.parameter('transform', {&#10;        type: 'string',&#10;        options: faceDetector.filters,&#10;        value: 'faces'&#10;    });&#10;    this.output('output');&#10;    this.output('faceCount', {&#10;        'type': 'int'&#10;    });&#10;&#10;    this.output('faces');&#10;};&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var options = this.getParameter('options');&#10;        var transform = this.getParameter('transform');&#10;        var image = this.get('input');&#10;       &#10;        faceDetector.filter(image, transform, options, function (result) {&#10;            self.send('output', result);&#10;            var numFaces = faceDetector.numberOfFaces();&#10;            self.send('faceCount', numFaces);&#10;            var faces = faceDetector.faceRectangles();&#10;            self.send('faces', JSON.stringify(faces));&#10;        });&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/image/FaceDetector.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[400.0, 320.0]">
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;MinFaceSize&quot;: 50, &quot;MaxFaceSize&quot;: 400}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Try me!  For 'input', enter /accessors/hosts/browser/demo/computerVision/terraswarmeyes.jpg&#10; then click 'react to inputs'.&lt;/p&gt;&#10;&lt;p&gt; A face detector accessor.&#10; This accessor detects faces in an input stream.&lt;/p&gt;&#10;&lt;p&gt; The options parameter can include the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;value&lt;/em&gt;: The MinFaceSize and MaxFaceSize, which defaults to 50 and 400.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;type&lt;/em&gt;: If set to 'JSON'&lt;/p&gt;&#10;&lt;p&gt;The implementation for the Ptolemy II host uses&#10;&lt;a href=&quot;openCV&quot;&gt;https://opencv.org&lt;/a&gt; which is licensed under a BSD 3-clause license.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Ilge Akkaya.  Contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of images.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The results of filtering the image according to the options">
            </property>
            <property name="faceCount (port)" class="ptolemy.kernel.util.StringAttribute" value="The number of faces">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The value and type options.">
            </property>
        </property>
        <property name="transform" class="ptolemy.data.expr.Parameter" value="faces">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faceCount" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faces" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay2" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={254, 67, 176, 188}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[176, 144]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[595.0, 310.0]">
        </property>
    </entity>
    <entity name="MonitorValue" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[610.0, 365.0]">
        </property>
    </entity>
    <entity name="TimedDisplay" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 22, 1280, 773}, maximized=true}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[1280, 729]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[715.0, 530.0]">
        </property>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use get(parameterName, channel) to read inputs.&#10;// Send to output ports using send(value, portName, channel).&#10;exports.setup = function() {&#10;	this.input('faces');&#10;	this.parameter('speed', {type: 'string', value: 100});&#10;	this.parameter('width', {value: 360});&#10;	this.parameter('height', {value: 480});&#10;	this.parameter('precision', {value: 10});&#10;	this.output('movement');&#10;}&#10;&#10;var last_move_ts = new Date();&#10;var network_time = 500;&#10;&#10;function tagsReaction() {&#10;	var width = this.getParameter('width');&#10;	var height = this.getParameter('height');&#10;	var precision = this.getParameter('precision');;&#10;	var speed = this.getParameter('speed');&#10;	&#10;	var faces = JSON.parse(this.get('faces'));&#10;	if (faces.length &gt; 0) {&#10;		var face = faces[0];&#10;		// example: faces = [{x: 21, y: 31, width:200, height: 344}, {x: 21, y: 31, width:200, height: 344}]&#10;		var firstFaceCenterX = face.x + (face.width / 2);&#10;		var firstFaceCenterY = face.y + (face.height / 2);&#10;		&#10;		var x = (width/2) - firstFaceCenterX;&#10;		var y = (height/2) - firstFaceCenterY;&#10;	&#10;		var absX = Math.abs(x);&#10;		var absY = Math.abs(y);&#10;		console.log(&quot;April is &quot; + ((x &gt; 0) ? &quot;right&quot; : &quot;left&quot;) + &quot; by &quot; + absX + &quot;px&quot;);&#10;		&#10;		var pan = Math.log(precision*absX)*(x/absX);&#10;		var tilt = Math.log(precision*absY)*(y/absY);&#10;		if ((new Date()-last_move_ts) &gt; network_time) {&#10;			this.send('movement', {pan: pan, panSpeed: speed, tilt: tilt, tiltSpeed: speed, face: faces});&#10;			console.log(&quot;Movement sent&quot; + pan);&#10;			last_move_ts = new Date();&#10;		}&#10;	}&#10;}&#10;&#10;exports.initialize = function () {&#10;	this.addInputHandler('faces', tagsReaction);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[550.0, 530.0]">
        </property>
        <property name="speed" class="ptolemy.data.expr.Parameter" value="100">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="faces" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="movement" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Kubi2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; * Controls a Revolverobotics's Kubi via a iOS Kubi Server app.&#10; * To use it, you need to provide the IP address of the iOS device &#10; * which you can find in Wifi's settings.&#10; * &#10; * First, follow iOS Kubi Server simple steps to start the server given in&#10; * the app itself. Autoconnect toggle lets you start this setup automaticaly&#10; * next time you open the app. CAUTION: Camera streaming will start too &#10; * if Autoconnect is activated!&#10; * &#10; * Second,&#10; * FIXME: What to do next?&#10; *  &#10; * @author Victor Nouvellet &#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('httpClient');&#10;&#10;// Node Host needs util defined.&#10;var util = require('util');&#10;&#10;/** Inputs and outputs definition **/&#10;exports.setup = function() {&#10;    this.input('command');&#10;    this.parameter('kubiLocalServerIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('kubiLocalServerPort', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;8080&quot;&#10;    });&#10;    this.parameter('incremental', {type: 'boolean', value: true});&#10;    this.output('urlRequested', {&#10;        type: &quot;string&quot;&#10;    });&#10;};&#10;&#10;function Kubi() {&#10;    var kubi = {};&#10;    &#10;    kubi.lastUrlRequested = &quot;&quot;;&#10;&#10;    // Private variables&#10;    var debug = true;&#10;    var ipAddress = &quot;&quot;;&#10;    var port = &quot;&quot;;&#10;    var path = &quot;&quot;;&#10;    var url = &quot;&quot;;&#10;    var connected = false;&#10;    &#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;    &#10;    //Private functions.&#10;&#10;     /**&#10;     *  Parse command to create a command object&#10;     */&#10;     function parseCommand(command) {&#10;        var commandObject = {};&#10;&#10;        if (typeof command === 'string') {&#10;            command = JSON.parse(command);&#10;        }&#10;&#10;        // Check whether input is valid&#10;        if (Object.keys(command).length &lt; 1) {&#10;            self.error(&quot;Command is empty: &quot; + command);&#10;        } else {&#10;            // Get interresting properties&#10;            if (typeof command.pan !== 'undefined') {&#10;                commandObject.pan = command.pan;&#10;            }&#10;            if (typeof command.panDelta !== 'undefined') {&#10;                commandObject.pan = command.panDelta;&#10;            }&#10;            if (typeof command.tilt !== 'undefined') {&#10;                commandObject.tilt = command.tilt;&#10;            }&#10;            if ( typeof command.tiltDelta !== 'undefined') {&#10;                commandObject.tilt = command.tiltDelta;&#10;            }&#10;            if (typeof command.tiltSpeed !== 'undefined') {&#10;                commandObject.tiltSpeed = command.tiltSpeed;&#10;            }&#10;            if (typeof command.panSpeed !== 'undefined') {&#10;                commandObject.panSpeed = command.panSpeed;&#10;            }&#10;            //FIXME: Use commandObject.pan = command.pan || command.panDelta || 0; instead?&#10;        }&#10;&#10;        return commandObject;&#10;     }&#10;&#10;     /**&#10;     *  Build URL to request with commands&#10;     */&#10;     function buildGetUrl(incremental, correctCommand) {&#10;        var requestUrl = url;&#10;        var panVar, tiltVar;&#10;        var panSpeedVar = &quot;panSpeed&quot;;&#10;        var tiltSpeedVar = &quot;tiltSpeed&quot;;&#10;&#10;        console.log(&quot;Building URL...&quot;);&#10;&#10;        if (incremental == true) {&#10;            panVar = &quot;panDelta&quot;;&#10;            tiltVar = &quot;tiltDelta&quot;;&#10;        } else {&#10;            panVar = &quot;pan&quot;;&#10;            tiltVar = &quot;tilt&quot;;&#10;        }&#10;        requestUrl += &quot;?&quot; + panVar + &quot;=&quot; + correctCommand.pan + &quot;&amp;&quot;&#10;                                             + panSpeedVar + &quot;=&quot; + correctCommand.panSpeed + &quot;&amp;&quot;&#10;                                             + tiltVar + &quot;=&quot; + correctCommand.tilt + &quot;&amp;&quot;&#10;                                             + tiltSpeedVar + &quot;=&quot; + correctCommand.tiltSpeed;&#10;        return requestUrl;&#10;     }&#10;&#10;     /**&#10;     *  Report all server errors if they exist and return true in this case.&#10;     */&#10;     function reportIfError(response) {&#10;        var body = response.body;&#10;        //FIXME: Server not ready to give json...&#10;        return true; //Remove this line after server update&#10;        &#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;&#10;        if (body instanceof Array &amp;&amp; obj.length &gt; 0 &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server error report: &quot; + error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;     }&#10;    &#10;    // Public functions.&#10;    &#10;    kubi.connect = function() {&#10;        if (debug) {&#10;            console.log(&quot;Kubi.js: Connecting...&quot;);&#10;        }&#10;        ipAddress = self.getParameter('kubiLocalServerIP');&#10;        port = self.getParameter('kubiLocalServerPort') || &quot;8080&quot;;&#10;        path = self.getParameter('incremental') ? &quot;/incremental&quot; : &quot;/absolute&quot;;&#10;        &#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Kubi server.&quot;;&#10;        }&#10;        &#10;        url = &quot;http://&quot; + ipAddress + &quot;:&quot; + port + path;&#10;        &#10;        connected = true;&#10;        //TODO: Implement token auth on server side&#10;     };&#10;     &#10;     /**&#10;     *  Issue a command to the server.&#10;     */&#10;     kubi.issueCommand = function () {&#10;        var command = self.get('command');&#10;        if (debug) {&#10;            console.log(&quot;Kubi.js: issueCommand(): &quot; + util.inspect(command));&#10;        }&#10;         //TODO: check authentification, queue command until server authentification&#10;         &#10;         kubi.processCommand(command);&#10;     };&#10;     &#10;     /**&#10;     *  Process received command after authentification and connectivity checks.&#10;     */&#10;     kubi.processCommand = function (command) {&#10;        console.log(&quot;Proccessing command&quot;);&#10;        var commandObject = parseCommand(command);&#10;        console.log(&quot;Got command object &quot;);&#10;        if (typeof commandObject !== 'undefined') {&#10;            var requestUrl = buildGetUrl(self.getParameter('incremental'), commandObject);&#10;            &#10;            http.get(requestUrl, function(response) {&#10;            	if (response !== null) {&#10;	                if (false) {&#10;	                    console.log(&quot;Kubi.js: processCommands(): response status: &quot; + response.statusMessage);&#10;	                    console.log(&quot;Kubi.js: processCommands(): response body: &quot; + response.body);&#10;	                }&#10;	                kubi.lastUrlRequested = requestUrl;&#10;	                reportIfError(response);&#10;            	} else {&#10;            		self.error(&quot;Unable to connect to the server on &quot; + requestUrl);&#10;            	}&#10;            	&#10;            	self.send('urlRequested', requestUrl);&#10;            });&#10;            &#10;            return;&#10;        } else {&#10;            console.log(&quot;commandObject undefined&quot;);&#10;        }&#10;     };&#10;     &#10;     &#10;     return kubi;&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.kubi = Kubi.call(this);&#10;    &#10;    console.log(&quot;Kubi.js: Initializing...&quot;);&#10;    this.addInputHandler('command', this.kubi.issueCommand);&#10;    console.log(&quot;Kubi.js: Handler added&quot;);&#10;    this.kubi.connect();&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[705.0, 430.0]">
        </property>
        <property name="kubiLocalServerIP" class="ptolemy.data.expr.Parameter" value="$KubiServerIPAddress">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="kubiLocalServerPort" class="ptolemy.data.expr.Parameter" value="8080">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="incremental" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <port name="script" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="_hide" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="urlRequested" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images. It limits the number of&#10; *  outputs to maxFrameRate images per second, even if the camera produces more&#10; *  images than that. You can use the maxFrameRate parameter to avoid overwhelming&#10; *  your application.&#10; *&#10; *  @accessor cameras/Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to false.&#10; *  @parameter {number} maxFrameRate If not triggered, this limits the output&#10; *   to the specified number of frames per second. This is a number that defaults to 25.&#10; *  @parameter {string} camera The name of the camera to use.&#10; *   A list of available cameras is presented as options.&#10; *   This is a string that defaults to &quot;default camera&quot;,&#10; *   which uses the system default, if there is one.&#10; *  @parameter {{width: number, height: number}} viewSize The view size&#10; *   to use for capture, in pixels. A list of available view sizes for&#10; *   the selected camara is presented as options. This is a JSON specification&#10; *   with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, error, exports, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var cameras = require(&quot;@accessors-modules/cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.output('image');&#10;    this.parameter('triggered', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.parameter('maxFrameRate', {&#10;        'type': 'number',&#10;        'value': 25&#10;    });&#10;    // NOTE: The following assumes that setup() is reinvoked whenever a parameter&#10;    // value changes, since the camera will change and so will the available options.&#10;    this.parameter('camera', {&#10;        'type': 'string',&#10;        'value': 'default camera'&#10;    });&#10;    this.parameter('viewSize', {&#10;        'type': 'JSON'&#10;    });&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a cameras module.&#10;    try {&#10;        this.parameter('camera', {&#10;            'options': cameras.cameras()&#10;        });&#10;        camera = new cameras.Camera(this.getParameter('camera'));&#10;        this.parameter('viewSize', {&#10;            'value': camera.getViewSize(),&#10;            'options': camera.viewSizes()&#10;        });&#10;    } catch (err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function () {&#10;    camera.setViewSize(this.getParameter('viewSize'));&#10;    camera.open();&#10;    var self = this;&#10;    if (this.getParameter('triggered')) {&#10;        // Request a snapshot.  Note the video stream might not be playing.&#10;        // An event will be generated when a snapshot is available.&#10;        camera.on('snapshot', function (image) {&#10;            self.send('image', image);&#10;        });&#10;&#10;        handle = this.addInputHandler('trigger', function () {&#10;            camera.snapshot();&#10;        });&#10;    } else {&#10;        var maxFrameRate = self.getParameter('maxFrameRate');&#10;        var frameInterval = 1000.0/maxFrameRate; // In ms.&#10;        var lastFrameTime = 0;&#10;        camera.on('image', function (image) {&#10;            var currentTime = Date.now();&#10;            if (currentTime - lastFrameTime &gt;= frameInterval) {&#10;                self.send('image', image);&#10;                lastFrameTime = currentTime;&#10;            }&#10;        });&#10;    }&#10;};&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function () {&#10;    camera.removeAllListeners('image');&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;    camera.close();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/cameras/Camera.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for a camera on the local host. This can be a built-in camera or&#10; a USB-connected camera. This accessor has two modes of operation, &amp;quot;triggered&amp;quot;&#10; and &amp;quot;open loop.&amp;quot; In triggered mode, it captures an image whenever a trigger&#10; input is received and produces that image on its output. In open-loop mode,&#10; it captures every image produced by the camera, at the speed of the camera,&#10; and produces on the output a stream of such images. It limits the number of&#10; outputs to maxFrameRate images per second, even if the camera produces more&#10; images than that. You can use the maxFrameRate parameter to avoid overwhelming&#10; your application.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input for triggered mode.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of captured images.">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to false.">
            </property>
            <property name="camera (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the camera to use.&#10;  A list of available cameras is presented as options.&#10;  This is a string that defaults to &quot;default camera&quot;,&#10;  which uses the system default, if there is one.">
            </property>
            <property name="viewSize (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The view size&#10;  to use for capture, in pixels. A list of available view sizes for&#10;  the selected camara is presented as options. This is a JSON specification&#10;  with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.">
            </property>
            <property name="maxFrameRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If not triggered, this limits the output&#10;  to the specified number of frames per second. This is a number that defaults to 25.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="camera" class="ptolemy.data.expr.Parameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.Parameter" value="{&quot;width&quot;:176, &quot;height&quot;:144}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 330.0]">
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="maxFrameRate" class="ptolemy.data.expr.Parameter" value="10.0">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ClockKubiInterface.movement&quot;,x=345.0,y=225.0}, tail={id=&quot;Kubi.command&quot;,x=545.0,y=225.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[630.0, 530.0]">
        </vertex>
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ClockKubiInterface.movement" relation="relation"/>
    <link port="ClockKubiInterface.tags" relation="relation2"/>
    <link port="Kubi.command" relation="relation"/>
    <link port="ImageDisplay.input" relation="relation4"/>
    <link port="AprilTags.output" relation="relation4"/>
    <link port="AprilTags.tags" relation="relation2"/>
    <link port="FaceDetector.input" relation="relation3"/>
    <link port="FaceDetector.output" relation="relation5"/>
    <link port="FaceDetector.faceCount" relation="relation6"/>
    <link port="FaceDetector.faces" relation="relation10"/>
    <link port="ImageDisplay2.input" relation="relation5"/>
    <link port="MonitorValue.input" relation="relation6"/>
    <link port="TimedDisplay.input" relation="relation9"/>
    <link port="JavaScript.faces" relation="relation10"/>
    <link port="JavaScript.movement" relation="relation9"/>
    <link port="Kubi2.command" relation="relation9"/>
    <link port="Camera.image" relation="relation3"/>
</entity>
