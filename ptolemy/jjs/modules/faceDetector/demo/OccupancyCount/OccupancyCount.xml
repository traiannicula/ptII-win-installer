<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="OccupancyCount" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[85.0, 75.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={107, 23, 930, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[696, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{348.0, 262.0}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Authors: Marten Lohstroh, Christopher Brooks, Elizabeth Osyk">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 475.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Use OpenCV face detection to count faces in a room.&#10;(See OccupancyLights to additionally control a Hue light bulb.)&#10;&#10;This model requires:&#10;* A camera&#10;* OpenCV installation&#10;* PATH should include OpenCV installation&#10;&#10;For OpenCV installation instructions, please see:&#10;https://opencv-java-tutorials.readthedocs.io/en/latest/01-installing-opencv-for-java.html&#10;">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[35.0, 120.0]">
        </property>
    </property>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images. It limits the number of&#10; *  outputs to maxFrameRate images per second, even if the camera produces more&#10; *  images than that. You can use the maxFrameRate parameter to avoid overwhelming&#10; *  your application.&#10; *&#10; *  @accessor cameras/Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to false.&#10; *  @parameter {number} maxFrameRate If not triggered, this limits the output&#10; *   to the specified number of frames per second. This is a number that defaults to 25.&#10; *  @parameter {string} camera The name of the camera to use.&#10; *   A list of available cameras is presented as options.&#10; *   This is a string that defaults to &quot;default camera&quot;,&#10; *   which uses the system default, if there is one.&#10; *  @parameter {{width: number, height: number}} viewSize The view size&#10; *   to use for capture, in pixels. A list of available view sizes for&#10; *   the selected camara is presented as options. This is a JSON specification&#10; *   with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, error, exports, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var cameras = require(&quot;@accessors-modules/cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.output('image');&#10;    this.parameter('triggered', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.parameter('maxFrameRate', {&#10;        'type': 'number',&#10;        'value': 25&#10;    });&#10;    // NOTE: The following assumes that setup() is reinvoked whenever a parameter&#10;    // value changes, since the camera will change and so will the available options.&#10;    this.parameter('camera', {&#10;        'type': 'string',&#10;        'value': 'default camera'&#10;    });&#10;    this.parameter('viewSize', {&#10;        'type': 'JSON'&#10;    });&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a cameras module.&#10;    try {&#10;        this.parameter('camera', {&#10;            'options': cameras.cameras()&#10;        });&#10;        camera = new cameras.Camera(this.getParameter('camera'));&#10;        this.parameter('viewSize', {&#10;            'value': camera.getViewSize(),&#10;            'options': camera.viewSizes()&#10;        });&#10;    } catch (err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function () {&#10;    camera.setViewSize(this.getParameter('viewSize'));&#10;    camera.open();&#10;    var self = this;&#10;    if (this.getParameter('triggered')) {&#10;        // Request a snapshot.  Note the video stream might not be playing.&#10;        // An event will be generated when a snapshot is available.&#10;        camera.on('snapshot', function (image) {&#10;            self.send('image', image);&#10;        });&#10;&#10;        handle = this.addInputHandler('trigger', function () {&#10;            camera.snapshot();&#10;        });&#10;    } else {&#10;        var maxFrameRate = self.getParameter('maxFrameRate');&#10;        var frameInterval = 1000.0/maxFrameRate; // In ms.&#10;        var lastFrameTime = 0;&#10;        camera.on('image', function (image) {&#10;            var currentTime = Date.now();&#10;            if (currentTime - lastFrameTime &gt;= frameInterval) {&#10;                self.send('image', image);&#10;                lastFrameTime = currentTime;&#10;            }&#10;        });&#10;    }&#10;};&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function () {&#10;    camera.removeAllListeners('image');&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;    camera.close();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/cameras/Camera.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for a camera on the local host. This can be a built-in camera or&#10; a USB-connected camera. This accessor has two modes of operation, &amp;quot;triggered&amp;quot;&#10; and &amp;quot;open loop.&amp;quot; In triggered mode, it captures an image whenever a trigger&#10; input is received and produces that image on its output. In open-loop mode,&#10; it captures every image produced by the camera, at the speed of the camera,&#10; and produces on the output a stream of such images. It limits the number of&#10; outputs to maxFrameRate images per second, even if the camera produces more&#10; images than that. You can use the maxFrameRate parameter to avoid overwhelming&#10; your application.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input for triggered mode.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of captured images.">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to false.">
            </property>
            <property name="camera (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the camera to use.&#10;  A list of available cameras is presented as options.&#10;  This is a string that defaults to &quot;default camera&quot;,&#10;  which uses the system default, if there is one.">
            </property>
            <property name="viewSize (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The view size&#10;  to use for capture, in pixels. A list of available view sizes for&#10;  the selected camara is presented as options. This is a JSON specification&#10;  with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.">
            </property>
            <property name="maxFrameRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If not triggered, this limits the output&#10;  to the specified number of frames per second. This is a number that defaults to 25.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="camera" class="ptolemy.data.expr.Parameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.Parameter" value="{&quot;width&quot;:640, &quot;height&quot;:480}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[235.0, 410.0]">
        </property>
        <property name="maxFrameRate" class="ptolemy.data.expr.Parameter" value="1.0">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={91, 179, 640, 524}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[640, 480]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[535.0, 365.0]">
        </property>
    </entity>
    <entity name="FaceDetector" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Try me!  For 'input', enter /accessors/hosts/browser/demo/computerVision/terraswarmeyes.jpg&#10; *  then click 'react to inputs'.&#10; * &#10; *  A face detector accessor.&#10; *  This accessor detects faces in an input stream.&#10; *&#10; *  The options parameter can include the following fields:&#10; *  * _value_: The MinFaceSize and MaxFaceSize, which defaults to 50 and 400.&#10; *  * _type_: If set to 'JSON'&#10; *&#10; *  The implementation for the Ptolemy II host uses&#10; *  [https://opencv.org](openCV) which is licensed under a BSD 3-clause license.&#10; *&#10; *  @accessor image/FaceDetector&#10; *  @input input A stream of images.&#10; *  @input options The value and type options.&#10; *  @output output The results of filtering the image according to the options&#10; *  @output {int} faceCount The number of faces&#10; *  @author Ilge Akkaya.  Contributor: Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, getParameter, input, output, removeInputHandler, require, send  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var faceDetector = require('@accessors-modules/face-detector');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.parameter('options', {&#10;        'value': '{&quot;MinFaceSize&quot;: 50, &quot;MaxFaceSize&quot;: 500}',&#10;        'type': 'JSON'&#10;    });&#10;    this.parameter('transform', {&#10;        type: 'string',&#10;        options: faceDetector.filters,&#10;        value: 'faces'&#10;    });&#10;    this.output('output');&#10;    this.output('faceCount', {&#10;        'type': 'int'&#10;    });&#10;&#10;    this.output('faces');&#10;};&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var options = this.getParameter('options');&#10;        var transform = this.getParameter('transform');&#10;        var image = this.get('input');&#10;       &#10;        faceDetector.filter(image, transform, options, function (result) {&#10;            self.send('output', result);&#10;            var numFaces = faceDetector.numberOfFaces();&#10;            self.send('faceCount', numFaces);&#10;            var faces = faceDetector.faceRectangles();&#10;            self.send('faces', JSON.stringify(faces));&#10;        });&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/image/FaceDetector.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[380.0, 400.0]">
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;MinFaceSize&quot;: 80, &quot;MaxFaceSize&quot;: 400}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Try me!  For 'input', enter /accessors/hosts/browser/demo/computerVision/terraswarmeyes.jpg&#10; then click 'react to inputs'.&lt;/p&gt;&#10;&lt;p&gt; A face detector accessor.&#10; This accessor detects faces in an input stream.&lt;/p&gt;&#10;&lt;p&gt; The options parameter can include the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;value&lt;/em&gt;: The MinFaceSize and MaxFaceSize, which defaults to 50 and 400.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;type&lt;/em&gt;: If set to 'JSON'&lt;/p&gt;&#10;&lt;p&gt;The implementation for the Ptolemy II host uses&#10;&lt;a href=&quot;openCV&quot;&gt;https://opencv.org&lt;/a&gt; which is licensed under a BSD 3-clause license.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Ilge Akkaya.  Contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of images.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The results of filtering the image according to the options">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The value and type options.">
            </property>
            <property name="cog (port)" class="ptolemy.kernel.util.StringAttribute" value="The horizontal and vertical position of the center of gravity of motion, in pixels.">
            </property>
            <property name="area (port)" class="ptolemy.kernel.util.StringAttribute" value="The percentage of area covered by motion.">
            </property>
            <property name="faceCount (port)" class="ptolemy.kernel.util.StringAttribute" value="The number of faces">
            </property>
        </property>
        <property name="transform" class="ptolemy.data.expr.Parameter" value="faces">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faceCount" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faces" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="PeopleCount" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[575.0, 440.0]">
        </property>
    </entity>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Camera.image&quot;,x=250.0,y=210.0}, tail={id=&quot;FaceDetector2.input&quot;,x=395.0,y=200.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ImageDisplay.input&quot;,x=540.0,y=170.0}, tail={id=&quot;FaceDetector2.output&quot;,x=395.0,y=200.0}, points={485.0,170.0,485.0,190.0} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Camera.image" relation="relation2"/>
    <link port="ImageDisplay.input" relation="relation3"/>
    <link port="FaceDetector.input" relation="relation2"/>
    <link port="FaceDetector.output" relation="relation3"/>
    <link port="FaceDetector.faceCount" relation="relation4"/>
    <link port="PeopleCount.input" relation="relation4"/>
</entity>
