<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="FaceDetector" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="68.0, 32.0">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={219, 75, 934, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{355.0, 255.265625}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Test FaceDetector module.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 20.0]">
        </property>
    </property>
    <entity name="ImageReader" class="ptolemy.actor.lib.image.ImageReader">
        <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/ptolemy/actor/lib/jjs/modules/faceDetector/demo/FaceDetector/terraswarm.jpg">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 105.0]">
        </property>
    </entity>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[75.0, 105.0]">
        </property>
    </entity>
    <entity name="FaceDetector" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Try me!  For 'input', enter /accessors/hosts/browser/demo/computerVision/terraswarmeyes.jpg&#10; *  then click 'react to inputs'.&#10; * &#10; *  A face detector accessor.&#10; *  This accessor detects faces in an input stream.&#10; *&#10; *  The options parameter can include the following fields:&#10; *  * _value_: The MinFaceSize and MaxFaceSize, which defaults to 50 and 400.&#10; *  * _type_: If set to 'JSON'&#10; *&#10; *  The implementation for the Ptolemy II host uses&#10; *  [https://opencv.org](openCV) which is licensed under a BSD 3-clause license.&#10; *&#10; *  @accessor image/FaceDetector&#10; *  @input input A stream of images.&#10; *  @input options The value and type options.&#10; *  @output output The results of filtering the image according to the options&#10; *  @output {int} faceCount The number of faces&#10; *  @author Ilge Akkaya.  Contributor: Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, getParameter, input, output, removeInputHandler, require, send  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var faceDetector = require('@accessors-modules/face-detector');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.parameter('options', {&#10;        'value': '{&quot;MinFaceSize&quot;: 50, &quot;MaxFaceSize&quot;: 500}',&#10;        'type': 'JSON'&#10;    });&#10;    this.parameter('transform', {&#10;        type: 'string',&#10;        options: faceDetector.filters,&#10;        value: 'faces'&#10;    });&#10;    this.output('output');&#10;    this.output('faceCount', {&#10;        'type': 'int'&#10;    });&#10;&#10;    this.output('faces');&#10;};&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var options = this.getParameter('options');&#10;        var transform = this.getParameter('transform');&#10;        var image = this.get('input');&#10;       &#10;        faceDetector.filter(image, transform, options, function (result) {&#10;            self.send('output', result);&#10;            var numFaces = faceDetector.numberOfFaces();&#10;            self.send('faceCount', numFaces);&#10;            var faces = faceDetector.faceRectangles();&#10;            self.send('faces', JSON.stringify(faces));&#10;        });&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/image/FaceDetector.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[290.0, 115.0]">
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="{&quot;MinFaceSize&quot;: 50, &quot;MaxFaceSize&quot;: 400}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Try me!  For 'input', enter /accessors/hosts/browser/demo/computerVision/terraswarmeyes.jpg&#10; then click 'react to inputs'.&lt;/p&gt;&#10;&lt;p&gt; A face detector accessor.&#10; This accessor detects faces in an input stream.&lt;/p&gt;&#10;&lt;p&gt; The options parameter can include the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;value&lt;/em&gt;: The MinFaceSize and MaxFaceSize, which defaults to 50 and 400.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;type&lt;/em&gt;: If set to 'JSON'&lt;/p&gt;&#10;&lt;p&gt;The implementation for the Ptolemy II host uses&#10;&lt;a href=&quot;openCV&quot;&gt;https://opencv.org&lt;/a&gt; which is licensed under a BSD 3-clause license.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Ilge Akkaya.  Contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of images.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The results of filtering the image according to the options">
            </property>
            <property name="faceCount (port)" class="ptolemy.kernel.util.StringAttribute" value="The number of faces">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The value and type options.">
            </property>
        </property>
        <property name="transform" class="ptolemy.data.expr.Parameter" value="faces">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faceCount" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="faces" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={456, 186, 421, 354}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[421, 310]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{415, 105}">
        </property>
    </entity>
    <entity name="MonitorValue" class="ptolemy.actor.lib.gui.MonitorValue">
        <doc>Monitor and display values</doc>
        <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="20">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.UpdatedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="displayWidth">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[465.0, 165.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ImageReader.output" relation="relation2"/>
    <link port="ImageReader.trigger" relation="relation"/>
    <link port="SingleEvent.output" relation="relation"/>
    <link port="FaceDetector.input" relation="relation2"/>
    <link port="FaceDetector.output" relation="relation3"/>
    <link port="FaceDetector.faceCount" relation="relation4"/>
    <link port="ImageDisplay.input" relation="relation3"/>
    <link port="MonitorValue.input" relation="relation4"/>
</entity>
