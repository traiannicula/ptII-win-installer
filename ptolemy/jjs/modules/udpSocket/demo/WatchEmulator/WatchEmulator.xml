<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="WatchEmulator" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.1">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="startTime" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="10.0">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[90.0, 45.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={151, 45, 949, 676}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[715, 566]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0226885307151081">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{373.6797235063512, 260.83251953125006}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Emulate a watch, transmit the data via UDP,&#10;read the data and plot it.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 75.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Listen for messages.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{105.0, -15.0}">
        </property>
    </property>
    <property name="AccessorCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator">
        <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$PTII/org/terraswarm/accessor/accessors/web/devices/test/auto">
        </property>
        <property name="run" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="@node@ ../../../node_modules/@accessors-hosts/node/nodeHostInvoke.js devices/test/auto/@modelName@">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[340.0, 55.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Christopher Brooks.  Based on TestUDPSocketSelf.xml by Edward A. Lee, Elizabeth Osyk">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 515.0]">
        </property>
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.ActorLayoutConfiguration">
        <property name="spacing" class="ptolemy.actor.parameters.DoubleRangeParameter" value="2.0">
            <display name="Object spacing"/>
        </property>
        <property name="logAspectRatio" class="ptolemy.actor.parameters.DoubleRangeParameter" value="0.1200000000000001">
            <display name="Aspect ratio"/>
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Remove the timestamps from the JSON output&#10;because they change during each run.&#10;&#10;This test only tests the accelerometer output.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 125.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <property name="port" class="ptolemy.data.expr.Parameter" value="4568">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">-P-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[40.0, 210.0]">
        </property>
    </property>
    <entity name="JavaScriptWatchEmulator" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Put your JavaScript program here.&#10;// Add ports and parameters.&#10;// Define JavaScript functions initialize(), fire(), and/or wrapup().&#10;// Refer to parameters in scope using dollar-sign{parameterName}.&#10;// In the fire() function, use get(parameterName, channel) to read inputs.&#10;// Send to output ports using send(value, portName, channel).&#10;&#10;exports.setup = function() {&#10;    this.parameter('interval', {'type':'number', 'value':1000});&#10;    this.output('output', {'type': 'record'});&#10;    this.input('trigger');&#10;};&#10;&#10;// Define a few helper functions to help set up the watch data&#10;/** Convert short int to 2 bytes array.                                                                          &#10; */&#10;function short_to_bytes(n) {&#10;    var b = new Uint8Array([0, 0]);&#10;    if (b &lt; 0) {&#10;        n = (Math.pow(2, 16) + n);&#10;    }&#10;    b[0] = n &amp; 0xFF;&#10;    n &gt;&gt;= 8;&#10;    b[1] = n &amp; 0xFF;&#10;    return b;&#10;}&#10;&#10;/** Convert int to 3 bytes array. */&#10;function int_to_3bytes(n) {&#10;    var b = new Uint8Array([0, 0, 0]);&#10;    b[0] = n &amp; 0xFF;&#10;    n &gt;&gt;= 8;&#10;    b[1] = n &amp; 0xFF;&#10;    n &gt;&gt;= 8;&#10;    b[2] = n &amp; 0xFF;&#10;    return b;&#10;}&#10;&#10;// Convert int to 6 bytes array.                                                                                 &#10;function timestamp_2_bytes(n) {&#10;    var b = new Uint8Array([0, 0, 0, 0, 0, 0]);&#10;    var milisce = n % 1000;&#10;    n /= 1000;&#10;    b[0] = n &amp; 0xFF;&#10;    n &gt;&gt;= 8;&#10;    b[1] = n &amp; 0xFF;&#10;    n &gt;&gt;= 8;&#10;    b[2] = n &amp; 0xFF;&#10;    n &gt;&gt;= 8;&#10;    b[3] = n &amp; 0xFF;&#10;    b[4] = milisce &amp; 0xFF;&#10;    milisce &gt;&gt;= 8;&#10;    b[5] = milisce &amp; 0xFF;&#10;    return b;&#10;}&#10;&#10;/** Create an unsigned byte array with the watch data.&#10; *  @return The unsigned byte array.&#10; */&#10;function initializeWatchData() {&#10;&#10;    // package head info -- Device data and Package type                                                         &#10;    var DEV_ID = '9096';&#10;    var WATCH_TYPE = &quot;w&quot;.charCodeAt(0);&#10;    var GLASS_TYPE = &quot;g&quot;.charCodeAt(0);&#10;    var BATTERY_TYPE = &quot;b&quot;.charCodeAt(0);&#10;    var ACCELEROMETER_TYPE = &quot;A&quot;.charCodeAt(0);&#10;    var GYRO_TYPE = &quot;G&quot;.charCodeAt(0);&#10;&#10;    // Original data of the data body for all three kinds of package.                                            &#10;    var ACCx = 0.98;&#10;    var ACCy = 0.01;&#10;    var ACCz = -0.02;&#10;    var GYRx = 0.2;&#10;    var GYRy = -0.3;&#10;    var GYRz = 0.4;&#10;    var PPG = 100000;&#10;    var HR = 70;&#10;    var BATTERY_LIFE = 90;&#10;&#10;    // Convert the original data to the format the data body requires.                                           &#10;    var accx = (ACCx * 10000) | 0;&#10;    var accy = (ACCy * 10000) | 0;&#10;    var accz = (ACCz * 10000) | 0;&#10;    var gyrx = (GYRx * 10000) | 0;&#10;    var gyry = (GYRy * 10000) | 0;&#10;    var gyrz = (GYRz * 10000) | 0;&#10;&#10;    // Length of accelerometer packets.&#10;    var aLength = 17;&#10;    // Length of gyroscope packets.&#10;    var gLength = 17;&#10;    &#10;    // Send 5 ac            &#10;    var watch_p = new Uint8Array(10 * (aLength + gLength));&#10;&#10;    watch_p[4] = ACCELEROMETER_TYPE;&#10;    for(var i = 0; i &lt; 10; i++) {&#10;        var now = Date.now();&#10;        var offset = i * (aLength + gLength);&#10;        var offset2 = offset + aLength;&#10;        &#10;        watch_p[0 + offset] = DEV_ID.charCodeAt(0);&#10;        watch_p[1 + offset] = DEV_ID.charCodeAt(1);&#10;        watch_p[2 + offset] = DEV_ID.charCodeAt(2);&#10;        watch_p[3 + offset] = DEV_ID.charCodeAt(3);&#10;        &#10;	    watch_p[4 + offset] = ACCELEROMETER_TYPE;&#10;	    &#10;        watch_p[5 + offset] = short_to_bytes(accx)[0];&#10;        watch_p[6 + offset] = short_to_bytes(accx)[1];&#10;        watch_p[7 + offset] = short_to_bytes(accy)[0];&#10;        watch_p[8 + offset] = short_to_bytes(accy)[1];&#10;        watch_p[9 + offset] = short_to_bytes(accz)[0];&#10;        watch_p[10 + offset] = short_to_bytes(accz)[1];&#10;        &#10;        watch_p[11 + offset] = timestamp_2_bytes(now)[0];&#10;        watch_p[12 + offset] = timestamp_2_bytes(now)[1];&#10;        watch_p[13 + offset] = timestamp_2_bytes(now)[2];&#10;        watch_p[14 + offset] = timestamp_2_bytes(now)[3];&#10;        watch_p[15 + offset] = timestamp_2_bytes(now)[4];&#10;        watch_p[16 + offset] = timestamp_2_bytes(now)[5];&#10;        &#10;        watch_p[0 + offset2] = DEV_ID.charCodeAt(0);&#10;        watch_p[1 + offset2] = DEV_ID.charCodeAt(1);&#10;        watch_p[2 + offset2] = DEV_ID.charCodeAt(2);&#10;        watch_p[3 + offset2] = DEV_ID.charCodeAt(3);&#10;        &#10;	    watch_p[4 + offset2] = GYRO_TYPE;&#10;        &#10;        watch_p[5 + offset2] = short_to_bytes(gyrx)[0];&#10;        watch_p[6 + offset2] = short_to_bytes(gyrx)[1];&#10;        watch_p[7 + offset2] = short_to_bytes(gyry)[0];&#10;        watch_p[8 + offset2] = short_to_bytes(gyry)[1];&#10;        watch_p[9 + offset2] = short_to_bytes(gyrz)[0];&#10;        watch_p[10 + offset2] = short_to_bytes(gyrz)[1];&#10;        &#10;        watch_p[11 + offset2] = timestamp_2_bytes(now)[0];&#10;        watch_p[12 + offset2] = timestamp_2_bytes(now)[1];&#10;        watch_p[13 + offset2] = timestamp_2_bytes(now)[2];&#10;        watch_p[14 + offset2] = timestamp_2_bytes(now)[3];&#10;        watch_p[15 + offset2] = timestamp_2_bytes(now)[4];&#10;        watch_p[16 + offset2] = timestamp_2_bytes(now)[5];&#10;        &#10;        //watch_p[5 + i * 22 + 12] = int_to_3bytes(PPG)[0];&#10;        //watch_p[5 + i * 22 + 13] = int_to_3bytes(PPG)[1];&#10;        //watch_p[5 + i * 22 + 14] = int_to_3bytes(PPG)[2];&#10;        //watch_p[5 + i * 22 + 15] = (HR &amp; 0xFF);&#10;    }&#10;    return watch_p;&#10;}&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;var count = 0;&#10;&#10;exports.generate = function() {&#10;	var watch_p = initializeWatchData();&#10;	this.send('output', watch_p);&#10;}&#10;&#10;exports.initialize = function() {&#10;	handle = this.addInputHandler('trigger', this.exports.generate.bind(this));&#10;};&#10;&#10;exports.wrapup = function() {&#10;    if (handle !== null) {&#10;        //clearInterval(handle);&#10;        //handle = null;&#10;        this.removeInputHandler(handle);&#10;    }&#10;};">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[250.0, 260.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="UDPSocketSender" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor sends UDP (datagram) messages to the specified&#10; *  destination address and port.&#10; *&#10; *  The send type can be any of those supported by the host.  The list&#10; *  of supported types will be provided as options for the `sendType`&#10; *  parameter. For the Ptolemy II host, these include at least&#10; *  'string', 'number', 'image', and a variety of numeric types.&#10; *&#10; *  Note that UDP, unlike TCP, has the notion of a &quot;message&quot; (a&#10; *  datagram). A message can contain more than one byte.  The&#10; *  `receiveType` determines the type of the elements sent&#10; *  by this accessor&#10; *&#10; *  @accessor net/UDPSocketSender&#10; *  @author Hokeun Kim and Edward A. Lee, Contributor: Christopher Brooks&#10; *  @version $$Id$$&#10; *&#10; *  @input toSend The message to send.&#10; *  @input {string} destinationAddress The host name or IP address to send to.&#10; *   This defaults to &quot;localhost&quot;.&#10; *  @input {int} destinationPort The port to send to.&#10; *   This defaults to 8084.&#10; *  @parameter {string} sendType See above.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, console, exports, get, input, output, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;// This accessor requires the optional 'udpSocket' module, which may or may&#10;// not be provided by an accessor host. Most hosts will provide this module.&#10;var UDPSocket = require('@accessors-modules/udp-socket');&#10;&#10;// Set up the accessor. In an XML specification, this information would&#10;// be provided in XML syntax.&#10;exports.setup = function () {&#10;    this.input('toSend');&#10;&#10;    this.input('destinationAddress', {&#10;        'value': 'localhost',&#10;        'type': 'string'&#10;    });&#10;&#10;    this.input('destinationPort', {&#10;        'value': 8084,&#10;        'type': 'int'&#10;    });&#10;    this.parameter('sendType', {&#10;        type: 'string',&#10;        value: 'string'&#10;    });&#10;&#10;    // Attempt to add a list of options for types, but do not error out&#10;    // if the socket module is not supported by the host.&#10;    try {&#10;        this.parameter('sendType', {&#10;            options: UDPSocket.supportedSendTypes()&#10;        });&#10;    } catch (err) {&#10;        this.error(err);&#10;    }&#10;};&#10;&#10;var socket = null;&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;&#10;    socket = UDPSocket.createSocket();&#10;    socket.on('error', function (message) {&#10;        self.error(message);&#10;    });&#10;    socket.setSendType(this.get('sendType'));&#10;    this.addInputHandler('toSend', function () {&#10;        var message = self.get('toSend');&#10;        socket.send(message,&#10;            self.get('destinationPort'),&#10;            self.get('destinationAddress'));&#10;    });&#10;};&#10;&#10;exports.wrapup = function () {&#10;    // This null check avoids an error in code generation.&#10;    if (socket !== null) {&#10;        socket.close();&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/UDPSocketSender.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[505.0, 250.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="destinationAddress" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="unsignedbyte">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor sends UDP (datagram) messages to the specified&#10; destination address and port.&lt;/p&gt;&#10;&lt;p&gt; The send type can be any of those supported by the host.  The list&#10; of supported types will be provided as options for the &lt;code&gt;sendType&lt;/code&gt;&#10; parameter. For the Ptolemy II host, these include at least&#10; 'string', 'number', 'image', and a variety of numeric types.&lt;/p&gt;&#10;&lt;p&gt; Note that UDP, unlike TCP, has the notion of a &amp;quot;message&amp;quot; (a&#10; datagram). A message can contain more than one byte.  The&#10; &lt;code&gt;receiveType&lt;/code&gt; determines the type of the elements sent&#10; by this accessor&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Hokeun Kim and Edward A. Lee, Contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="sendType (parameter)" class="ptolemy.kernel.util.StringAttribute" value="See above.">
            </property>
            <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" value="The message to send.">
            </property>
            <property name="destinationAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The host name or IP address to send to.&#10;  This defaults to &quot;localhost&quot;.">
            </property>
            <property name="destinationPort (port)" class="ptolemy.kernel.util.StringAttribute" value="The port to send to.&#10;  This defaults to 8084.">
            </property>
        </property>
        <property name="destinationPort" class="ptolemy.actor.parameters.PortParameter" value="port">
        </property>
        <port name="destinationAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="destinationPort" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="TestSpontaneousOnce" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
            </property>
            <property name="interval (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The interval before the output in milliseconds.">
            </property>
            <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
            </property>
            <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 260.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="[&quot;{\&quot;watchID\&quot;:\&quot;9096\&quot;,\&quot;x\&quot;:11.722488038277511,\&quot;y\&quot;:0.11961722488038277,\&quot;z\&quot;:-0.23923444976076555}&quot;]">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[530.0, 380.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScriptDeleteTimestamps" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Delete timestamps from JSON input.&#10;&#10;exports.setup = function() {&#10;    this.output('output', {'type': 'JSON'});&#10;    this.input('input', {'type': 'JSON'});&#10;};&#10;&#10;exports.deleteTimestamp = function() {&#10;	var json = this.get('input');&#10;	delete json.timestamp&#10;	this.send('output', json);&#10;}&#10;&#10;var handle = null;&#10;&#10;exports.initialize = function() {&#10;	handle = this.addInputHandler('input', this.exports.deleteTimestamp.bind(this));&#10;};&#10;&#10;exports.wrapup = function() {&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;};">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[330.0, 380.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="general">
            </property>
        </port>
    </entity>
    <entity name="Moto360SensorListener" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/**&#10; * Read sensor data from a Moto 360 watch that is broadcasting the data via&#10; * UDP on the local network.&#10; *&#10; * FIXME: Give the app that needs to be running on the watch.&#10; *&#10; * Each sensor has its own output port.  The outputs will be objects with&#10; * fields 'watchID', a four-character string, and 'timestamp' representing&#10; * FIXME: what information is this?&#10; *&#10; * See https://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&#10; * for details on the software that runs on the watch.&#10; *&#10; * @accessor devices/Moto360SensorListener&#10; *&#10; * @output message The received message as a raw byte array.&#10; * @output {boolean} listening True to indicate that listening has begun, false to&#10; *   indicate that it has stopped.&#10; * @output accelerometer The accelerometer data from the watch. This is an object&#10; *   with fields x, y, z representing measured acceleration (or the earth's gravitational&#10; *   field, which is indistinguishable from acceleration). These will be in SI units&#10; *   of meters per second squared. The 'z' field points into&#10; *   the watch face, so it will be roughly +9.8 (one g) when the watch is facing up.&#10; *   The 'x' field is transverse to the watch, where +9.8 occurs roughly when 9 o'clock&#10; *   is pointing straight down. The 'y' axis is along band axis, where +9.8 will occur&#10; *   roughly when the 12 o'clock is pointing straight up.&#10; * @output gyro The gyroscope data from the watch. This is an object&#10; *   with fields x, y, z representing measured angular rotation (in radians per second).&#10; *   The 'z' field represents rotation around an axis pointing into the watch face.&#10; *   The 'x' field axis transverse to the watch, and the 'y' axis is along band axis.&#10; *   These are the same axes as for the accelerometer.&#10; *&#10; * @input {string} listeningAddress The interface to listen on for incoming messages.&#10; *   This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.&#10; * @input {int} listeningPort The port to listen on for incoming messages.&#10; *   This defaults to 4567.&#10; *&#10; * @parameter accelerometerSensitivity If this is set to something other than zero,&#10; *   then this accessor will output accelerometer data only when the accelerometer&#10; *   reading differs in some axis by more than the specified sensitivity.&#10; *   A small number means high sensitivity (lots of outputs) and a larger number&#10; *   means low sensitivity (fewer outputs).&#10; * @parameter gyroSensitivity If this is set to something other than zero,&#10; *   then this gyroscope will output data only when the gyro&#10; *   reading differs in some axis by more than the specified sensitivity.&#10; *   A small number means high sensitivity (lots of outputs) and a larger number&#10; *   means low sensitivity (fewer outputs).&#10; *&#10; * @author Christopher Brooks and Edward A. Lee&#10; * @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true, bitwise: false, -W016*/&#10;/*jslint bitwise: false*/&#10;&quot;use strict&quot;;&#10;&#10;// This accessor requires the optional 'udpSocket' module, which may or may&#10;// not be provided by an accessor host. Most hosts will provide this module.&#10;var UDPSocket = require('@accessors-modules/udp-socket');&#10;&#10;// FIXME: Use built in debug capability.&#10;var debug = false;&#10;&#10;// Initialize these to large numbers so that the first output always appears.&#10;// Accelerometer values.&#10;var previousX = -100.0;&#10;var previousY = -100.0;&#10;var previousZ = -100.0;&#10;// Gyro values.&#10;var previousGX = -100.0;&#10;var previousGY = -100.0;&#10;var previousGZ = -100.0;&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/UDPSocketListener');&#10;&#10;    // Override the value of listeningPort in the parent.&#10;    this.input('listeningPort', {&#10;        'value': 4568, // 4568 is the value found in&#10;        // https://github.com/terraswarm/WatchSoftware/blob/master/WatchSensorsUDP/app/src/main/java/org/terraswarm/accessor/wear/watchsensorsudp/MessageSender.java&#10;        'type': 'int'&#10;    });&#10;&#10;    // Accelerometer output port.&#10;    this.output('accelerometer');&#10;    this.parameter('accelerometerSensitivity', {&#10;        type: 'number',&#10;        value: 0.0&#10;    });&#10;&#10;    // Gyro output port.&#10;    this.output('gyro');&#10;    this.parameter('gyroSensitivity', {&#10;        type: 'number',&#10;        value: 0.0&#10;    });&#10;&#10;    this.parameter('receiveType', {&#10;        type: 'string',&#10;        value: 'unsignedbyte',&#10;        visibility: 'expert'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    // FIXME: Is this needed?&#10;    exports.ssuper.initialize.call(this);&#10;};&#10;&#10;// Convert the 2 bytes data to a integer.&#10;// The first argument is the higher-order byte, and the second is the lower-order byte.&#10;// These are assumed to be non-negative numbers between 0 and 255.&#10;// If the result is greater than or equal to 2^15 = 32768, then the two bytes are&#10;// interpreted as a two's complement negative number and a negative integer is returned.&#10;// The returned result always lies between -32768 and 32767, inclusive.&#10;function bytesToInt(a, b) {&#10;    if (debug) {&#10;        console.log('******** translating: ' + a + ', ' + b);&#10;    }&#10;    var c = a * Math.pow(2, 8);&#10;    c = c + b;&#10;    if (c &gt;= Math.pow(2, 15)) {&#10;        c = (Math.pow(2, 16) - c) * -1;&#10;    }&#10;    return c;&#10;}&#10;&#10;// Convert a timestamp to time string.&#10;function timestamp2string(time_stamp) {&#10;    try {&#10;        // Python time is in seconds.  JavaScript milliseconds.&#10;        //d = datetime.fromtimestamp(time_stamp / 1000.0);&#10;        time_stamp = Math.round(time_stamp * 1000);&#10;        var d = new Date(time_stamp),&#10;            str1 = d.toISOString();&#10;        //console.log(&quot;timestamp2string(&quot; + time_stamp + &quot;)&quot; + d + &quot; &quot; + Date.now());&#10;&#10;        // Python: 2015-08-28 16:43:37.283000&#10;        // JavaScript: 2016-10-05T03:21:09.617Z&#10;        return str1;&#10;    } catch (e) {&#10;        console.log(e);&#10;        return '';&#10;    }&#10;}&#10;&#10;// Convert the 8 bytes timestamp to float.&#10;function bytes2float(byte_array) {&#10;    var value = (byte_array[0] &amp; 0xff) | ((byte_array[1] &lt;&lt; 8) &amp; 0xff00) | ((byte_array[2] &lt;&lt; 16) &amp; 0xff0000) | ((byte_array[3] &lt;&lt; 24) &amp; 0xff000000);&#10;    value += ((((byte_array[4]) &amp; 0xff) | ((byte_array[5] &lt;&lt; 8) &amp; 0xff00)) / 1000);&#10;    return value;&#10;}&#10;&#10;// Override the base class to attach a message listening function.&#10;exports.closeAndOpen = function () {&#10;&#10;    exports.ssuper.closeAndOpen.call(this);&#10;    var self = this;&#10;&#10;    exports.ssuper.socket.on('message', function (message) {&#10;        if (exports.ssuper.running) {&#10;            // Send out the raw message.&#10;            self.send('message', message);&#10;&#10;            var watchID = String.fromCharCode(message[0]) + String.fromCharCode(message[1]) +&#10;                String.fromCharCode(message[2]) + String.fromCharCode(message[3]);&#10;            // Get the timestamp.&#10;            var timestamp = timestamp2string(bytes2float(message.slice(11, 17)));&#10;&#10;            if (debug) {&#10;                console.log(&quot;Message received: &quot; + message);&#10;                console.log('Watch ID: ' + watchID);&#10;                console.log('Message type: ' + String.fromCharCode(message[4]));&#10;            }&#10;            var json, x, y, z, sensitivity;&#10;            // Check for accelerometer data.&#10;            if (message[4] == &quot;A&quot;.charCodeAt(0)) {&#10;                // Received accelerometer data.&#10;                // To get SI units of m/s^2, the scaling factor needs to match&#10;                // what is used in the watch application's SCALE_ACCELEROMETER&#10;                // variable.&#10;                var SCALE_ACCELEROMETER = 836;&#10;                x = bytesToInt(message[6], message[5]) / SCALE_ACCELEROMETER;&#10;                y = bytesToInt(message[8], message[7]) / SCALE_ACCELEROMETER;&#10;                z = bytesToInt(message[10], message[9]) / SCALE_ACCELEROMETER;&#10;&#10;                // Compare current data against previous data.&#10;                sensitivity = self.getParameter('accelerometerSensitivity');&#10;                if (sensitivity === 0.0 ||&#10;                    Math.abs(x - previousX) &gt; sensitivity ||&#10;                    Math.abs(y - previousY) &gt; sensitivity ||&#10;                    Math.abs(z - previousZ) &gt; sensitivity) {&#10;&#10;                    // Output is to be produced.&#10;                    previousX = x;&#10;                    previousY = y;&#10;                    previousZ = z;&#10;&#10;                    json = {&#10;                        watchID: watchID,&#10;                        'x': x,&#10;                        'y': y,&#10;                        'z': z,&#10;                        'timestamp': timestamp&#10;                    };&#10;                    if (debug) {&#10;                        console.log(&quot;Accelerometer output: &quot; + JSON.stringify(json));&#10;                    }&#10;                    self.send(&quot;accelerometer&quot;, json);&#10;                }&#10;            } else if (message[4] == &quot;G&quot;.charCodeAt(0)) {&#10;                // Received gyro data.&#10;                // To get units of radians per second, the scaling factor needs to match&#10;                // what is used in the watch application's SCALE_GYRO&#10;                // variable.&#10;                var SCALE_GYRO = 5208;&#10;                x = bytesToInt(message[6], message[5]) / SCALE_GYRO;&#10;                y = bytesToInt(message[8], message[7]) / SCALE_GYRO;&#10;                z = bytesToInt(message[10], message[9]) / SCALE_GYRO;&#10;&#10;                // Compare current data against previous data.&#10;                sensitivity = self.getParameter('gyroSensitivity');&#10;                if (sensitivity === 0.0 ||&#10;                    Math.abs(x - previousGX) &gt; sensitivity ||&#10;                    Math.abs(y - previousGY) &gt; sensitivity ||&#10;                    Math.abs(z - previousGZ) &gt; sensitivity) {&#10;&#10;                    // Output is to be produced.&#10;                    previousGX = x;&#10;                    previousGY = y;&#10;                    previousGZ = z;&#10;&#10;                    json = {&#10;                        watchID: watchID,&#10;                        'x': x,&#10;                        'y': y,&#10;                        'z': z,&#10;                        'timestamp': timestamp&#10;                    };&#10;                    if (debug) {&#10;                        console.log(&quot;Gyro output: &quot; + JSON.stringify(json));&#10;                    }&#10;                    self.send(&quot;gyro&quot;, json);&#10;                }&#10;            }&#10;            if (debug) {&#10;                console.log(&quot;---------&quot;);&#10;            }&#10;        }&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/devices/Moto360SensorListener.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Read sensor data from a Moto 360 watch that is broadcasting the data via&#10;UDP on the local network.&lt;/p&gt;&#10;&lt;p&gt;FIXME: Give the app that needs to be running on the watch.&lt;/p&gt;&#10;&lt;p&gt;Each sensor has its own output port.  The outputs will be objects with&#10;fields 'watchID', a four-character string, and 'timestamp' representing&#10;FIXME: what information is this?&lt;/p&gt;&#10;&lt;p&gt;See https://&lt;a href=&quot;http://www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&quot;&gt;www.terraswarm.org/urbanheartbeat/wiki/Main/WatchSoftware&lt;/a&gt;&#10;for details on the software that runs on the watch.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="listeningAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The interface to listen on for incoming messages.&#10;  This defaults to &quot;0.0.0.0&quot;, which means to listen on all network interfaces.">
            </property>
            <property name="listeningPort (port)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen on for incoming messages.&#10;  This defaults to 4567.">
            </property>
            <property name="message (port)" class="ptolemy.kernel.util.StringAttribute" value="The received message as a raw byte array.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="True to indicate that listening has begun, false to&#10;  indicate that it has stopped.">
            </property>
            <property name="accelerometer (port)" class="ptolemy.kernel.util.StringAttribute" value="The accelerometer data from the watch. This is an object&#10;  with fields x, y, z representing measured acceleration (or the earth's gravitational&#10;  field, which is indistinguishable from acceleration). These will be in SI units&#10;  of meters per second squared. The 'z' field points into&#10;  the watch face, so it will be roughly +9.8 (one g) when the watch is facing up.&#10;  The 'x' field is transverse to the watch, where +9.8 occurs roughly when 9 o'clock&#10;  is pointing straight down. The 'y' axis is along band axis, where +9.8 will occur&#10;  roughly when the 12 o'clock is pointing straight up.">
            </property>
            <property name="gyro (port)" class="ptolemy.kernel.util.StringAttribute" value="The gyroscope data from the watch. This is an object&#10;  with fields x, y, z representing measured angular rotation (in radians per second).&#10;  The 'z' field represents rotation around an axis pointing into the watch face.&#10;  The 'x' field axis transverse to the watch, and the 'y' axis is along band axis.&#10;  These are the same axes as for the accelerometer.">
            </property>
            <property name="accelerometerSensitivity (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If this is set to something other than zero,&#10;  then this accessor will output accelerometer data only when the accelerometer&#10;  reading differs in some axis by more than the specified sensitivity.&#10;  A small number means high sensitivity (lots of outputs) and a larger number&#10;  means low sensitivity (fewer outputs).">
            </property>
            <property name="gyroSensitivity (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If this is set to something other than zero,&#10;  then this gyroscope will output data only when the gyro&#10;  reading differs in some axis by more than the specified sensitivity.&#10;  A small number means high sensitivity (lots of outputs) and a larger number&#10;  means low sensitivity (fewer outputs).">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="listeningAddress" class="ptolemy.actor.parameters.PortParameter" value="0.0.0.0">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="unsignedbyte">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[160.0, 370.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="listeningPort" class="ptolemy.actor.parameters.PortParameter" value="port">
        </property>
        <port name="listeningAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="listeningPort" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="message" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="accelerometer" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="gyro" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Stop" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that stops execution of the enclosing swarmlet.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor that stops execution of the enclosing swarmlet when it&#10; *  receives an input with value true. It does this by identifying&#10; *  the top-level enclosing composite accessor and invoking wrapup&#10; *  on it.&#10; *&#10; *  @accessor utilities/Stop&#10; *  @input {boolean} stop A signal with value true to stop the swarmlet.&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global  exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('stop', {&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    this.addInputHandler('stop', function () {&#10;        var stop = this.get('stop');&#10;        if (stop) {&#10;            this.stop();&#10;        }&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Stop.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that stops execution of the enclosing swarmlet when it&#10; receives an input with value true. It does this by identifying&#10; the top-level enclosing composite accessor and invoking wrapup&#10; on it.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="stop (port)" class="ptolemy.kernel.util.StringAttribute" value="A signal with value true to stop the swarmlet.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[655.0, 380.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="stop" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;JavaScriptWatchEmulator.trigger&quot;,x=250.0,y=260.0}, tail={id=&quot;TestSpontaneousOnce.output&quot;,x=60.0,y=260.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;JavaScriptWatchEmulator.output&quot;,x=250.0,y=260.0}, tail={id=&quot;UDPSocketSender.toSend&quot;,x=505.0,y=250.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="JavaScriptWatchEmulator.output" relation="relation2"/>
    <link port="JavaScriptWatchEmulator.trigger" relation="relation5"/>
    <link port="UDPSocketSender.toSend" relation="relation2"/>
    <link port="TestSpontaneousOnce.output" relation="relation5"/>
    <link port="TrainableTest2.input" relation="relation"/>
    <link port="TrainableTest2.output" relation="relation4"/>
    <link port="JavaScriptDeleteTimestamps.output" relation="relation"/>
    <link port="JavaScriptDeleteTimestamps.input" relation="relation3"/>
    <link port="Moto360SensorListener.accelerometer" relation="relation3"/>
    <link port="Stop.stop" relation="relation4"/>
</entity>
