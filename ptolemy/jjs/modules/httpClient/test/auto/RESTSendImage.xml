<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="RESTSendImage" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="150">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{68.0, 32.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 23, 1424, 873}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1190, 763]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0073604916400807">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{600.689040712151, 377.93066406250017}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Test POSTing images.  GIF, JPG, and PNG.&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{150.0, 20.0}">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="true">
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The JavaScriptBarrier has a timeout &#10;that is set to the same time as&#10;the stopTime of the DE Director.">
        </property>
        <property name="_location" class="ptolemy.vergil.basic.RelativeLocation" value="[-175.0, -110.0]">
            <property name="relativeTo" class="ptolemy.kernel.util.StringAttribute" value="JavaScriptBarrier">
            </property>
            <property name="relativeToElementName" class="ptolemy.kernel.util.StringAttribute" value="entity">
            </property>
        </property>
    </property>
    <entity name="Request" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('trigger');&#10;	this.output('headers', {'type' : 'string'});&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('trigger', function() {&#10;		&#10;		var headers = '{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;image/gif\&quot;}, ' + &#10;					   '\&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;http://localhost:8002\&quot;}';&#10;		self.send('headers', headers);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{408.0, 115.0}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Format" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Strip any /r since these do not occur on all operating systems.&#10;&#10;exports.setup = function() {&#10;	this.input('input');&#10;	this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('input', function() {&#10;		var text = self.get('input');&#10;		text.replace(/\r/g, '');&#10;		self.send('output', text);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{745.0, 125.0}">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80.&#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; *&#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('@accessors-modules/http-client');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {&#10;            'type': 'JSON',        // Note that string literals are valid JSON.&#10;        'value': ''&#10;    });&#10;    this.input('command', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('arguments', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {&#10;        'type': 'string'&#10;    });&#10;    this.output('headers');&#10;    this.parameter('timeout', {&#10;        'value': 5000,&#10;        'type': 'int'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'value': true,&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function () {&#10;    // Remove any leading slash that might be present.&#10;    var re = new RegExp('^\/');&#10;    var command = this.get('command').replace(re, '');&#10;&#10;    // Encode any characters that are not allowed in a URL.&#10;    &#10;    // The test for this is:&#10;    // $PTII/bin/ptinvoke ptolemy.moml.MoMLSimpleApplication $PTII/ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPostDataTypes.xml &#10;    var encodedArgs;&#10;    var argumentsValue = this.get('arguments');&#10;    &#10;    // If the arguments are undefined or empty, then we are done.&#10;    if (typeof argumentsValue === 'undefined' || argumentsValue === '') {&#10;        return command;&#10;    } else {&#10;        encodedArgs = querystring.stringify(argumentsValue);&#10;        return command + '?' + encodedArgs;&#10;    }&#10;&#10;}; &#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function (response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function (callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else {&#10;        // Don't use command = options, because otherwise if we invoke&#10;        // this accessor multiple times, then options.url will be&#10;        // appended to each time.  Instead, do a deep clone.&#10;        command = JSON.parse(JSON.stringify(options));&#10;        if (typeof options.url === 'string') {&#10;            command.url = options.url + '/' + encodedPath;&#10;        } else {&#10;            command.url.path = '/' + encodedPath;&#10;        }&#10;    }&#10;    // NOTE: This will only be used as a connect timeout.&#10;    // Implement the request timeout locally using setTimeout().&#10;    // command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;&#10;    if (typeof body !== 'undefined') {&#10;        command.body = body;&#10;    }&#10;&#10;    // console.log(&quot;REST.js issueCommand(): request to: &quot; + JSON.stringify(command));&#10;    // var util = require('util'); &#10;    // console.log(util.inspect(command));&#10;    &#10;    request = httpClient.request(command, callback);&#10;    request.on('error', function (message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    var timeout = this.getParameter('timeout');&#10;    setTimeout(function() {&#10;        if (request) {&#10;            // No response has occurred.&#10;            error('The timeout period of ' + timeout&#10;                    + 'ms has been exceeded.');&#10;        }&#10;        request = null;&#10;    }, timeout);&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function (message) {&#10;    if (request === null) {&#10;        // The request has already timed out. Ignore.&#10;        return;&#10;    }&#10;    request = null;&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        // Handle redirects by creating a new command and making a new&#10;        // request.  This is similar to issueCommand().&#10;        // The encodedPath is already in the URL, so we dont need to append it here.&#10;        if (message.statusCode &amp;&amp; message.statusCode &gt;= 300 &amp;&amp; message.statusCode &lt;= 308 &amp;&amp; message.statusCode != 306) {&#10;            var body = this.get('body');&#10;            var options = this.get('options');&#10;            var command = options;&#10;&#10;            if (typeof options === 'string') {&#10;                // In order to be able to include the outputCompleteResponseOnly&#10;                // option, we have to switch styles here.&#10;                command = {};&#10;                command.url = message.headers.location;&#10;            } else {&#10;                // Don't use command = options, because otherwise if we invoke&#10;                // this accessor multiple times, then options.url will be&#10;                // appended to each time.  Instead, do a deep clone.&#10;                command = JSON.parse(JSON.stringify(options));&#10;                command.url = message.headers.location;&#10;            }&#10;            command.timeout = this.getParameter('timeout');&#10;&#10;            if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;                command.outputCompleteResponseOnly = false;&#10;            }&#10;&#10;            if (typeof body !== 'undefined') {&#10;                command.body = body;&#10;            }&#10;&#10;            // Make another request.&#10;            request = httpClient.request(&#10;                command,&#10;                this.exports.handleResponse.bind(this));&#10;            &#10;            var timeout = this.getParameter('timeout');&#10;            setTimeout(function() {&#10;                if (request) {&#10;                    // No response has occurred.&#10;                    error('The timeout period of ' + timeout&#10;                            + 'ms has been exceeded.');&#10;                }&#10;                request = null;&#10;            }, timeout);&#10;            &#10;            request.end();&#10;&#10;        } else {&#10;            if (message.body) {&#10;                this.send('response', this.exports.filterResponse.call(this, message.body));&#10;            } else {&#10;                this.send('response', this.exports.filterResponse.call(this, message));&#10;            }&#10;&#10;            if (message.statusCode) {&#10;                this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;            }&#10;            if (message.headers) {&#10;                this.send('headers', message.headers);&#10;            }&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;    this.addInputHandler('trigger',&#10;                         this.exports.issueCommand.bind(this),&#10;                         this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/REST.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80.&#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://&lt;a href=&quot;http://www.w3schools.com/tags/ref_urlencode.asp&quot;&gt;www.w3schools.com/tags/ref_urlencode.asp&lt;/a&gt; .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
            </property>
            <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
            </property>
            <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
            </property>
            <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
            </property>
            <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
            </property>
            <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
            </property>
            <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{573.0, 135.0}">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter" value="5000">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageReader" class="ptolemy.actor.lib.image.ImageReader">
        <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/doc/img/PtolemyIISmall.gif">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{303.0, 195.0}">
        </property>
    </entity>
    <entity name="WebServer" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor starts a server that listens for HTTP requests&#10; *  on the specified hostInterface and port and issues responses.&#10; *  The hostInterface specifies what network interface (e.g. Ethernet,&#10; *  WiFi, or localhost) to use. The default is 'localhost', which (usually)&#10; *  means that the server listens only for requests coming from the local machine.&#10; *  This is useful for testing. To listen for requests on all IPv4 addresses on&#10; *  the local machine, specify '0.0.0.0'. This will make the server accessible&#10; *  to any machine that has access to an IP address for the local machine.&#10; *&#10; *  When this server receives an http requests from the network (or from&#10; *  the local machine), it produces a JavaScript object on the output that&#10; *  includes at least the following properties:&#10; *  &#10; *  * body: The body of the request, or null if there is no body.&#10; *  * method: A string that describes the HTTP method of the request, which&#10; *    may be &quot;GET&quot;, &quot;PUT&quot;, etc.&#10; *  * path: The path in the URL of the request, such as &quot;/&quot; when there is no&#10; *    path.&#10; *  * requestID: An identifier for the request.&#10; *  &#10; *&#10; *  To produce a response, this accessor waits for an input on its *response*&#10; *  port that is a JavaScript object containing the following properties:&#10; *  &#10; *  * requestID: An identifier matching a request for which a response has not&#10; *    already been issued.&#10; *  * response: The body of the response, such as HTML to display to the&#10; *    requester or a JavaScript object with a JSON representation (the JSON&#10; *    representation will be sent back as the response). If this property is&#10; *    not included in the input, then the input will be stringified as a JSON&#10; *    object and sent. This will include the requestID property.&#10; *  &#10; *&#10; *  If there is no pending request with a matching ID, then an error will be&#10; *  issued.&#10; *  &#10; *  A simple use case is to connect the *request* output to some other actor&#10; *  that generates a response, and then to feed that response back to the&#10; *  *response* input. Be sure to include the requestID property in the response.&#10; *&#10; *  When `wrapup()` is invoked, this accessor closes the  server.&#10; *&#10; *  This accessor requires the module httpServer.&#10; *&#10; *  @accessor net/WebServer&#10; *  @parameter {string} hostInterface The IP address or domain name of the&#10; *    network interface to listen to.&#10; *  @parameter {int} port The port to listen on.&#10; *&#10; *  @input response The response to issue to a request. &#10; *  @input shutdown Shutdown the web server.&#10; *  @output {int} listening When the server is listening for connections, this output&#10; *    will produce the port number that the server is listening on&#10; *  @output request The request that came into the server.&#10; *  &#10; *  @author Edward A. Lee amd Elizabeth Osyk&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpServer = require('@accessors-modules/http-server');&#10;var util = require('util');&#10;&#10;/** Sets up the accessor by defining inputs and outputs. */&#10;exports.setup = function() {&#10;    this.parameter('hostInterface', {&#10;        value: &quot;localhost&quot;,&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('port', {&#10;        value: 80,&#10;        type: &quot;int&quot;&#10;    });&#10;    this.input('response');&#10;    this.output('listening', {'type':'int'});&#10;    this.output('request', {'spontaneous': true});&#10;};&#10;&#10;/** Starts the server.&#10; */&#10;exports.initialize = function() {&#10;    var self = this;&#10;    &#10;    if (!self.server) {&#10;        console.log('WebServer: Creating new server.');&#10;        self.server = new httpServer.HttpServer({&#10;                'port': self.getParameter('port'),&#10;                'hostInterface': self.getParameter('hostInterface')&#10;        });&#10;        // Using 'self.exports' rather than just 'exports' in the following allows&#10;        // these functions to be overridden in derived accessors.&#10;        self.server.on('listening', self.exports.onListening.bind(self));&#10;        self.server.on('request', self.exports.request.bind(self));&#10;        self.server.on('error', function (message) {&#10;            self.error(message);&#10;        });&#10;        self.server.start();&#10;    }&#10;&#10;    self.addInputHandler('response', function() {&#10;        var response = self.get('response');&#10;        if (!response.hasOwnProperty('requestID')) {&#10;            try {&#10;                response = JSON.parse(response);&#10;            } catch (err) {}&#10;            if (!response.hasOwnProperty('requestID')) {&#10;                error('Response has no requestID property: ' + util.inspect(response));&#10;                return;&#10;            }&#10;        }&#10;        var id = response.requestID;&#10;        if (!self.pendingRequests.hasOwnProperty(id)) {&#10;            error('No pending request with ID ' + id);&#10;            return;&#10;        }&#10;        delete self.pendingRequests[id];&#10;        // Default body of the response is the whole response object.&#10;        var body = response;&#10;        if (response.hasOwnProperty('response')) {&#10;            body = response.response;&#10;        }&#10;        if (typeof body !== 'string') {&#10;            body = JSON.stringify(body);&#10;        }&#10;        if (response.hasOwnProperty('responseCode')) {&#10;        	this.server.respond(response.requestID, body, response.responseCode);&#10;        } else {&#10;        	this.server.respond(response.requestID, body);&#10;        }&#10;    });&#10;    &#10;    // Initialize pendingRequests to an empty object.&#10;    self.pendingRequests = {};&#10;};&#10;&#10;exports.onListening = function() {&#10;    console.log('WebServer: Listening for requests.');&#10;    this.send('listening', this.getParameter('port'));&#10;};&#10;&#10;exports.request = function(request) {&#10;	console.log('Server received request.');&#10;    // console.log('Server received request: ' + util.inspect(request));&#10;    if (this.server) {&#10;        this.send('request', request);&#10;        this.pendingRequests[request.requestID] = request;&#10;    } else {&#10;        console.log('WARNING: server does not exist.');&#10;    }&#10;};&#10;&#10;/** Removes all inputHandlers from sockets.&lt;br&gt;&#10; * Unregisters event listeners from sockets.&lt;br&gt;&#10; * Closes server.&#10; */&#10;exports.wrapup = function(){&#10;    if (this.server !== null &amp;&amp; typeof this.server !== 'undefined') {&#10;        console.log('WebServer: Stopping the server.');&#10;        this.server.removeAllListeners();&#10;        this.server.stop();&#10;        this.server = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/WebServer.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor starts a server that listens for HTTP requests&#10; on the specified hostInterface and port and issues responses.&#10; The hostInterface specifies what network interface (e.g. Ethernet,&#10; WiFi, or localhost) to use. The default is 'localhost', which (usually)&#10; means that the server listens only for requests coming from the local machine.&#10; This is useful for testing. To listen for requests on all IPv4 addresses on&#10; the local machine, specify '0.0.0.0'. This will make the server accessible&#10; to any machine that has access to an IP address for the local machine.&lt;/p&gt;&#10;&lt;p&gt; When this server receives an http requests from the network (or from&#10; the local machine), it produces a JavaScript object on the output that&#10; includes at least the following properties:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;body: The body of the request, or null if there is no body.&lt;/li&gt;&#10;&lt;li&gt;method: A string that describes the HTTP method of the request, which&#10;may be &amp;quot;GET&amp;quot;, &amp;quot;PUT&amp;quot;, etc.&lt;/li&gt;&#10;&lt;li&gt;path: The path in the URL of the request, such as &amp;quot;/&amp;quot; when there is no&#10;path.&lt;/li&gt;&#10;&lt;li&gt;requestID: An identifier for the request.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; To produce a response, this accessor waits for an input on its &lt;em&gt;response&lt;/em&gt;&#10; port that is a JavaScript object containing the following properties:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;requestID: An identifier matching a request for which a response has not&#10;already been issued.&lt;/li&gt;&#10;&lt;li&gt;response: The body of the response, such as HTML to display to the&#10;requester or a JavaScript object with a JSON representation (the JSON&#10;representation will be sent back as the response). If this property is&#10;not included in the input, then the input will be stringified as a JSON&#10;object and sent. This will include the requestID property.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; If there is no pending request with a matching ID, then an error will be&#10; issued.&lt;/p&gt;&#10;&lt;p&gt; A simple use case is to connect the &lt;em&gt;request&lt;/em&gt; output to some other actor&#10; that generates a response, and then to feed that response back to the&#10; &lt;em&gt;response&lt;/em&gt; input. Be sure to include the requestID property in the response.&lt;/p&gt;&#10;&lt;p&gt; When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the  server.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires the module httpServer.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee amd Elizabeth Osyk">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The response to issue to a request.">
            </property>
            <property name="listening (port)" class="ptolemy.kernel.util.StringAttribute" value="When the server is listening for connections, this output&#10;   will produce the port number that the server is listening on">
            </property>
            <property name="request (port)" class="ptolemy.kernel.util.StringAttribute" value="The request that came into the server.">
            </property>
            <property name="hostInterface (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The IP address or domain name of the&#10;   network interface to listen to.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port to listen on.">
            </property>
            <property name="shutdown (port)" class="ptolemy.kernel.util.StringAttribute" value="Shutdown the web server.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="hostInterface" class="ptolemy.data.expr.Parameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{107.5, 587.5}">
        </property>
        <property name="port" class="ptolemy.data.expr.Parameter" value="8002">
        </property>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="listening" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="request" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="JavaScript2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('request');&#10;	this.output('response');&#10;}&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('request', function() {&#10;		var request = self.get('request');&#10;		var response = {&#10;			requestID: request.requestID,&#10;			response: &quot;OK&quot;&#10;		};&#10;		self.send('response', response);&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{337.5, 672.5}">
        </property>
        <port name="request" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScript" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('request');&#10;	this.output('body');&#10;}&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('request', function() {&#10;		var request = self.get('request');&#10;		self.send('body', request.body);&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{342.5, 597.5}">
        </property>
        <port name="request" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageToString" class="ptolemy.actor.lib.conversions.ImageToString">
        <property name="compression" class="ptolemy.data.expr.StringParameter" value="png">
            <property name="style" class="ptolemy.actor.gui.style.ChoiceStyle">
                <property name="gif" class="ptolemy.kernel.util.StringAttribute" value="gif">
                </property>
                <property name="png" class="ptolemy.kernel.util.StringAttribute" value="png">
                </property>
                <property name="jpg" class="ptolemy.kernel.util.StringAttribute" value="jpg">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{545.0, 715.0}">
        </property>
    </entity>
    <entity name="ImageDisplay" class="ptolemy.actor.lib.image.ImageDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={609, 384, 256, 300}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="_pictureSize" class="ptolemy.actor.gui.SizeAttribute" value="[256, 256]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{562.5, 597.5}">
        </property>
    </entity>
    <entity name="Request2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('trigger');&#10;	this.output('headers', {'type' : 'string'});&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('trigger', function() {&#10;		&#10;		var headers = '{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;image/gif\&quot;}, ' + &#10;					   '\&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;http://localhost:8002\&quot;}';&#10;		self.send('headers', headers);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{535.0, 250.0}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Format2" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Strip any /r since these do not occur on all operating systems.&#10;&#10;exports.setup = function() {&#10;	this.input('input');&#10;	this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('input', function() {&#10;		var text = self.get('input');&#10;		text.replace(/\r/g, '');&#10;		self.send('output', text);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{872.0, 260.0}">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="REST2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80.&#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; *&#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('@accessors-modules/http-client');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {&#10;            'type': 'JSON',        // Note that string literals are valid JSON.&#10;        'value': ''&#10;    });&#10;    this.input('command', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('arguments', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {&#10;        'type': 'string'&#10;    });&#10;    this.output('headers');&#10;    this.parameter('timeout', {&#10;        'value': 5000,&#10;        'type': 'int'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'value': true,&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function () {&#10;    // Remove any leading slash that might be present.&#10;    var re = new RegExp('^\/');&#10;    var command = this.get('command').replace(re, '');&#10;&#10;    // Encode any characters that are not allowed in a URL.&#10;    &#10;    // The test for this is:&#10;    // $PTII/bin/ptinvoke ptolemy.moml.MoMLSimpleApplication $PTII/ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPostDataTypes.xml &#10;    var encodedArgs;&#10;    var argumentsValue = this.get('arguments');&#10;    &#10;    // If the arguments are undefined or empty, then we are done.&#10;    if (typeof argumentsValue === 'undefined' || argumentsValue === '') {&#10;        return command;&#10;    } else {&#10;        encodedArgs = querystring.stringify(argumentsValue);&#10;        return command + '?' + encodedArgs;&#10;    }&#10;&#10;}; &#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function (response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function (callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else {&#10;        // Don't use command = options, because otherwise if we invoke&#10;        // this accessor multiple times, then options.url will be&#10;        // appended to each time.  Instead, do a deep clone.&#10;        command = JSON.parse(JSON.stringify(options));&#10;        if (typeof options.url === 'string') {&#10;            command.url = options.url + '/' + encodedPath;&#10;        } else {&#10;            command.url.path = '/' + encodedPath;&#10;        }&#10;    }&#10;    // NOTE: This will only be used as a connect timeout.&#10;    // Implement the request timeout locally using setTimeout().&#10;    // command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;&#10;    if (typeof body !== 'undefined') {&#10;        command.body = body;&#10;    }&#10;&#10;    // console.log(&quot;REST.js issueCommand(): request to: &quot; + JSON.stringify(command));&#10;    // var util = require('util'); &#10;    // console.log(util.inspect(command));&#10;    &#10;    request = httpClient.request(command, callback);&#10;    request.on('error', function (message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    var timeout = this.getParameter('timeout');&#10;    setTimeout(function() {&#10;        if (request) {&#10;            // No response has occurred.&#10;            error('The timeout period of ' + timeout&#10;                    + 'ms has been exceeded.');&#10;        }&#10;        request = null;&#10;    }, timeout);&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function (message) {&#10;    if (request === null) {&#10;        // The request has already timed out. Ignore.&#10;        return;&#10;    }&#10;    request = null;&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        // Handle redirects by creating a new command and making a new&#10;        // request.  This is similar to issueCommand().&#10;        // The encodedPath is already in the URL, so we dont need to append it here.&#10;        if (message.statusCode &amp;&amp; message.statusCode &gt;= 300 &amp;&amp; message.statusCode &lt;= 308 &amp;&amp; message.statusCode != 306) {&#10;            var body = this.get('body');&#10;            var options = this.get('options');&#10;            var command = options;&#10;&#10;            if (typeof options === 'string') {&#10;                // In order to be able to include the outputCompleteResponseOnly&#10;                // option, we have to switch styles here.&#10;                command = {};&#10;                command.url = message.headers.location;&#10;            } else {&#10;                // Don't use command = options, because otherwise if we invoke&#10;                // this accessor multiple times, then options.url will be&#10;                // appended to each time.  Instead, do a deep clone.&#10;                command = JSON.parse(JSON.stringify(options));&#10;                command.url = message.headers.location;&#10;            }&#10;            command.timeout = this.getParameter('timeout');&#10;&#10;            if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;                command.outputCompleteResponseOnly = false;&#10;            }&#10;&#10;            if (typeof body !== 'undefined') {&#10;                command.body = body;&#10;            }&#10;&#10;            // Make another request.&#10;            request = httpClient.request(&#10;                command,&#10;                this.exports.handleResponse.bind(this));&#10;            &#10;            var timeout = this.getParameter('timeout');&#10;            setTimeout(function() {&#10;                if (request) {&#10;                    // No response has occurred.&#10;                    error('The timeout period of ' + timeout&#10;                            + 'ms has been exceeded.');&#10;                }&#10;                request = null;&#10;            }, timeout);&#10;            &#10;            request.end();&#10;&#10;        } else {&#10;            if (message.body) {&#10;                this.send('response', this.exports.filterResponse.call(this, message.body));&#10;            } else {&#10;                this.send('response', this.exports.filterResponse.call(this, message));&#10;            }&#10;&#10;            if (message.statusCode) {&#10;                this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;            }&#10;            if (message.headers) {&#10;                this.send('headers', message.headers);&#10;            }&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;    this.addInputHandler('trigger',&#10;                         this.exports.issueCommand.bind(this),&#10;                         this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/REST.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80.&#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://&lt;a href=&quot;http://www.w3schools.com/tags/ref_urlencode.asp&quot;&gt;www.w3schools.com/tags/ref_urlencode.asp&lt;/a&gt; .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
            </property>
            <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
            </property>
            <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
            </property>
            <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
            </property>
            <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
            </property>
            <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
            </property>
            <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{700.0, 270.0}">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter" value="5000">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageReader2" class="ptolemy.actor.lib.image.ImageReader">
        <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/doc/img/PtolemyII.jpg">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{430.0, 330.0}">
        </property>
    </entity>
    <entity name="Request3" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('trigger');&#10;	this.output('headers', {'type' : 'string'});&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('trigger', function() {&#10;		&#10;		var headers = '{\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;image/gif\&quot;}, ' + &#10;					   '\&quot;method\&quot;:\&quot;POST\&quot;, \&quot;url\&quot;:\&quot;http://localhost:8002\&quot;}';&#10;		self.send('headers', headers);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{610.0, 410.0}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Format3" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Strip any /r since these do not occur on all operating systems.&#10;&#10;exports.setup = function() {&#10;	this.input('input');&#10;	this.output('output');&#10;};&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('input', function() {&#10;		var text = self.get('input');&#10;		text.replace(/\r/g, '');&#10;		self.send('output', text);&#10;	});&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{930.0, 420.0}">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="REST3" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80.&#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; *&#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('@accessors-modules/http-client');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {&#10;            'type': 'JSON',        // Note that string literals are valid JSON.&#10;        'value': ''&#10;    });&#10;    this.input('command', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('arguments', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {&#10;        'type': 'string'&#10;    });&#10;    this.output('headers');&#10;    this.parameter('timeout', {&#10;        'value': 5000,&#10;        'type': 'int'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'value': true,&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function () {&#10;    // Remove any leading slash that might be present.&#10;    var re = new RegExp('^\/');&#10;    var command = this.get('command').replace(re, '');&#10;&#10;    // Encode any characters that are not allowed in a URL.&#10;    &#10;    // The test for this is:&#10;    // $PTII/bin/ptinvoke ptolemy.moml.MoMLSimpleApplication $PTII/ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPostDataTypes.xml &#10;    var encodedArgs;&#10;    var argumentsValue = this.get('arguments');&#10;    &#10;    // If the arguments are undefined or empty, then we are done.&#10;    if (typeof argumentsValue === 'undefined' || argumentsValue === '') {&#10;        return command;&#10;    } else {&#10;        encodedArgs = querystring.stringify(argumentsValue);&#10;        return command + '?' + encodedArgs;&#10;    }&#10;&#10;}; &#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function (response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function (callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else {&#10;        // Don't use command = options, because otherwise if we invoke&#10;        // this accessor multiple times, then options.url will be&#10;        // appended to each time.  Instead, do a deep clone.&#10;        command = JSON.parse(JSON.stringify(options));&#10;        if (typeof options.url === 'string') {&#10;            command.url = options.url + '/' + encodedPath;&#10;        } else {&#10;            command.url.path = '/' + encodedPath;&#10;        }&#10;    }&#10;    // NOTE: This will only be used as a connect timeout.&#10;    // Implement the request timeout locally using setTimeout().&#10;    // command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;&#10;    if (typeof body !== 'undefined') {&#10;        command.body = body;&#10;    }&#10;&#10;    // console.log(&quot;REST.js issueCommand(): request to: &quot; + JSON.stringify(command));&#10;    // var util = require('util'); &#10;    // console.log(util.inspect(command));&#10;    &#10;    request = httpClient.request(command, callback);&#10;    request.on('error', function (message) {&#10;        if (!message) {&#10;            message = 'Request failed. No further information.';&#10;        }&#10;        error(message);&#10;    });&#10;    var timeout = this.getParameter('timeout');&#10;    setTimeout(function() {&#10;        if (request) {&#10;            // No response has occurred.&#10;            error('The timeout period of ' + timeout&#10;                    + 'ms has been exceeded.');&#10;        }&#10;        request = null;&#10;    }, timeout);&#10;    request.end();&#10;};&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function (message) {&#10;    if (request === null) {&#10;        // The request has already timed out. Ignore.&#10;        return;&#10;    }&#10;    request = null;&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        // Handle redirects by creating a new command and making a new&#10;        // request.  This is similar to issueCommand().&#10;        // The encodedPath is already in the URL, so we dont need to append it here.&#10;        if (message.statusCode &amp;&amp; message.statusCode &gt;= 300 &amp;&amp; message.statusCode &lt;= 308 &amp;&amp; message.statusCode != 306) {&#10;            var body = this.get('body');&#10;            var options = this.get('options');&#10;            var command = options;&#10;&#10;            if (typeof options === 'string') {&#10;                // In order to be able to include the outputCompleteResponseOnly&#10;                // option, we have to switch styles here.&#10;                command = {};&#10;                command.url = message.headers.location;&#10;            } else {&#10;                // Don't use command = options, because otherwise if we invoke&#10;                // this accessor multiple times, then options.url will be&#10;                // appended to each time.  Instead, do a deep clone.&#10;                command = JSON.parse(JSON.stringify(options));&#10;                command.url = message.headers.location;&#10;            }&#10;            command.timeout = this.getParameter('timeout');&#10;&#10;            if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;                command.outputCompleteResponseOnly = false;&#10;            }&#10;&#10;            if (typeof body !== 'undefined') {&#10;                command.body = body;&#10;            }&#10;&#10;            // Make another request.&#10;            request = httpClient.request(&#10;                command,&#10;                this.exports.handleResponse.bind(this));&#10;            &#10;            var timeout = this.getParameter('timeout');&#10;            setTimeout(function() {&#10;                if (request) {&#10;                    // No response has occurred.&#10;                    error('The timeout period of ' + timeout&#10;                            + 'ms has been exceeded.');&#10;                }&#10;                request = null;&#10;            }, timeout);&#10;            &#10;            request.end();&#10;&#10;        } else {&#10;            if (message.body) {&#10;                this.send('response', this.exports.filterResponse.call(this, message.body));&#10;            } else {&#10;                this.send('response', this.exports.filterResponse.call(this, message));&#10;            }&#10;&#10;            if (message.statusCode) {&#10;                this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;            }&#10;            if (message.headers) {&#10;                this.send('headers', message.headers);&#10;            }&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;    this.addInputHandler('trigger',&#10;                         this.exports.issueCommand.bind(this),&#10;                         this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/REST.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80.&#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://&lt;a href=&quot;http://www.w3schools.com/tags/ref_urlencode.asp&quot;&gt;www.w3schools.com/tags/ref_urlencode.asp&lt;/a&gt; .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
            </property>
            <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
            </property>
            <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
            </property>
            <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
            </property>
            <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
            </property>
            <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
            </property>
            <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{775.0, 430.0}">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter" value="15000">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ImageReader3" class="ptolemy.actor.lib.image.ImageReader">
        <property name="fileOrURL" class="ptolemy.data.expr.FileParameter" value="$CLASSPATH/doc/img/PtolemyII256x256.png">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{505.0, 490.0}">
        </property>
    </entity>
    <entity name="TrainableTest" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{910.0, 125.0}">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;OK&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{960.0, 290.0}">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;OK&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest3" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[960.0, 490.0]">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;OK&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest4" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[975.0, 715.0]">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;&quot;, &quot;&quot;, &quot;&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="JavaScriptBarrier" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// After inputs appear on both inputs, generate a true output.&#10;var sawInput1 = false;&#10;var sawInput2 = false;&#10;var sawInput3 = false;&#10;var sawInput4 = false;&#10;&#10;exports.setup = function() {&#10;    this.input('input1');   &#10;    this.input('input2');&#10;    this.input('input3'); &#10;    this.input('input4');  &#10;    this.output('output', {&#10;    	'type': 'boolean'&#10;    });&#10;    this.parameter('timeout');&#10;    &#10;    var self = this;&#10;    self.addInputHandler('input1', function() {&#10;    	self.sawInput1 = this.get('input1');&#10;    	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true &amp;&amp; self.sawInput3 === true &amp;&amp; self.sawInput4 === true) {&#10;    		self.send('output', true);&#10;    	}&#10;    });&#10;    self.addInputHandler('input2', function() {&#10;		self.sawInput2 = this.get('input2');&#10; 		if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true &amp;&amp; self.sawInput3 === true &amp;&amp; self.sawInput4 === true) {&#10;    		self.send('output', true);&#10;    	}&#10;    });&#10;    self.addInputHandler('input3', function() {&#10;    	self.sawInput3 = this.get('input3');&#10;    	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true &amp;&amp; self.sawInput3 === true &amp;&amp; self.sawInput4 === true) {&#10;    		self.send('output', true);&#10;    	}&#10;    });&#10;    self.addInputHandler('input4', function() {&#10;    	self.sawInput4 = this.get('input4');&#10;    	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true &amp;&amp; self.sawInput3 === true &amp;&amp; self.sawInput4 === true) {&#10;    		self.send('output', true);&#10;    	}&#10;    });&#10;}&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	setTimeout(function () {&#10;		console.log('JavaScriptBarrier: sending true after timeout.');&#10;		self.send('output', true);&#10;	}, this.getParameter('timeout'));&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{1105.0, 265.0}">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter" value="150000">
        </property>
        <port name="input1" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="input2" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="input3" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="input4" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Stop" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that stops execution of the enclosing swarmlet.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor that stops execution of the enclosing swarmlet when it&#10; *  receives an input with value true. It does this by identifying&#10; *  the top-level enclosing composite accessor and invoking wrapup&#10; *  on it.&#10; *&#10; *  @accessor utilities/Stop&#10; *  @input {boolean} stop A signal with value true to stop the swarmlet.&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global  exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('stop', {&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    this.addInputHandler('stop', function () {&#10;        var stop = this.get('stop');&#10;        if (stop) {&#10;            this.stop();&#10;        }&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Stop.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that stops execution of the enclosing swarmlet when it&#10; receives an input with value true. It does this by identifying&#10; the top-level enclosing composite accessor and invoking wrapup&#10; on it.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="stop (port)" class="ptolemy.kernel.util.StringAttribute" value="A signal with value true to stop the swarmlet.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[1140.0, 390.0]">
        </property>
        <port name="stop" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation25" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{378.0, 195.0}">
        </vertex>
    </relation>
    <relation name="relation28" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{468.0, 115.0}">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{63.0, 115.0}">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{217.5, 597.5}">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{372.5, 732.5}">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{457.5, 597.5}">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{650.0, 205.0}">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{505.0, 330.0}">
        </vertex>
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{595.0, 250.0}">
        </vertex>
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{775.0, 375.0}">
        </vertex>
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{580.0, 490.0}">
        </vertex>
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{670.0, 410.0}">
        </vertex>
    </relation>
    <relation name="relation13" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="{867.0, 420.0}">
        </vertex>
    </relation>
    <relation name="relation14" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation15" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation16" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation17" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation18" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation19" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation20" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Request.trigger" relation="relation3"/>
    <link port="Request.headers" relation="relation28"/>
    <link port="Format.input" relation="relation5"/>
    <link port="Format.output" relation="relation14"/>
    <link port="REST.options" relation="relation28"/>
    <link port="REST.trigger" relation="relation25"/>
    <link port="REST.body" relation="relation25"/>
    <link port="REST.response" relation="relation5"/>
    <link port="ImageReader.output" relation="relation25"/>
    <link port="ImageReader.trigger" relation="relation3"/>
    <link port="WebServer.response" relation="relation2"/>
    <link port="WebServer.listening" relation="relation3"/>
    <link port="WebServer.request" relation="relation"/>
    <link port="JavaScript2.request" relation="relation"/>
    <link port="JavaScript2.response" relation="relation2"/>
    <link port="JavaScript.request" relation="relation"/>
    <link port="JavaScript.body" relation="relation4"/>
    <link port="ImageToString.input" relation="relation4"/>
    <link port="ImageToString.output" relation="relation15"/>
    <link port="ImageDisplay.input" relation="relation4"/>
    <link port="Request2.trigger" relation="relation5"/>
    <link port="Request2.headers" relation="relation8"/>
    <link port="Format2.input" relation="relation9"/>
    <link port="Format2.output" relation="relation6"/>
    <link port="REST2.options" relation="relation8"/>
    <link port="REST2.trigger" relation="relation7"/>
    <link port="REST2.body" relation="relation7"/>
    <link port="REST2.response" relation="relation9"/>
    <link port="ImageReader2.output" relation="relation7"/>
    <link port="ImageReader2.trigger" relation="relation5"/>
    <link port="Request3.trigger" relation="relation9"/>
    <link port="Request3.headers" relation="relation12"/>
    <link port="Format3.input" relation="relation13"/>
    <link port="Format3.output" relation="relation10"/>
    <link port="REST3.options" relation="relation12"/>
    <link port="REST3.trigger" relation="relation11"/>
    <link port="REST3.body" relation="relation11"/>
    <link port="REST3.response" relation="relation13"/>
    <link port="ImageReader3.output" relation="relation11"/>
    <link port="ImageReader3.trigger" relation="relation9"/>
    <link port="TrainableTest.input" relation="relation14"/>
    <link port="TrainableTest.output" relation="relation19"/>
    <link port="TrainableTest2.input" relation="relation6"/>
    <link port="TrainableTest2.output" relation="relation18"/>
    <link port="TrainableTest3.input" relation="relation10"/>
    <link port="TrainableTest3.output" relation="relation17"/>
    <link port="TrainableTest4.input" relation="relation15"/>
    <link port="TrainableTest4.output" relation="relation16"/>
    <link port="JavaScriptBarrier.input1" relation="relation19"/>
    <link port="JavaScriptBarrier.input2" relation="relation18"/>
    <link port="JavaScriptBarrier.output" relation="relation20"/>
    <link port="JavaScriptBarrier.input3" relation="relation17"/>
    <link port="JavaScriptBarrier.input4" relation="relation16"/>
    <link port="Stop.stop" relation="relation20"/>
</entity>
