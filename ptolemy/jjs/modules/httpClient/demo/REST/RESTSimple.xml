<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="RESTSimple" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.beta">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={22, 23, 891, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[657, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{328.5, 262.0}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 40.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Access a normal web page, and upon receiving&#10;the response, stop execution of the model.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[140.0, 15.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Edward A. Lee">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 235.0]">
        </property>
    </property>
    <entity name="SingleEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[50.0, 160.0]">
        </property>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={386, 347, 872, 453}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[872, 409]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[315.0, 95.0]">
        </property>
    </entity>
    <entity name="Stop" class="ptolemy.actor.lib.Stop">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 140.0]">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[395.0, 140.0]">
        </property>
    </entity>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <doc>Create a constant sequence.</doc>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="60">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[335.0, 140.0]">
        </property>
    </entity>
    <entity name="REST" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor for  Representational State Transfer (RESTful) interfaces.&#10;&#10;// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor for RESTful interfaces.&#10; *  Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; *  specified by the inputs. Some time later, the accessor will receive a response&#10; *  from the server or a timeout. In the first case, the accessor will produce&#10; *  the response (body, status code, and headers) on output ports.&#10; *  In the second case, it will produce a nil output on the response port&#10; *  and an error.&#10; *&#10; *  The accessor does not block waiting for the response, but any additional&#10; *  triggered requests will be queued to be issued only after the pending request&#10; *  has received either a response or a timeout. This strategy ensures that outputs&#10; *  from this accessor are produced in the same order as the inputs that trigger the&#10; *  HTTP requests.&#10; *&#10; *  The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; *  or an object with the following fields:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt; headers: An object containing request headers. By default this&#10; *       is an empty object. Items may have a value that is an array of values,&#10; *       for headers with more than one value.&#10; *  &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10; *       in a pool to be used by other requests in the future. This defaults to false.&#10; *  &lt;li&gt; method: A string specifying the HTTP request method.&#10; *       This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; *  &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10; *       the following fields:&#10; *       &lt;ul&gt;&#10; *       &lt;li&gt; host: A string giving the domain name or IP address of&#10; *            the server to issue the request to. This defaults to 'localhost'.&#10; *       &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10; *       &lt;li&gt; port: Port of remote server. This defaults to 80.&#10; *       &lt;/ul&gt;&#10; *  &lt;/ul&gt;&#10; *&#10; *  For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; *  &lt;code&gt;&#10; *  {&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/x-www-form-urlencoded&quot;}, &quot;method&quot;:&quot;POST&quot;, &quot;url&quot;:&quot;...&quot;}&#10; *  &lt;/code&gt;&#10; *&#10; *  In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; *  as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; *  to the empty string.&#10; *&#10; *  The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; *  string to append to the url, for example '?arg=value'. If the value contains&#10; *  characters that are not allowed in a URL, such as spaces, they will encoded&#10; *  according to the ASCII standard, see http://www.w3schools.com/tags/ref_urlencode.asp .&#10; *&#10; *  A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; *  on the trigger input is ignored.&#10; *&#10; *  The output response will be a string if the MIME type of the accessed page&#10; *  begins with &quot;text&quot;. If the MIME type begins with anything else, then the&#10; *  binary data will be produced. It is up to the host implementation to ensure&#10; *  that the data is given in some form that is usable by downstream accessors&#10; *  or actors.&#10; *&#10; *  The parameter 'timeout' specifies how long this accessor will wait for response.&#10; *  If it does not receive the response by the specified time, then it will issue&#10; *  a null response output and an error event (calling the error() function of the host).&#10; *&#10; *  If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; *  accessor will produce a 'response' output only upon receiving a complete response.&#10; *  If it is false, then multiple outputs may result from a single input or trigger.&#10; *&#10; *  @accessor net/REST&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks&#10; *  @input {JSON} options The url for the command or an object specifying options.&#10; *  @input {string} command The command.&#10; *  @input {JSON} arguments Arguments to the command.&#10; *  @input body The request body, if any.  This supports at least strings and image data.&#10; *  @input trigger An input to trigger the command.&#10; *  @output {string} response The server's response.&#10; *  @output {string} status The status code and message of the response.&#10; *  @output headers The headers sent with the response.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 5000.&#10; *  @parameter {boolean} outputCompleteResponseOnly If true (the default), the produce a&#10; *   'response' output only upon receiving the entire response.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, get, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var httpClient = require('@accessors-modules/http-client');&#10;var querystring = require('querystring');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;    this.input('options', {&#10;            'type': 'JSON',        // Note that string literals are valid JSON.&#10;        'value': ''&#10;    });&#10;    this.input('command', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('arguments', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;    this.input('trigger');&#10;    this.input('body');&#10;    this.output('response');&#10;    this.output('status', {&#10;        'type': 'string'&#10;    });&#10;    this.output('headers');&#10;    this.parameter('timeout', {&#10;        'value': 5000,&#10;        'type': 'int'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'value': true,&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;/** Build the path from the command and arguments.&#10; *  This default implementation returns 'command?args', where&#10; *  args is an encoding of the arguments input for embedding in a URL.&#10; *  For example, if the arguments input is the object&#10; *     ```{ foo: 'bar', baz: ['qux', 'quux'], corge: '' }```&#10; *  then the returned string will be&#10; *     ```command?foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=```&#10; *  Derived accessors may override this function to customize&#10; *  the interaction. The returned string should not include a leading '/'.&#10; *  That will be added automatically.&#10; */&#10;exports.encodePath = function () {&#10;    // Remove any leading slash that might be present.&#10;    var re = new RegExp('^\/');&#10;    var command = this.get('command').replace(re, '');&#10;&#10;    // Encode any characters that are not allowed in a URL.&#10;    &#10;    // The test for this is:&#10;    // $PTII/bin/ptinvoke ptolemy.moml.MoMLSimpleApplication $PTII/ptolemy/actor/lib/jjs/modules/httpClient/test/auto/RESTPostDataTypes.xml &#10;    var encodedArgs;&#10;    var argumentsValue = this.get('arguments');&#10;    &#10;    // If the arguments are undefined or empty, then we are done.&#10;    if (typeof argumentsValue === 'undefined' || argumentsValue === '') {&#10;        return command;&#10;    } else {&#10;        encodedArgs = querystring.stringify(argumentsValue);&#10;        return command + '?' + encodedArgs;&#10;    }&#10;&#10;}; &#10;&#10;/** Filter the response. This base class just returns the argument&#10; *  unmodified, but derived classes can override this to extract&#10; *  a portion of the response, for example. Note that the response&#10; *  argument can be null, indicating that there was no response&#10; *  (e.g., a timeout or error occurred).&#10; *  @param response The response, or null if there is none.&#10; */&#10;exports.filterResponse = function (response) {&#10;    return response;&#10;};&#10;&#10;// Keep track of pending HTTP request so it can be stopped if the&#10;// model stops executing.&#10;var request;&#10;&#10;/** Issue the command based on the current value of the inputs.&#10; *  This constructs a path using encodePath and combines it with the&#10; *  url input to construct the full command.&#10; *  @param callback The callback function that will be called with the&#10; *   response as an argument (an instance of IncomingMessage, defined in&#10; *   the httpClient module).&#10; */&#10;exports.issueCommand = function (callback) {&#10;    var encodedPath = this.exports.encodePath.call(this);&#10;    var options = this.get('options');&#10;    var body = this.get('body');&#10;    var command = options;&#10;    if (typeof options === 'string') {&#10;        // In order to be able to include the outputCompleteResponseOnly&#10;        // option, we have to switch styles here.&#10;        command = {};&#10;        if (encodedPath) {&#10;            command.url = options + '/' + encodedPath;&#10;        } else {&#10;            command.url = options;&#10;        }&#10;    } else {&#10;        // Don't use command = options, because otherwise if we invoke&#10;        // this accessor multiple times, then options.url will be&#10;        // appended to each time.  Instead, do a deep clone.&#10;        command = JSON.parse(JSON.stringify(options));&#10;        if (typeof options.url === 'string') {&#10;            command.url = options.url + '/' + encodedPath;&#10;        } else {&#10;            command.url.path = '/' + encodedPath;&#10;        }&#10;    }&#10;    // NOTE: This will only be used as a connect timeout.&#10;    // Implement the request timeout locally using setTimeout().&#10;    // command.timeout = this.getParameter('timeout');&#10;&#10;    if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;        command.outputCompleteResponseOnly = false;&#10;    }&#10;&#10;    if (typeof body !== 'undefined') {&#10;        command.body = body;&#10;    }&#10;&#10;    // console.log(&quot;REST.js issueCommand(): request to: &quot; + JSON.stringify(command));&#10;    // var util = require('util'); &#10;    // console.log(util.inspect(command));&#10;    &#10;    request = httpClient.request(command, callback);&#10;    request.on('error', this.exports.handleError.bind(this));&#10;    &#10;    var timeout = this.getParameter('timeout');&#10;    setTimeout(function() {&#10;        if (request) {&#10;            // No response has occurred.&#10;            error('The timeout period of ' + timeout&#10;                    + 'ms has been exceeded.');&#10;        	request.stop();&#10;        	request = null;&#10;        }&#10;    }, timeout);&#10;    request.end();&#10;};&#10;&#10;/** Handle an error.&#10; *  @param message The error message.&#10; */&#10;exports.handleError = function(message) {&#10;     if (!message) {&#10;        message = 'Request failed. No further information.';&#10;    }&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;    error(message);&#10;}&#10;&#10;/** Handle the response from the RESTful service. The argument&#10; *  is expected to be be an instance of IncomingMessage, defined&#10; *  in the httpClient module. This base class extracts the body&#10; *  field of the message, if there is one, and produces that on&#10; *  the 'response' output, and otherwise just produces the message&#10; *  on the output. If the argument is null or undefined, then do&#10; *  nothing.&#10; *  @param message An incoming message.&#10; */&#10;exports.handleResponse = function (message) {&#10;    if (request === null) {&#10;        // The request has already timed out. Ignore.&#10;        return;&#10;    }&#10;    // request = null; // NO! Response may be part of a multi-body response.&#10;    // Assume that if the response is null, an error will be signaled.&#10;    if (message !== null &amp;&amp; typeof message !== 'undefined') {&#10;        // Handle redirects by creating a new command and making a new&#10;        // request.  This is similar to issueCommand().&#10;        // The encodedPath is already in the URL, so we dont need to append it here.&#10;        if (message.statusCode &amp;&amp; message.statusCode &gt;= 300 &amp;&amp; message.statusCode &lt;= 308 &amp;&amp; message.statusCode != 306) {&#10;            var body = this.get('body');&#10;            var options = this.get('options');&#10;            var command = options;&#10;&#10;            if (typeof options === 'string') {&#10;                // In order to be able to include the outputCompleteResponseOnly&#10;                // option, we have to switch styles here.&#10;                command = {};&#10;                command.url = message.headers.location;&#10;            } else {&#10;                // Don't use command = options, because otherwise if we invoke&#10;                // this accessor multiple times, then options.url will be&#10;                // appended to each time.  Instead, do a deep clone.&#10;                command = JSON.parse(JSON.stringify(options));&#10;                command.url = message.headers.location;&#10;            }&#10;            command.timeout = this.getParameter('timeout');&#10;&#10;            if (this.getParameter('outputCompleteResponseOnly') === false) {&#10;                command.outputCompleteResponseOnly = false;&#10;            }&#10;&#10;            if (typeof body !== 'undefined') {&#10;                command.body = body;&#10;            }&#10;&#10;            // Make another request.&#10;            request = httpClient.request(&#10;                command,&#10;                this.exports.handleResponse.bind(this));&#10;            request.on('error', this.exports.handleError.bind(this));&#10;            &#10;            var timeout = this.getParameter('timeout');&#10;            setTimeout(function() {&#10;                if (request) {&#10;                    // No response has occurred.&#10;                    error('The timeout period of ' + timeout&#10;                            + 'ms has been exceeded.');&#10;                }&#10;                request = null;&#10;            }, timeout);&#10;            &#10;            request.end();&#10;&#10;        } else {&#10;            if (message.body) {&#10;                this.send('response', this.exports.filterResponse.call(this, message.body));&#10;            } else {&#10;                this.send('response', this.exports.filterResponse.call(this, message));&#10;            }&#10;&#10;            if (message.statusCode) {&#10;                this.send('status', message.statusCode + ': ' + message.statusMessage);&#10;            }&#10;            if (message.headers) {&#10;                this.send('headers', message.headers);&#10;            }&#10;        }&#10;    }&#10;};&#10;&#10;/** Register the input handler.  */&#10;exports.initialize = function () {&#10;    // Upon receiving a trigger input, issue a command.&#10;    this.addInputHandler('trigger',&#10;                         this.exports.issueCommand.bind(this),&#10;                         this.exports.handleResponse.bind(this));&#10;};&#10;&#10;/** Upon wrapup, stop handling new inputs.  */&#10;exports.wrapup = function () {&#10;    // In case there is streaming data coming in, stop it.&#10;    if (request) {&#10;        request.stop();&#10;        request = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/REST.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="&quot;https://ptolemy.eecs.berkeley.edu&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="publications/">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[180.0, 150.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor for RESTful interfaces.&#10; Upon receipt of a trigger input, this accessor will issue an HTTP request&#10; specified by the inputs. Some time later, the accessor will receive a response&#10; from the server or a timeout. In the first case, the accessor will produce&#10; the response (body, status code, and headers) on output ports.&#10; In the second case, it will produce a nil output on the response port&#10; and an error.&lt;/p&gt;&#10;&lt;p&gt; The accessor does not block waiting for the response, but any additional&#10; triggered requests will be queued to be issued only after the pending request&#10; has received either a response or a timeout. This strategy ensures that outputs&#10; from this accessor are produced in the same order as the inputs that trigger the&#10; HTTP requests.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;options&lt;/i&gt; input can be a string URL (with surrounding quotation marks)&#10; or an object with the following fields:&#10; &lt;ul&gt;&#10; &lt;li&gt; headers: An object containing request headers. By default this&#10;      is an empty object. Items may have a value that is an array of values,&#10;      for headers with more than one value.&#10; &lt;li&gt; keepAlive: A boolean that specified whether to keep sockets around&#10;      in a pool to be used by other requests in the future. This defaults to false.&#10; &lt;li&gt; method: A string specifying the HTTP request method.&#10;      This defaults to 'GET', but can also be 'PUT', 'POST', 'DELETE', etc.&#10; &lt;li&gt; url: A string that can be parsed as a URL, or an object containing&#10;      the following fields:&#10;      &lt;ul&gt;&#10;      &lt;li&gt; host: A string giving the domain name or IP address of&#10;           the server to issue the request to. This defaults to 'localhost'.&#10;      &lt;li&gt; protocol: The protocol. This is a string that defaults to 'http'.&#10;      &lt;li&gt; port: Port of remote server. This defaults to 80.&#10;      &lt;/ul&gt;&#10; &lt;/ul&gt;&lt;/p&gt;&#10;&lt;p&gt; For example, the &lt;i&gt;options&lt;/i&gt; parameter could be set to&#10; &lt;code&gt;&#10; {&amp;quot;headers&amp;quot;:{&amp;quot;Content-Type&amp;quot;:&amp;quot;application/x-www-form-urlencoded&amp;quot;}, &amp;quot;method&amp;quot;:&amp;quot;POST&amp;quot;, &amp;quot;url&amp;quot;:&amp;quot;...&amp;quot;}&#10; &lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt; In addition, there is a &lt;i&gt;command&lt;/i&gt; input that is a string that is appended&#10; as a path to the URL constructed from the &lt;i&gt;options&lt;/i&gt; input. This defaults&#10; to the empty string.&lt;/p&gt;&#10;&lt;p&gt; The &lt;i&gt;arguments&lt;/i&gt; input an object with fields that are converted to a query&#10; string to append to the url, for example '?arg=value'. If the value contains&#10; characters that are not allowed in a URL, such as spaces, they will encoded&#10; according to the ASCII standard, see http://&lt;a href=&quot;http://www.w3schools.com/tags/ref_urlencode.asp&quot;&gt;www.w3schools.com/tags/ref_urlencode.asp&lt;/a&gt; .&lt;/p&gt;&#10;&lt;p&gt; A &lt;i&gt;trigger&lt;/i&gt; input triggers invocation of the current command. Any value provided&#10; on the trigger input is ignored.&lt;/p&gt;&#10;&lt;p&gt; The output response will be a string if the MIME type of the accessed page&#10; begins with &amp;quot;text&amp;quot;. If the MIME type begins with anything else, then the&#10; binary data will be produced. It is up to the host implementation to ensure&#10; that the data is given in some form that is usable by downstream accessors&#10; or actors.&lt;/p&gt;&#10;&lt;p&gt; The parameter 'timeout' specifies how long this accessor will wait for response.&#10; If it does not receive the response by the specified time, then it will issue&#10; a null response output and an error event (calling the error() function of the host).&lt;/p&gt;&#10;&lt;p&gt; If the parameter 'outputCompleteResponseOnly' is true (the default), then this&#10; accessor will produce a 'response' output only upon receiving a complete response.&#10; If it is false, then multiple outputs may result from a single input or trigger.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu), contributor: Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 5000.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true (the default), the produce a&#10;  'response' output only upon receiving the entire response.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="An input to trigger the command.">
            </property>
            <property name="body (port)" class="ptolemy.kernel.util.StringAttribute" value="The request body, if any.  This supports at least strings and image data.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The server's response.">
            </property>
            <property name="status (port)" class="ptolemy.kernel.util.StringAttribute" value="The status code and message of the response.">
            </property>
            <property name="headers (port)" class="ptolemy.kernel.util.StringAttribute" value="The headers sent with the response.">
            </property>
            <property name="options (port)" class="ptolemy.kernel.util.StringAttribute" value="The url for the command or an object specifying options.">
            </property>
            <property name="command (port)" class="ptolemy.kernel.util.StringAttribute" value="The command.">
            </property>
            <property name="arguments (port)" class="ptolemy.kernel.util.StringAttribute" value="Arguments to the command.">
            </property>
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const.output&quot;,x=295.0,y=130.0}, tail={id=&quot;MicrostepDelay.input&quot;,x=355.0,y=130.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[275.0, 140.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="SingleEvent.output" relation="relation4"/>
    <link port="Display.input" relation="relation5"/>
    <link port="Stop.input" relation="relation3"/>
    <link port="MicrostepDelay.input" relation="relation2"/>
    <link port="MicrostepDelay.output" relation="relation3"/>
    <link port="Const.output" relation="relation2"/>
    <link port="Const.trigger" relation="relation5"/>
    <link port="REST.trigger" relation="relation4"/>
    <link port="REST.response" relation="relation5"/>
</entity>
