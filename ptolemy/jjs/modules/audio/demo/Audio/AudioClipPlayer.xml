<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="AudioClipPlayer" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={149, 112, 987, 768}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[753, 658]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.2426858995066439">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{300.949235802457, 272.9072190906691}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Please turn your speakers on and run the model.&#10;You should hear jazz music from a .mp3 download&#10;from the Ptolemy website.  After 8 seconds, there&#10;is a 2 second silence, and then a guitar from a&#10;local .wav file is played.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[115.0, 15.0]">
        </property>
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 40.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="See also the AudioRecorder model.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[245.0, 370.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioRecorder.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII11.0/ptII/ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioRecorder/index.html">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_self">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{450, 180}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Edward A. Lee">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 370.0]">
        </property>
    </property>
    <entity name="Const" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[170.0, 205.0]">
        </property>
    </entity>
    <entity name="StartEvent" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 205.0]">
        </property>
    </entity>
    <entity name="FirstStop" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="8.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[185.0, 270.0]">
        </property>
    </entity>
    <entity name="ClipPlayer2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** An accessor for playing a sound clip from a URL or a resource on the&#10; *  local host. The URL or resource name can be provided as a parameter or&#10; *  as an input. To start playing the sound, an event must be provided to the&#10; *  start input. An event at the stop input, or a new event at the start input,&#10; *  will cause the sound to stop playing.&#10; *&#10; *  @accessor audio/ClipPlayer&#10; *  @author Elizabeth Osyk (beth@berkeley.edu)&#10; *  @input start A trigger input to start playback.&#10; *   The value is ignored and can be anything.&#10; *  @input stop A trigger to stop playback.&#10; *   The value is ignored and can be anything.&#10; *  @input clipURL The URL to retrieve the sound clip from.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, error, exports, output, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var audio = require(&quot;audio&quot;);&#10;&#10;/** Create the inputs and outputs for this accessor. */&#10;exports.setup = function () {&#10;    this.input('start', {&#10;    	'value' : true&#10;    });&#10;    this.input('stop');&#10;    // Use default on icyphy so that&#10;    // https://www.icyphy.org/accessors/library/index.html?accessor=audio.ClipPlayer&#10;    // will work.&#10;    this.input('clipURL', {&#10;        'type': 'string',&#10;        'value': 'https://www.icyphy.org/accessors/src/USAD2016_06-RhapsodyInBlueTrimmed.mp3'&#10;    });&#10;    this.output('done', {&#10;        'type' : 'boolean'&#10;    });&#10;};&#10;&#10;/** Load the specified URL and create a player for it.  */&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.player = null;&#10;    this.previousURL = null;&#10;&#10;    /** Check the URL and, if changed, create a new player for it.  */&#10;    function updateURL() {&#10;        var url = self.get('clipURL');&#10;        if (url &amp;&amp; url !== self.previousURL) {&#10;            //console.log('Got a new URL: ' + url);&#10;            if (self.player !== null) {&#10;                self.player.stop();        // audio.js checks if it's actually playing.&#10;            }&#10;    		&#10;            self.player = new audio.ClipPlayer(url);&#10;            self.previousURL = url;&#10;            &#10;            self.player.on('done', function() {&#10;                self.send('done', true);&#10;            });&#10;        }&#10;    }&#10;    // Do not update in initialize. This causes an error&#10;    // with the default URL if there is no network connection.&#10;    // updateURL();&#10;&#10;    this.addInputHandler('clipURL', function () {&#10;        updateURL();&#10;    });&#10;&#10;    this.addInputHandler('start', function () {&#10;        // In case there is a new URL...&#10;        updateURL();&#10;&#10;        if (self.player === null || typeof self.player === 'undefined') {&#10;            error('No clip specified.');&#10;            return;&#10;        } else {&#10;            self.player.stop();        // audio.js checks if it's actually playing.&#10;        }&#10;        self.player.play();&#10;    });&#10;&#10;    this.addInputHandler('stop', function () {&#10;        if (self.player !== null &amp;&amp; typeof self.player !== 'undefined') {&#10;            self.player.stop();  // audio.js checks if it's actually playing.&#10;        }&#10;    });&#10;    &#10;};&#10;&#10;/** Stop any playback. */&#10;exports.wrapup = function () {&#10;    if (this.player !== null &amp;&amp; typeof this.player !== 'undefined') {&#10;        this.player.stop();  // audio.js checks if it's actually playing.&#10;        this.player = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/audio/ClipPlayer.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for playing a sound clip from a URL or a resource on the&#10; local host. The URL or resource name can be provided as a parameter or&#10; as an input. To start playing the sound, an event must be provided to the&#10; start input. An event at the stop input, or a new event at the start input,&#10; will cause the sound to stop playing.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk (beth@berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="start (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input to start playback.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="stop (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger to stop playback.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="clipURL (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The URL to retrieve the sound clip from.">
            </property>
            <property name="clipURL (port)" class="ptolemy.kernel.util.StringAttribute" value="The URL to retrieve the sound clip from.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="clipURL" class="ptolemy.actor.parameters.PortParameter" value="https://ptolemy.eecs.berkeley.edu/mp3/USAD2016_06-RhapsodyInBlueTrimmed.mp3">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[400.0, 145.0]">
        </property>
        <property name="start" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <port name="clipURL" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="start" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="stop" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="done" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="SecondURL" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="10.0">
        </property>
        <property name="value" class="ptolemy.data.expr.Parameter" value="&quot;$CLASSPATH/ptolemy/actor/lib/jjs/modules/audio/demo/Audio/strum.wav&quot;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[45.0, 135.0]">
        </property>
    </entity>
    <entity name="Merge" class="ptolemy.domains.de.lib.Merge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[270.0, 205.0]">
        </property>
    </entity>
    <entity name="SecondStop" class="ptolemy.actor.lib.SingleEvent">
        <property name="time" class="ptolemy.data.expr.Parameter" value="20.0">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[185.0, 340.0]">
        </property>
    </entity>
    <entity name="Merge2" class="ptolemy.domains.de.lib.Merge">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[290.0, 275.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Const.trigger&quot;,x=160.0,y=360.0}, tail={id=&quot;StartEvent.output&quot;,x=35.0,y=360.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[220.0, 135.0]">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;ClipPlayer2.clipURL&quot;,x=390.0,y=300.0}, tail={id=&quot;relation6.vertex1&quot;,x=210.0,y=290.0}, points={} },{ head={id=&quot;SecondURL.output&quot;,x=35.0,y=290.0}, tail={id=&quot;relation6.vertex1&quot;,x=210.0,y=290.0}, points={} },{ head={id=&quot;Merge.input&quot;,x=255.0,y=360.0,index=2}, tail={id=&quot;relation6.vertex1&quot;,x=210.0,y=290.0}, points={210.0,355.0} } }">
        </property>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Const.output" relation="relation4"/>
    <link port="Const.trigger" relation="relation"/>
    <link port="StartEvent.output" relation="relation"/>
    <link port="FirstStop.output" relation="relation3"/>
    <link port="ClipPlayer2.clipURL" relation="relation6"/>
    <link port="ClipPlayer2.start" relation="relation5"/>
    <link port="ClipPlayer2.stop" relation="relation7"/>
    <link port="SecondURL.output" relation="relation6"/>
    <link port="Merge.input" relation="relation6"/>
    <link port="Merge.input" relation="relation4"/>
    <link port="Merge.output" relation="relation5"/>
    <link port="SecondStop.output" relation="relation2"/>
    <link port="Merge2.input" relation="relation3"/>
    <link port="Merge2.input" relation="relation2"/>
    <link port="Merge2.output" relation="relation7"/>
</entity>
