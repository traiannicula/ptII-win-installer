<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="AudioCapture" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{68.0, 32.0}">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={51, 55, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{350.0, 262.0}">
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Capture audio from the microphone and plot it in both the&#10;time domain and the frequency domain.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{145.0, 15.0}">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="See the AudioClipPlayer model.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 305.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioClipPlayer.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="http://ptolemy.eecs.berkeley.edu/ptolemyII/ptII11.0/ptII/ptolemy/actor/lib/jjs/modules/audio/demo/Audio/AudioClipPlayer/index.html">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_self">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{450, 180}">
            </property>
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Edward A. Lee">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 350.0]">
        </property>
    </property>
    <entity name="AudioCapture" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Capture audio from the default audio source on the host (typically the&#10; *  microphone or line in).&#10; *&#10; *  If the _triggered_ parameter is true (the default), then capture starts&#10; *  when an event appears on the _trigger_ input port and stops after capturing&#10; *  one segment of audio. Otherwise, the accessor continuously captures segments&#10; *  of audio, initiating a new capture after each segment is completed.&#10; *  The _captureTime_ parameter specifies the duration of each segment&#10; *  of audio that is captured (in milliseconds).&#10; *&#10; *  The _outputFormat_ parameter specifies the form in which the audio&#10; *  should appear on the output. The available formats may include:&#10; *&#10; *  * &quot;raw&quot;: The output is a byte array representing audio data exactly as&#10; *    captured by default on the host. This is the default and is&#10; *    supported by all hosts.&#10; *  * &quot;array&quot;: The audio data is converted into an array of arrays of numbers (one&#10; *    array per channel), where each number is in the range from -1.0 to 1.0.&#10; *    The output is an array of arrays, where the first index specifies&#10; *    the channel number.&#10; *  * &quot;aiff&quot;: The audio data is converted into the AIFF file format historically&#10; *    associated with Apple computers.&#10; *  * &quot;aifc&quot;: The audio data is converted into the AIFF-C, a compressed version&#10; *    of AIFF.&#10; *  * &quot;au&quot;: The audio data is converted into the AU file format historically&#10; *    associated with Sun Microsystems and Unix computers.&#10; *  * &quot;wav&quot;: The audio data is converted into the WAVE file format historically&#10; *    associated with Windows PCs.&#10; *&#10; *  The _captureFormat_ parameter is an object with the following properties,&#10; *  all of which are optional:&#10; *&#10; *  * _bitsPerSample_: The number of bits per sample. This is an integer that&#10; *    defaults to 16.&#10; *  * _channels_: The number of channels. This defaults to 1.&#10; *  * _sampleRate_: The sample rate. This is an integer that defaults to 8000.&#10; *    Typical supported sample rates are 8000, 11025, 22050, 44100, and 48000.&#10; *&#10; *  This accessor requires the optional 'audio' module, which may or may&#10; *  not be provided by an accessor host. Moreover, a host may not support&#10; *  all capture formats and all output formats.&#10; *&#10; *  The default captureFormat is  {bitsPerSample: 16, channels: 1, sampleRate: 8000}.&#10; *&#10; *  @accessor audio/AudioCapture&#10; *  @author  Edward A. Lee and Ilge Akkya&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} signal The audio output.&#10; *  @parameter captureFormat The details of the audio format as an object.&#10; *   See the accessor comment for the default.&#10; *  @parameter {int} captureTime The length of time for each audio capture&#10; *   (in milliseconds).&#10; *   This defaults to 1000, capturing 1 second of audio at a time.&#10; *  @parameter {string} outputFormat The format of the output data representing&#10; *   captured audio. This is a string that defaults to 'raw', meaning that&#10; *   the raw bytes are produced on the output.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to true.&#10; *   This parameter is checked only upon initialization.&#10;&#10; *  @version $$Id$$&#10; *  @input trigger Input that triggers recording.&#10; *  @output {number} signal A sequence of numbers representing the captured audio signal.&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, error, exports, input, output, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var audio = require(&quot;audio&quot;);&#10;&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.parameter('captureFormat', {&#10;        value: {&#10;            bitsPerSample: 16,&#10;            channels: 1,&#10;            sampleRate: 8000&#10;        }&#10;    });&#10;    this.parameter('captureTime', {&#10;        type: 'int',&#10;        value: 1000&#10;    });&#10;    this.parameter('outputFormat', {&#10;        type: 'string',&#10;        value: 'raw'&#10;    });&#10;    this.parameter('triggered', {&#10;        type: 'boolean',&#10;        value: true&#10;    });&#10;    this.output('signal');&#10;&#10;    // Retrieve the supported outputFormat options from the audio module.&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a audio module.&#10;    try {&#10;        this.parameter('outputFormat', {&#10;            type: 'string',&#10;            value: 'raw',&#10;            'options': audio.byteFormats()&#10;        });&#10;    } catch (err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;var recorder = null;&#10;var cacheLength = 128;&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    recorder = new audio.Capture(&#10;        self.getParameter('captureTime'),&#10;        self.getParameter('outputFormat'),&#10;        self.getParameter('captureFormat')&#10;    );&#10;    recorder.on('capture', function (audioData) {&#10;        self.send('signal', audioData);&#10;        if (self.getParameter('triggered')) {&#10;            recorder.stop();&#10;        }&#10;    });&#10;&#10;    if (self.getParameter('triggered')) {&#10;        this.addInputHandler(&quot;trigger&quot;, function () {&#10;            recorder.start();&#10;        });&#10;    } else {&#10;        recorder.start();&#10;    }&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (recorder !== null) {&#10;        recorder.stop();&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/audio/AudioCapture.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[70.0, 190.0]">
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Capture audio from the default audio source on the host (typically the&#10; microphone or line in).&lt;/p&gt;&#10;&lt;p&gt; If the &lt;em&gt;triggered&lt;/em&gt; parameter is true (the default), then capture starts&#10; when an event appears on the &lt;em&gt;trigger&lt;/em&gt; input port and stops after capturing&#10; one segment of audio. Otherwise, the accessor continuously captures segments&#10; of audio, initiating a new capture after each segment is completed.&#10; The &lt;em&gt;captureTime&lt;/em&gt; parameter specifies the duration of each segment&#10; of audio that is captured (in milliseconds).&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;outputFormat&lt;/em&gt; parameter specifies the form in which the audio&#10; should appear on the output. The available formats may include:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&amp;quot;raw&amp;quot;: The output is a byte array representing audio data exactly as&#10;captured by default on the host. This is the default and is&#10;supported by all hosts.&lt;/li&gt;&#10;&lt;li&gt;&amp;quot;array&amp;quot;: The audio data is converted into an array of arrays of numbers (one&#10;array per channel), where each number is in the range from -1.0 to 1.0.&#10;The output is an array of arrays, where the first index specifies&#10;the channel number.&lt;/li&gt;&#10;&lt;li&gt;&amp;quot;aiff&amp;quot;: The audio data is converted into the AIFF file format historically&#10;associated with Apple computers.&lt;/li&gt;&#10;&lt;li&gt;&amp;quot;aifc&amp;quot;: The audio data is converted into the AIFF-C, a compressed version&#10;of AIFF.&lt;/li&gt;&#10;&lt;li&gt;&amp;quot;au&amp;quot;: The audio data is converted into the AU file format historically&#10;associated with Sun Microsystems and Unix computers.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&amp;quot;wav&amp;quot;: The audio data is converted into the WAVE file format historically&#10;associated with Windows PCs.&lt;/p&gt;&#10;&lt;p&gt;The &lt;em&gt;captureFormat&lt;/em&gt; parameter is an object with the following properties,&#10;all of which are optional:&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;bitsPerSample&lt;/em&gt;: The number of bits per sample. This is an integer that&#10;defaults to 16.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;channels&lt;/em&gt;: The number of channels. This defaults to 1.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;em&gt;sampleRate&lt;/em&gt;: The sample rate. This is an integer that defaults to 8000.&#10;Typical supported sample rates are 8000, 11025, 22050, 44100, and 48000.&lt;/p&gt;&#10;&lt;p&gt;This accessor requires the optional 'audio' module, which may or may&#10;not be provided by an accessor host. Moreover, a host may not support&#10;all capture formats and all output formats.&lt;/p&gt;&#10;&lt;p&gt;The default captureFormat is  {bitsPerSample: 16, channels: 1, sampleRate: 8000}.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee and Ilge Akkya">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to true.&#10;  This parameter is checked only upon initialization.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Input that triggers recording.">
            </property>
            <property name="signal (port)" class="ptolemy.kernel.util.StringAttribute" value="A sequence of numbers representing the captured audio signal.">
            </property>
            <property name="outputFormat (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The format of the output data representing&#10;  captured audio. This is a string that defaults to 'raw', meaning that&#10;  the raw bytes are produced on the output.">
            </property>
            <property name="captureTime (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The length of time for each audio capture&#10;  (in milliseconds).&#10;  This defaults to 1000, capturing 1 second of audio at a time.">
            </property>
            <property name="undefined (parameter)" class="ptolemy.kernel.util.StringAttribute" value="undefined">
            </property>
            <property name="captureFormat (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The details of the audio format as an object.&#10;  See the accessor comment for the default.">
            </property>
        </property>
        <property name="captureTime" class="ptolemy.data.expr.Parameter" value="500">
        </property>
        <property name="outputFormat" class="ptolemy.data.expr.Parameter" value="array">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="captureFormat" class="ptolemy.data.expr.Parameter" value="{bitsPerSample = 16, channels = 1, sampleRate = 8000}">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="signal" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="arrayType(arrayType(double))">
            </property>
        </port>
    </entity>
    <entity name="ArrayToElements" class="ptolemy.actor.lib.ArrayToElements">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[155.0, 190.0]">
        </property>
    </entity>
    <entity name="ArrayPlotter" class="ptolemy.actor.lib.gui.ArrayPlotter">
        <property name="fillOnWrapup" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={864, 23, 500, 344}, maximized=false}">
        </property>
        <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute" value="[500, 300]">
        </property>
        <property name="xUnit" class="ptolemy.data.expr.Parameter" value="1.0/8000">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[410.0, 95.0]">
        </property>
        <configure>
<?plotml <!DOCTYPE plot PUBLIC "-//UC Berkeley//DTD PlotML 1//EN"
"http://ptolemy.eecs.berkeley.edu/xml/dtd/PlotML_1.dtd">
<plot>
<title>Time Domain</title>
<xLabel>time</xLabel>
<yLabel></yLabel>
<xRange min="0.0" max="0.03187500000000002"/>
<yRange min="-0.2" max="0.2"/>
</plot>?>
        </configure>
    </entity>
    <entity name="Spectrum" class="ptolemy.domains.sdf.lib.Spectrum">
        <property name="order" class="ptolemy.data.expr.Parameter" value="8">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[530.0, 190.0]">
        </property>
    </entity>
    <entity name="ArrayToSequence" class="ptolemy.domains.sdf.lib.ArrayToSequence">
        <property name="arrayLength" class="ptolemy.data.expr.Parameter" value="256">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[405.0, 190.0]">
        </property>
    </entity>
    <entity name="ArrayExtract" class="ptolemy.actor.lib.ArrayExtract">
        <property name="extractLength" class="ptolemy.actor.parameters.PortParameter" value="256">
        </property>
        <property name="outputArrayLength" class="ptolemy.actor.parameters.PortParameter" value="256">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[295.0, 190.0]">
        </property>
    </entity>
    <entity name="SequenceScope" class="ptolemy.actor.lib.gui.SequenceScope">
        <property name="fillOnWrapup" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={865, 396, 500, 344}, maximized=false}">
        </property>
        <property name="_plotSize" class="ptolemy.actor.gui.SizeAttribute" value="[500, 300]">
        </property>
        <property name="xInit" class="ptolemy.data.expr.Parameter" value="-4000.0">
        </property>
        <property name="xUnit" class="ptolemy.data.expr.Parameter" value="8000.0/256">
        </property>
        <property name="width" class="ptolemy.data.expr.Parameter" value="256">
        </property>
        <property name="persistence" class="ptolemy.data.expr.Parameter" value="256">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[620.0, 190.0]">
        </property>
        <configure>
<?plotml <!DOCTYPE plot PUBLIC "-//UC Berkeley//DTD PlotML 1//EN"
"http://ptolemy.eecs.berkeley.edu/xml/dtd/PlotML_1.dtd">
<plot>
<title>Spectrum</title>
<xLabel>frequency</xLabel>
<yLabel>decibels</yLabel>
<xRange min="-4000.0" max="4000.0"/>
<yRange min="-100.0" max="0.0"/>
<wrap/>
<default marks="pixels"/>
</plot>?>
        </configure>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[350.0, 190.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="AudioCapture.signal" relation="relation3"/>
    <link port="ArrayToElements.input" relation="relation3"/>
    <link port="ArrayToElements.output" relation="relation"/>
    <link port="ArrayPlotter.input" relation="relation6"/>
    <link port="Spectrum.input" relation="relation4"/>
    <link port="Spectrum.output" relation="relation5"/>
    <link port="ArrayToSequence.input" relation="relation6"/>
    <link port="ArrayToSequence.output" relation="relation4"/>
    <link port="ArrayExtract.input" relation="relation"/>
    <link port="ArrayExtract.output" relation="relation6"/>
    <link port="SequenceScope.input" relation="relation5"/>
</entity>
