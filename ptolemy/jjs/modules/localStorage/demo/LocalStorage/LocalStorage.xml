<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="LocalStorage" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={33, 141, 934, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{350.0, 262.0}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="9">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[95.0, 45.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Set and get example key-value pairs.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{355.0, -15.0}">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{120.0, -15.0}">
        </property>
    </property>
    <entity name="Input" class="ptolemy.actor.lib.Sequence">
        <property name="values" class="ptolemy.data.expr.Parameter" value="{ {&quot;a&quot;,&quot;apple&quot;}, {&quot;b&quot;, &quot;bed&quot;}, {&quot;c&quot;, &quot;car&quot;}, {&quot;d&quot;, &quot;dog&quot;}, {&quot;e&quot;, &quot;eagle&quot;}, {&quot;a&quot;, &quot;ace&quot;}, {&quot;c&quot;,&quot;&quot;}, {&quot;d&quot;, &quot;&quot;}, {&quot;e&quot;,&quot;&quot;}, {&quot;a&quot;,&quot;&quot;} }">
        </property>
        <property name="repeat" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="holdLastOutput" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[193.0, 125.0]">
        </property>
    </entity>
    <entity name="ArrayToElements" class="ptolemy.actor.lib.ArrayToElements">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[265.0, 125.0]">
        </property>
    </entity>
    <entity name="IsGet" class="ptolemy.actor.lib.Sequence">
        <property name="values" class="ptolemy.data.expr.Parameter" value="{ true, true, true, true, true, true, false, false, false, false}">
        </property>
        <property name="repeat" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="holdLastOutput" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[193.0, 175.0]">
        </property>
    </entity>
    <entity name="DiscreteClock" class="ptolemy.actor.lib.DiscreteClock">
        <property name="values" class="ptolemy.data.expr.Parameter" value="{true}">
        </property>
        <doc>Create periodic timed events.</doc>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{70.0, 125.0}">
        </property>
    </entity>
    <entity name="LocalStorage" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Save and retrieve a value from local storage.&#10;&#10;// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; *  Save and retrieve a value from local storage. &#10; *&#10; *  @accessor utilities/LocalStorage&#10; *  @input {string} baseDirectory The directory in which to store the data&#10; *  If there is no value used, then the default value is /tmp/LocalStorage&lt;Random&gt;&#10; *  where &lt;Random&gt; is a random number.&#10; *  @input {string} storeLocation The URL of the key-value store service.&#10; *  The storeLocation is converted into a legal filename via substitution&#10; *  @input {string} key The key to be updated or retrieved.&#10; *  @input {boolean} list If true, then generate a list of all the&#10; *  keys and values on the result.&#10; *  @output {boolean} notFound True if the key was not found.&#10; *  @input {boolean} remove If true, then remove the key from the store;&#10; *   otherwise, retrieve the value for the key.&#10; *  @input {string} value The value to store in the key-value store,&#10; *   or empty to not store anything.&#10; *  @input trigger The trigger input.&#10; *  @output {string} result The value retrieved from or written to&#10; *   the key-value store.&#10; *  @output {string} debug Debug messages.&#10; *&#10; *  @author Christopher Brooks, based on KeyValueStore by Edward A. Lee and LocalStorage demo by Hokeun Kim.&#10; *  @version $$Id$$&#10; */&#10;&#10;// FIXME: LocalStorage and KeyValueStore have lots of duplicate text.&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*global console, error, exports, readURL */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var storage = require('@accessors-modules/local-storage');&#10;&#10;exports.setup = function () {&#10;    this.input('baseDirectory', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('storeLocation', {&#10;        'type': 'string',&#10;        'value': 'http://localhost:8077/keyvalue'&#10;    });&#10;    this.input('key', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('list', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.output('notFound', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;    this.input('remove', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.input('value', {&#10;        'type': 'string'&#10;    });&#10;    this.input('trigger');&#10;    this.output('result', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;    this.output('debug', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('trigger', handleInputs.bind(this));&#10;}&#10;&#10;/** Return the contents of the store.&#10; *  @return the contents of the store.&#10; */&#10;function currentStatus() {&#10;    var result = &quot;{&quot;;&#10;    var length = storage.length();&#10;    console.log(&quot;LocalStorage: currentStatus(): length: &quot; + length);&#10;    for (var i = 0; i &lt; length; i++) {&#10;        var key = storage.key(i);&#10;        var value = storage.getItem(key);&#10;        console.log(&quot;LocalStorage: currentStatus(): key: &quot; + key + &quot;, value: &quot; + value);&#10;        result = result + '\&quot;' + key + '\&quot;: \&quot;' + value + '\&quot;';&#10;        if (i &lt; (length - 1)) {&#10;            result = result + ', '&#10;        }&#10;    }&#10;    return result + &quot;}&quot;;&#10;}&#10;&#10;var lastBaseDirectory = null;&#10;var lastStoreLocation = null;&#10;&#10;function handleInputs() {&#10;    var theBaseDirectory = this.get('baseDirectory');&#10;    var theStoreLocation = this.get('storeLocation');&#10;    var theKey = this.get('key');&#10;    var toList = this.get('list');&#10;    var theValue = this.get('value');&#10;    var toRemove = this.get('remove');&#10;&#10;    this.send('debug', &quot;LocalStorage: key: &quot; + theKey + &quot;, value: &quot; + theValue + &quot;, remove: &quot; + toRemove + &quot;, toList: &quot; + toList);&#10;&#10;    // If necessary initialize the storage.&#10;    if (theBaseDirectory !== lastBaseDirectory || theStoreLocation !== lastStoreLocation) {&#10;        lastBaseDirectory = theBaseDirectory;&#10;        lastStoreLocation = theStoreLocation&#10;&#10;        var baseDirectory;&#10;        if (theBaseDirectory !== null &amp;&amp; theBaseDirectory == '') {&#10;            baseDirectory = theBaseDirectory;&#10;        }&#10;&#10;        // FIXME: it is possible for two storageLocations that differ only by&#10;        // special characters to map to the same string.&#10;        // The fix would be to use a MD5 or something similar.&#10;        if (theStoreLocation !== null &amp;&amp; theStoreLocation == '') {&#10;            baseDirectory += theStoreLocation.replace(/[^a-z0-9_-]/gi, '_').toLowerCase();&#10;        }&#10;        if (baseDirectory === null || baseDirectory === '') {&#10;            baseDirectory = &quot;/tmp/LocalStorage&quot; + Math.random();&#10;        }&#10;&#10;        this.send('debug', 'Using a storage directory of ' + baseDirectory);&#10;&#10;        storage.initSync({dir: baseDirectory});&#10;    }&#10;&#10;    if (toRemove) {&#10;        if (theKey !== &quot;&quot;) {&#10;            this.send('debug', 'Removing ' + theKey);&#10;            storage.remove(theKey);&#10;            this.send('result', theKey);&#10;        }&#10;    } else if (toList) {&#10;        this.send('debug', 'listing current keys and values');&#10;        this.send('result', currentStatus());&#10;    } else {&#10;        // toRemove == false. If there is a value, use it to set.&#10;        if (theValue !== &quot;&quot; &amp;&amp; theValue !== null) {&#10;            this.send('debug', 'Inserting (Key,Value) = (' + theKey + ', ' + theValue + ')');&#10;            storage.setItem(theKey, theValue);&#10;            this.send('result', theValue);&#10;        } else {&#10;            var foundValue = storage.getItem(theKey);&#10;            this.send('debug', 'Retrieving Key: ' + theKey + ', foundValue: ' + foundValue);&#10;            if (foundValue === null) {&#10;                this.send('notFound', true);&#10;            } else {&#10;                this.send('result', foundValue);&#10;            }&#10;        }&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/LocalStorage.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Save and retrieve a value from local storage.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks, based on KeyValueStore by Edward A. Lee and LocalStorage demo by Hokeun Kim.">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="baseDirectory (port)" class="ptolemy.kernel.util.StringAttribute" value="The directory in which to store the data&#10; If there is no value used, then the default value is /tmp/LocalStorage&lt;Random&gt;&#10; where &lt;Random&gt; is a random number.">
            </property>
            <property name="storeLocation (port)" class="ptolemy.kernel.util.StringAttribute" value="The URL of the key-value store service.&#10; The storeLocation is converted into a legal filename via substitution">
            </property>
            <property name="key (port)" class="ptolemy.kernel.util.StringAttribute" value="The key to be updated or retrieved.">
            </property>
            <property name="remove (port)" class="ptolemy.kernel.util.StringAttribute" value="If true, then remove the key from the store;&#10;  otherwise, retrieve the value for the key.">
            </property>
            <property name="value (port)" class="ptolemy.kernel.util.StringAttribute" value="The value to store in the key-value store,&#10;  or empty to not store anything.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="The trigger input.">
            </property>
            <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" value="The value retrieved from or written to&#10;  the key-value store.">
            </property>
            <property name="debug (port)" class="ptolemy.kernel.util.StringAttribute" value="Debug messages.">
            </property>
            <property name="list (port)" class="ptolemy.kernel.util.StringAttribute" value="If true, then generate a list of all the&#10; keys and values on the result.">
            </property>
            <property name="notFound (port)" class="ptolemy.kernel.util.StringAttribute" value="True if the key was not found.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="baseDirectory" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="key" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[455.0, 130.0]">
        </property>
        <property name="storeLocation" class="ptolemy.actor.parameters.PortParameter" value="http://localhost:8077/keyvalue">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="baseDirectory" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="key" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="storeLocation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="remove" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="value" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="debug" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="list" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="notFound" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="LocalStorageResult" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={920, 176, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 105.0]">
        </property>
    </entity>
    <entity name="LocalStorageDebug" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={920, 411, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[570.0, 175.0]">
        </property>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[128.0, 125.0]">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Input.enable&quot;,x=193.0,y=125.0}, tail={id=&quot;relation7.vertex1&quot;,x=128.0,y=125.0}, points={} },{ head={id=&quot;IsGet.enable&quot;,x=193.0,y=175.0}, tail={id=&quot;relation7.vertex1&quot;,x=128.0,y=125.0}, points={128.0,175.0} } }">
        </property>
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[350.0, 125.0]">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[364.1927032470703, 147.57812118530273]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Input.enable" relation="relation7"/>
    <link port="Input.output" relation="relation"/>
    <link port="ArrayToElements.input" relation="relation"/>
    <link port="ArrayToElements.output" relation="relation6"/>
    <link port="ArrayToElements.output" relation="relation3"/>
    <link port="IsGet.enable" relation="relation7"/>
    <link port="DiscreteClock.output" relation="relation7"/>
    <link port="LocalStorage.key" relation="relation6"/>
    <link port="LocalStorage.value" relation="relation3"/>
    <link port="LocalStorage.trigger" relation="relation6"/>
    <link port="LocalStorage.result" relation="relation4"/>
    <link port="LocalStorage.debug" relation="relation8"/>
    <link port="LocalStorageResult.input" relation="relation4"/>
    <link port="LocalStorageDebug.input" relation="relation8"/>
</entity>
