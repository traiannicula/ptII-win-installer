<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="LocalStorageTestJS" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={33, 141, 1092, 634}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[858, 524]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{429.0, 262.0}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="9">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 60.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Set and get example key-value pairs.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{270.0, -15.0}">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Hokeun Kim">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{120.0, -15.0}">
        </property>
    </property>
    <property name="AccessorCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator">
        <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$PTII/org/terraswarm/accessor/accessors/web/utilities/test/auto">
        </property>
        <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="@node@ ../../../hosts/node/nodeHostInvoke.js utilities/test/auto/@modelName@">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[105.0, 385.0]">
        </property>
    </property>
    <entity name="LocalStorage" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Save and retrieve a value from local storage.&#10;&#10;// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** &#10; *  Save and retrieve a value from local storage. &#10; *&#10; *  @accessor utilities/LocalStorage&#10; *  @input {string} baseDirectory The directory in which to store the data&#10; *  If there is no value used, then the default value is /tmp/LocalStorage&lt;Random&gt;&#10; *  where &lt;Random&gt; is a random number.&#10; *  @input {string} storeLocation The URL of the key-value store service.&#10; *  The storeLocation is converted into a legal filename via substitution&#10; *  @input {string} key The key to be updated or retrieved.&#10; *  @input {boolean} list If true, then generate a list of all the&#10; *  keys and values on the result.&#10; *  @output {boolean} notFound True if the key was not found.&#10; *  @input {boolean} remove If true, then remove the key from the store;&#10; *   otherwise, retrieve the value for the key.&#10; *  @input {string} value The value to store in the key-value store,&#10; *   or empty to not store anything.&#10; *  @input trigger The trigger input.&#10; *  @output {string} result The value retrieved from or written to&#10; *   the key-value store.&#10; *  @output {string} debug Debug messages.&#10; *&#10; *  @author Christopher Brooks, based on KeyValueStore by Edward A. Lee and LocalStorage demo by Hokeun Kim.&#10; *  @version $$Id$$&#10; */&#10;&#10;// FIXME: LocalStorage and KeyValueStore have lots of duplicate text.&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*global console, error, exports, readURL */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var storage = require('@accessors-modules/local-storage');&#10;&#10;exports.setup = function () {&#10;    this.input('baseDirectory', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('storeLocation', {&#10;        'type': 'string',&#10;        'value': 'http://localhost:8077/keyvalue'&#10;    });&#10;    this.input('key', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('list', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.output('notFound', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;    this.input('remove', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.input('value', {&#10;        'type': 'string'&#10;    });&#10;    this.input('trigger');&#10;    this.output('result', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;    this.output('debug', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('trigger', handleInputs.bind(this));&#10;}&#10;&#10;/** Return the contents of the store.&#10; *  @return the contents of the store.&#10; */&#10;function currentStatus() {&#10;    var result = &quot;{&quot;;&#10;    var length = storage.length();&#10;    console.log(&quot;LocalStorage: currentStatus(): length: &quot; + length);&#10;    for (var i = 0; i &lt; length; i++) {&#10;        var key = storage.key(i);&#10;        var value = storage.getItem(key);&#10;        console.log(&quot;LocalStorage: currentStatus(): key: &quot; + key + &quot;, value: &quot; + value);&#10;        result = result + '\&quot;' + key + '\&quot;: \&quot;' + value + '\&quot;';&#10;        if (i &lt; (length - 1)) {&#10;            result = result + ', '&#10;        }&#10;    }&#10;    return result + &quot;}&quot;;&#10;}&#10;&#10;var lastBaseDirectory = null;&#10;var lastStoreLocation = null;&#10;&#10;function handleInputs() {&#10;    var theBaseDirectory = this.get('baseDirectory');&#10;    var theStoreLocation = this.get('storeLocation');&#10;    var theKey = this.get('key');&#10;    var toList = this.get('list');&#10;    var theValue = this.get('value');&#10;    var toRemove = this.get('remove');&#10;&#10;    this.send('debug', &quot;LocalStorage: key: &quot; + theKey + &quot;, value: &quot; + theValue + &quot;, remove: &quot; + toRemove + &quot;, toList: &quot; + toList);&#10;&#10;    // If necessary initialize the storage.&#10;    if (theBaseDirectory !== lastBaseDirectory || theStoreLocation !== lastStoreLocation) {&#10;        lastBaseDirectory = theBaseDirectory;&#10;        lastStoreLocation = theStoreLocation&#10;&#10;        var baseDirectory;&#10;        if (theBaseDirectory !== null &amp;&amp; theBaseDirectory == '') {&#10;            baseDirectory = theBaseDirectory;&#10;        }&#10;&#10;        // FIXME: it is possible for two storageLocations that differ only by&#10;        // special characters to map to the same string.&#10;        // The fix would be to use a MD5 or something similar.&#10;        if (theStoreLocation !== null &amp;&amp; theStoreLocation == '') {&#10;            baseDirectory += theStoreLocation.replace(/[^a-z0-9_-]/gi, '_').toLowerCase();&#10;        }&#10;        if (baseDirectory === null || baseDirectory === '') {&#10;            baseDirectory = &quot;/tmp/LocalStorage&quot; + Math.random();&#10;        }&#10;&#10;        this.send('debug', 'Using a storage directory of ' + baseDirectory);&#10;&#10;        storage.initSync({dir: baseDirectory});&#10;    }&#10;&#10;    if (toRemove) {&#10;        if (theKey !== &quot;&quot;) {&#10;            this.send('debug', 'Removing ' + theKey);&#10;            storage.remove(theKey);&#10;            this.send('result', theKey);&#10;        }&#10;    } else if (toList) {&#10;        this.send('debug', 'listing current keys and values');&#10;        this.send('result', currentStatus());&#10;    } else {&#10;        // toRemove == false. If there is a value, use it to set.&#10;        if (theValue !== &quot;&quot; &amp;&amp; theValue !== null) {&#10;            this.send('debug', 'Inserting (Key,Value) = (' + theKey + ', ' + theValue + ')');&#10;            storage.setItem(theKey, theValue);&#10;            this.send('result', theValue);&#10;        } else {&#10;            var foundValue = storage.getItem(theKey);&#10;            this.send('debug', 'Retrieving Key: ' + theKey + ', foundValue: ' + foundValue);&#10;            if (foundValue === null) {&#10;                this.send('notFound', true);&#10;            } else {&#10;                this.send('result', foundValue);&#10;            }&#10;        }&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/LocalStorage.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Save and retrieve a value from local storage.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks, based on KeyValueStore by Edward A. Lee and LocalStorage demo by Hokeun Kim.">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="baseDirectory (port)" class="ptolemy.kernel.util.StringAttribute" value="The directory in which to store the data&#10; If there is no value used, then the default value is /tmp/LocalStorage&lt;Random&gt;&#10; where &lt;Random&gt; is a random number.">
            </property>
            <property name="storeLocation (port)" class="ptolemy.kernel.util.StringAttribute" value="The URL of the key-value store service.&#10; The storeLocation is converted into a legal filename via substitution">
            </property>
            <property name="key (port)" class="ptolemy.kernel.util.StringAttribute" value="The key to be updated or retrieved.">
            </property>
            <property name="remove (port)" class="ptolemy.kernel.util.StringAttribute" value="If true, then remove the key from the store;&#10;  otherwise, retrieve the value for the key.">
            </property>
            <property name="value (port)" class="ptolemy.kernel.util.StringAttribute" value="The value to store in the key-value store,&#10;  or empty to not store anything.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="The trigger input.">
            </property>
            <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" value="The value retrieved from or written to&#10;  the key-value store.">
            </property>
            <property name="debug (port)" class="ptolemy.kernel.util.StringAttribute" value="Debug messages.">
            </property>
            <property name="list (port)" class="ptolemy.kernel.util.StringAttribute" value="If true, then generate a list of all the&#10; keys and values on the result.">
            </property>
            <property name="notFound (port)" class="ptolemy.kernel.util.StringAttribute" value="True if the key was not found.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="baseDirectory" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="key" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[365.0, 260.0]">
        </property>
        <property name="storeLocation" class="ptolemy.actor.parameters.PortParameter" value="http://localhost:8077/keyvalue">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="baseDirectory" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="key" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="storeLocation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="remove" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="value" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="string">
            </property>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="debug" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="list" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="notFound" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="TextDisplay" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={470, 346, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display text.&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Display data using util.inspect() to render a more human-readable form.&#10; *  Any data accepted by util.inspect() can be displayed.&#10; *  The title may be used by the host to label the output in some way, either&#10; *  by labeling a display window or prepending the printed text with the title.&#10; *  The resulting text is passed through to the output in case a model wishes to ensure&#10; *  that the image has been displayed before something else happens or the model&#10; *  wishes to use the rendered text in some way.&#10; *&#10; *  @accessor utilities/TextDisplay&#10; *  @input input The text to display.&#10; *  @output output The text to display.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var textDisplay = require('@accessors-modules/text-display');&#10;var util = require('util');&#10;var display = null;&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output', {'type':'string'});&#10;    this.parameter('title', {&#10;        'type':'string',&#10;        'value':'TextDisplay'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    &#10;    if (display === null) {&#10;        display = new textDisplay.TextDisplay(this.getParameter('title'));&#10;    }&#10;&#10;    this.addInputHandler('input', function () {&#10;        var inputValue = self.get('input');&#10;        var text = util.inspect(inputValue);&#10;        display.appendText(text);&#10;        this.send('output', text);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/TextDisplay.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Display data using util.inspect() to render a more human-readable form.&#10; Any data accepted by util.inspect() can be displayed.&#10; The title may be used by the host to label the output in some way, either&#10; by labeling a display window or prepending the printed text with the title.&#10; The resulting text is passed through to the output in case a model wishes to ensure&#10; that the image has been displayed before something else happens or the model&#10; wishes to use the rendered text in some way.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The text to display.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The text to display.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{550.0, 175.0}">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="title" class="ptolemy.data.expr.Parameter" value="TextDisplay">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TextDisplay2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={470, 556, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Display text.&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Display data using util.inspect() to render a more human-readable form.&#10; *  Any data accepted by util.inspect() can be displayed.&#10; *  The title may be used by the host to label the output in some way, either&#10; *  by labeling a display window or prepending the printed text with the title.&#10; *  The resulting text is passed through to the output in case a model wishes to ensure&#10; *  that the image has been displayed before something else happens or the model&#10; *  wishes to use the rendered text in some way.&#10; *&#10; *  @accessor utilities/TextDisplay&#10; *  @input input The text to display.&#10; *  @output output The text to display.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals console, error, exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var textDisplay = require('@accessors-modules/text-display');&#10;var util = require('util');&#10;var display = null;&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output', {'type':'string'});&#10;    this.parameter('title', {&#10;        'type':'string',&#10;        'value':'TextDisplay'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    &#10;    if (display === null) {&#10;        display = new textDisplay.TextDisplay(this.getParameter('title'));&#10;    }&#10;&#10;    this.addInputHandler('input', function () {&#10;        var inputValue = self.get('input');&#10;        var text = util.inspect(inputValue);&#10;        display.appendText(text);&#10;        this.send('output', text);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/TextDisplay.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Display data using util.inspect() to render a more human-readable form.&#10; Any data accepted by util.inspect() can be displayed.&#10; The title may be used by the host to label the output in some way, either&#10; by labeling a display window or prepending the printed text with the title.&#10; The resulting text is passed through to the output in case a model wishes to ensure&#10; that the image has been displayed before something else happens or the model&#10; wishes to use the rendered text in some way.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The text to display.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The text to display.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[585.0, 355.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="title" class="ptolemy.data.expr.Parameter" value="TextDisplay2">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{550.0, 80.0}">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;apple&quot;, &quot;bed&quot;, &quot;car&quot;, &quot;dog&quot;, &quot;eagle&quot;, &quot;ace&quot;, &quot;car&quot;, &quot;dog&quot;, &quot;eagle&quot;, &quot;ace&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TrainableTest2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;/** Compare the input with a known good input.&#10; *  If you set ''trainingMode'' to true and provide inputs, then the&#10; *  inputs will be recorded in the ''correctValues'' parameters.&#10; *  Otherwise, the inputs will be compared against those in the&#10; *  ''correctValue'' parameter.&#10; *&#10; *  @accessor test/TrainableTest&#10; *  @input input The input value.&#10; *  @output output False as long as there is data to compare against the input&#10; *  @param correctValues a JSON array of the correct values.&#10; *  @param trainingMode true if the input is being trained.&#10; *  @author Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;exports.setup = function () {&#10;    this.parameter('correctValues', {&#10;        'value': [0]&#10;    });&#10;    this.input('input');&#10;    this.output('output', {&#10;        'type': 'boolean'&#10;    });&#10;    this.parameter('tolerance', {&#10;        'type': 'number',&#10;        'value': 0.000000001&#10;    });&#10;    this.parameter('trainingMode', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;};&#10;&#10;// Input, parameter and variable names match those in $PTII/ptolemy/actor/lib/NonStrictTest.java&#10;&#10;// Set to true if an input is handled.  If no inputs are handled, then&#10;// throw an exception in wrapup().&#10;var inputHandled = false;&#10;&#10;// Set to true when initialize() is called.&#10;var initialized = false;&#10;&#10;// The number of input tokens that have been read in.&#10;var numberOfInputTokensSeen = 0;&#10;&#10;// If trainingMode is true, then inputs that have been seen so far.&#10;var trainingTokens = [];&#10;&#10;// Set to false in initialize() and true at the end of wrapup().&#10;// FIXME: We should have an exit hook that checks that wrapup() is called for all the actors.&#10;var wrappedUp = false;&#10;&#10;// So we can test this in hosts/node/test/mocha/testMain.js to test that wrapup was called.&#10;exports.wrappedUp = wrappedUp;&#10;&#10;// Return true if the object has the same properties, in any order.&#10;// Based on http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;var objectPropertiesEqual = function(object1, object2) {&#10;    var property;&#10;&#10;    // Check that all the properties in object2 are present in object.&#10;    for ( property in object2) {&#10;        if (typeof object1[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Check that all the properties in object1 are preset in object2.&#10;    for (property in object1) {&#10;        if (typeof object2[property] === 'undefined') {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // If a property is an object1, the recursively call this function.&#10;    // If a property is a function, then do a string comparison.&#10;    for (property in object2) {&#10;        if (object2[property]) {&#10;            switch (typeof object2[property]) {&#10;            case 'object1':&#10;                // Here's the recursive bit&#10;                if (!objectPropertiesEqual(object1[property], object2[property])) {&#10;                    return false;&#10;                }&#10;                break;&#10;            case 'function':&#10;                if (typeof object1[property] ==='undefined' ||&#10;                    (property != 'object1PropertiesEqual' &amp;&amp;&#10;                     object2[property].toString() != object1[property].toString())) {&#10;                    return false;&#10;                }&#10;                break;&#10;            default:&#10;                if (object2[property] !== object1[property]) {&#10;                    return false;&#10;                }&#10;            }&#10;        } else {&#10;            // FIXME: I'm not sure if this case is ever used, but it was in &#10;            // http://procbits.com/2012/01/19/comparing-two-javascript-objects&#10;            if (object1[property]) {&#10;                return false;&#10;            }&#10;        }&#10;    }&#10;&#10;    return true;&#10;};&#10;&#10;/** Create an input handler to compare the input with the appropriate element(s)&#10; *  from correctValues.&#10; */&#10;exports.initialize = function () {&#10;    //console.log(&quot;Test initialize(): typeof correctValues: &quot; + typeof this.getParameter('correctValues'))&#10;    var inputValueValue,&#10;        self = this;&#10;&#10;    trainingTokens = [];&#10;    exports.wrappedUp = false;&#10;    numberOfInputTokensSeen = 0;&#10;&#10;    this.addInputHandler('input', function () {&#10;        var cache = [],&#10;            inputValue = self.get('input'),&#10;            inputValueValue;&#10;        inputHandled = true;&#10;&#10;        // If the input is not connected, then inputValue will be null.&#10;        if (self.getParameter('trainingMode')) {&#10;            trainingTokens.push(inputValue);&#10;            self.send('output', false);&#10;            return;&#10;        }&#10;        var correctValuesValues = self.getParameter('correctValues');&#10;&#10;        if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;            var referenceToken = correctValuesValues[numberOfInputTokensSeen];&#10;            //console.log(&quot;Test: &quot; + numberOfInputTokensSeen + &quot;, input: &quot; + inputValue&#10;            //+ &quot;, referenceToken: &quot; + referenceToken);&#10;            if (typeof inputValue !== 'boolean' &amp;&amp;&#10;                typeof inputValue !== 'number' &amp;&amp;&#10;                typeof inputValue !== 'object' &amp;&amp;&#10;                typeof inputValue !== 'string') {&#10;                if (inputValue === null) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the value of the input was null?  ' +&#10;                                    'Perhaps the input is not connected?'&#10;                                   );&#10;                }&#10;                cache = [];&#10;                inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                    if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                        if (cache.indexOf(value) !== -1) {&#10;                            // Circular reference found, discard key&#10;                            return;&#10;                        }&#10;                        // Store value in our collection&#10;                        cache.push(value);&#10;                    }&#10;                    return value;&#10;                });&#10;                if (inputValueValue.length &gt; 100) {&#10;                    inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                }&#10;                cache = null; // Enable garbage collection&#10;&#10;&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the input &quot;' + inputValue +&#10;                                '&quot; is neither a number nor a string, it is a ' +&#10;                                typeof inputValue + ' with value ' + inputValueValue);&#10;            }&#10;            if (typeof referenceToken === 'boolean') {&#10;                // If the input not a boolean, then throw an error.&#10;                if (typeof inputValue !== 'boolean') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a boolean, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;                if (inputValue !== referenceToken) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not equal to &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'number') {&#10;                // If the input not a number, then throw an error.&#10;                if (typeof inputValue !== 'number') {&#10;                    inputValueValue = inputValue;&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                            if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                                if (cache.indexOf(value) !== -1) {&#10;                                    // Circular reference found, discard key&#10;                                    return;&#10;                                }&#10;                                // Store value in our collection&#10;                                cache.push(value);&#10;                            }&#10;                            return value;&#10;                        });&#10;                    }&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValueValue +&#10;                                    '&quot; is not a number, it is a ' +&#10;                                    typeof inputValue + '.  The expected value was &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;&#10;                var difference = Math.abs(inputValue - referenceToken);&#10;                if (isNaN(difference)) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the absolute value of the input &quot;' +&#10;                                    inputValue + '&quot; - the referenceToken &quot;' +&#10;                                    referenceToken + '&quot; is NaN?  It should be less than ' +&#10;                                    self.getParameter('tolerance'));&#10;                }&#10;                if (difference &gt; self.getParameter('tolerance')) {&#10;                    throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                    ' tokens, the input &quot;' + inputValue + '&quot; is not within &quot;' +&#10;                                    self.getParameter('tolerance') +&#10;                                    '&quot; of the expected value &quot;' +&#10;                                    referenceToken + '&quot;');&#10;                }&#10;            } else if (typeof referenceToken === 'string') {&#10;                if (inputValue !== referenceToken) {&#10;                    // devices/test/auto/WatchEmulator.js needs this test for object because&#10;                    // if we receive a JSON object, then we should try to stringify it.&#10;                    if (typeof inputValue === 'object') {&#10;                        inputValueValue = null;&#10;                        try {&#10;                            inputValueValue = JSON.stringify(inputValue);&#10;                        } catch (err) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken + '&quot;.  The input was an object, and a string was expected.');&#10;                        }&#10;                        if (inputValueValue !== referenceToken) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input &quot;' + inputValueValue + '&quot; is !== ' +&#10;                                            ' to the expected value &quot;' +&#10;                                            referenceToken +&#10;                                            '&quot;.  The input was an object and JSON.stringify() did not throw an exception.' +&#10;                                            'A string was expected.');&#10;                        }&#10;                    }&#10;                }&#10;            } else if (typeof referenceToken === 'object') {&#10;                // Sadly, in JavaScript, objects that have the same&#10;                // properties, but in a different order are not&#10;                // consider equal in that Object.is() will return&#10;                // false.  However, Ptolemy RecordTokens are by&#10;                // default unordered (unless they are&#10;                // OrderedRecordTokens), So, we have a function that&#10;                // does a deep comparison and ignores differences in&#10;                // property order.&#10;                if (objectPropertiesEqual(inputValue, referenceToken)) {&#10;                    // The objects are not the same.&#10;&#10;                    // Generate string representations of the values&#10;                    // so that the user can possibly tell what went&#10;                    // wrong.&#10;                    cache = [];&#10;                    inputValueValue = JSON.stringify(inputValue, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;                    cache = [];&#10;                    var referenceTokenValue = JSON.stringify(referenceToken, function (key, value) {&#10;                        if (typeof value === 'object' &amp;&amp; value !== null) {&#10;                            if (cache.indexOf(value) !== -1) {&#10;                                // Circular reference found, discard key&#10;                                return;&#10;                            }&#10;                            // Store value in our collection&#10;                            cache.push(value);&#10;                        }&#10;                        return value;&#10;                    });&#10;&#10;                    cache = null; // Enable garbage collection&#10;&#10;                    // If we are comparing longs from CapeCode, then the values will be like &quot;1L&quot;,&#10;                    // and stringify will return undefined.&#10;                    if (inputValueValue === undefined) {&#10;                        inputValueValue = inputValue;&#10;                    }&#10;                    if (referenceTokenValue === undefined) {&#10;                        referenceTokenValue = referenceToken;&#10;                    }&#10;&#10;                    if (inputValueValue !== referenceTokenValue) {&#10;                        // inputValueValue could still be undefined here if inputValue&#10;                        // was undefined.&#10;                        if (inputValueValue !== undefined &amp;&amp; inputValueValue.length &gt; 100) {&#10;                            inputValueValue = inputValueValue.substring(0, 100) + '...';&#10;                        }&#10;                        if (referenceTokenValue !== undefined &amp;&amp; referenceTokenValue.length &gt; 100) {&#10;                            referenceTokenValue = referenceTokenValue.substring(0, 100) + '...';&#10;                        }&#10;                        // Deal with referenceTokens with value 1L.&#10;                        if (typeof inputValueValue !== 'object' || typeof referenceTokenValue !== 'object' &amp;&amp;&#10;                            inputValueValue.toString() !== referenceTokenValue.toString) {&#10;                            throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                            ' tokens, the input Object \n&quot;' + inputValueValue +&#10;                                            '&quot; is !== to the expected value Object\n&quot;' +&#10;                                            referenceTokenValue);&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                throw new Error(self.accessorName + ': After seeing ' + numberOfInputTokensSeen +&#10;                                ' tokens, the referenceToken &quot;' + referenceToken +&#10;                                '&quot; is not a number, it is a ' +&#10;                                typeof referenceToken);&#10;            }&#10;            numberOfInputTokensSeen += 1;&#10;            // If we are past the end of the expected inputs, then read&#10;            if (numberOfInputTokensSeen &gt;= correctValuesValues.length) {&#10;                self.send('output', true);&#10;            } else {&#10;                self.send('output', false);&#10;            }&#10;        } else {&#10;            self.send('output', true);&#10;        }&#10;    });&#10;    initialized = true;&#10;};&#10;&#10;/** If trainingMode is true, then updated the correctValues. */&#10;exports.wrapup = function () {&#10;    if (this.getParameter('trainingMode')) {&#10;        this.setParameter('correctValues', trainingTokens);&#10;    } else {&#10;        if (initialized) {&#10;            if (!inputHandled) {&#10;                initialized = false;&#10;                throw new Error(this.accessorName + ': The input handler of this accessor was never invoked. ' +&#10;                                'Usually, this is an error indicating that ' +&#10;                                'starvation is occurring.');&#10;            }&#10;            var correctValuesValues = this.getParameter('correctValues');&#10;            if (numberOfInputTokensSeen &lt; correctValuesValues.length) {&#10;                throw new Error(this.accessorName + ': The test produced only ' +&#10;                                numberOfInputTokensSeen +&#10;                                ' tokens, yet the correctValues parameter was ' +&#10;                                'expecting ' +&#10;                                correctValuesValues.length +&#10;                                ' tokens');&#10;            }&#10;        }&#10;        initialized = false;&#10;    }&#10;    var name = this.accessorName;&#10;&#10;    // FIXME: Should we check to see if the name has no dots in and if&#10;    // it does not, add the container name?&#10;&#10;    //if (this.container) {&#10;    //    name = this.container.accessorName + &quot;.&quot; + name;&#10;    //}&#10;&#10;    //&#10;    exports.wrappedUp = true;&#10;    // console.log(&quot;TrainableTest.js: wrapup() finished: &quot; + name + &quot;, exports.wrappedUp: &quot; + exports.wrappedUp);&#10;&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TrainableTest.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Compare the input with a known good input.&#10; If you set ''trainingMode'' to true and provide inputs, then the&#10; inputs will be recorded in the ''correctValues'' parameters.&#10; Otherwise, the inputs will be compared against those in the&#10; ''correctValue'' parameter.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks based on the Ptolemy NonStrictTest actor by Paul Whitaker, Christopher Hylands, Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="The input value.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="False as long as there is data to compare against the input">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[605.0, 260.0]">
        </property>
        <property name="correctValues" class="ptolemy.data.expr.Parameter" value="{&quot;LocalStorage: key: a, value: apple, remove: false, toList: false&quot;, &quot;Using a storage directory of /tmp/XXXX&quot;, &quot;Inserting (Key,Value) = (a, apple)&quot;, &quot;LocalStorage: key: b, value: bed, remove: false, toList: false&quot;, &quot;Inserting (Key,Value) = (b, bed)&quot;, &quot;LocalStorage: key: c, value: car, remove: false, toList: false&quot;, &quot;Inserting (Key,Value) = (c, car)&quot;, &quot;LocalStorage: key: d, value: dog, remove: false, toList: false&quot;, &quot;Inserting (Key,Value) = (d, dog)&quot;, &quot;LocalStorage: key: e, value: eagle, remove: false, toList: false&quot;, &quot;Inserting (Key,Value) = (e, eagle)&quot;, &quot;LocalStorage: key: a, value: ace, remove: false, toList: false&quot;, &quot;Inserting (Key,Value) = (a, ace)&quot;, &quot;LocalStorage: key: c, value: , remove: false, toList: false&quot;, &quot;Retrieving Key: c, foundValue: car&quot;, &quot;LocalStorage: key: d, value: , remove: false, toList: false&quot;, &quot;Retrieving Key: d, foundValue: dog&quot;, &quot;LocalStorage: key: e, value: , remove: false, toList: false&quot;, &quot;Retrieving Key: e, foundValue: eagle&quot;, &quot;LocalStorage: key: a, value: , remove: false, toList: false&quot;, &quot;Retrieving Key: a, foundValue: ace&quot;}">
        </property>
        <property name="trainingMode" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Clock" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that spontaneously produces outputs once per time interval.&#10;//&#10;// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor utilities/Clock&#10; *  @parameter interval The interval between outputs in milliseconds.&#10; *  @output output Output for the counting sequence, of type number.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('interval', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.output('output', {&#10;        'type': 'number'&#10;    });&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;var count = 0;&#10;&#10;exports.initialize = function () {&#10;    count = 0;&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;&#10;    // Send an output and then call setInterval&#10;    thiz.send('output', count);&#10;    count += 1;&#10;    &#10;    handle = setInterval(function () {&#10;        thiz.send('output', count);&#10;        count += 1;&#10;    }, this.getParameter('interval'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearInterval(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Clock.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="Output for the counting sequence, of type number.">
            </property>
            <property name="interval (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The interval between outputs in milliseconds.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[27.0, 257.29019927978516]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="interval" class="ptolemy.data.expr.Parameter" value="100.0">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="GenerateKV" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/*global console, error, exports, readURL */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10; 	this.output('key', {&#10;        'type': 'string',&#10;    });&#10;    this.output('value', {&#10;        'type': 'string'&#10;    });&#10;    this.input('trigger');&#10;}&#10;&#10;var outputs = [ [&quot;a&quot;,&quot;apple&quot;], [&quot;b&quot;, &quot;bed&quot;], [&quot;c&quot;, &quot;car&quot;], [&quot;d&quot;, &quot;dog&quot;], [&quot;e&quot;, &quot;eagle&quot;], [&quot;a&quot;, &quot;ace&quot;], [&quot;c&quot;,&quot;&quot;], [&quot;d&quot;, &quot;&quot;], [&quot;e&quot;,&quot;&quot;], [&quot;a&quot;,&quot;&quot;] ];&#10;var count;&#10;exports.initialize = function() {&#10;	count = 0&#10;    this.addInputHandler('trigger', handleInputs.bind(this));&#10;}&#10;&#10;function handleInputs() {&#10;	this.send('value', outputs[count][1]);&#10;	this.send('key', outputs[count][0]);&#10;&#10;	count = count + 1;&#10;	if (count &gt;= outputs.length) {&#10;		count = 0;&#10;	}&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[147.0, 257.29019927978516]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="key" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="value" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="StringReplace" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/*global console, error, exports, readURL */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10; 	this.output('output', {&#10;        'type': 'string',&#10;    });&#10;    this.input('input');&#10;}&#10;&#10;exports.initialize = function() {&#10;    this.addInputHandler('input', handleInputs.bind(this));&#10;}&#10;&#10;function handleInputs() {&#10;	var inputValue = this.get('input');&#10;	this.send('output', inputValue.replace(/directory of \/tmp\/.*/, 'directory of /tmp/XXXX'));&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[485.0, 260.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="And" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Emit a true if all of the inputs have received a true.&#10; *  If the timeout is non-zero, then emit a true after the timeout.&#10; *&#10; *  This accessor is typically used to stop a model after all&#10; *  of the TrainableTest accessors have emitted a true.&#10; *&#10; *  @input input1 The first input&#10; *  @input input2 the second input&#10; *  @output output True if the inputs have seen true or if the&#10; *  timeout has occurred&#10; *  @param timeout If non-zero, the timeout in milliseconds.&#10; *  @author Christopher Brooks&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, exports*/&#10;/*jshint globalstrict: true*/&#10;/*jslint plusplus: true */&#10;'use strict';&#10;&#10;// After inputs appear on both inputs, generate a true output.&#10;var sawInput1 = false;&#10;var sawInput2 = false;&#10;&#10;exports.setup = function() {&#10;    this.input('input1');   &#10;    this.input('input2'); &#10;    this.output('output', {&#10;    	'type': 'boolean'&#10;    });&#10;    this.parameter('timeout');&#10;    &#10;    var self = this;&#10;    self.addInputHandler('input1', function() {&#10;    	self.sawInput1 = this.get('input1');&#10;    	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true) {&#10;    	    self.send('output', true);&#10;    	}&#10;    });&#10;    self.addInputHandler('input2', function() {&#10;	self.sawInput2 = this.get('input2');&#10; 	if (self.sawInput1 == true &amp;&amp; self.sawInput2 === true) {&#10;    	    self.send('output', true);&#10;    	}&#10;    });&#10;}&#10;&#10;exports.initialize = function() {&#10;    var self = this;&#10;&#10;    if (this.getParameter('timeout') &gt; 0) {&#10;        setTimeout(function () {&#10;	    console.log('JavaScriptBarrier: sending true after timeout.');&#10;	    self.send('output', true);&#10;        }, this.getParameter('timeout'));&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[695.0, 200.0]">
        </property>
        <property name="timeout" class="ptolemy.data.expr.Parameter">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="input1" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="input2" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Stop" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that stops execution of the enclosing swarmlet.&#10;//&#10;// Copyright (c) 2016-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor that stops execution of the enclosing swarmlet when it&#10; *  receives an input with value true. It does this by identifying&#10; *  the top-level enclosing composite accessor and invoking wrapup&#10; *  on it.&#10; *&#10; *  @accessor utilities/Stop&#10; *  @input {boolean} stop A signal with value true to stop the swarmlet.&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global  exports, require */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.input('stop', {&#10;        'type': 'boolean'&#10;    });&#10;};&#10;&#10;exports.initialize = function () {&#10;    this.addInputHandler('stop', function () {&#10;        var stop = this.get('stop');&#10;        if (stop) {&#10;            this.stop();&#10;        }&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Stop.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that stops execution of the enclosing swarmlet when it&#10; receives an input with value true. It does this by identifying&#10; the top-level enclosing composite accessor and invoking wrapup&#10; on it.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="stop (port)" class="ptolemy.kernel.util.StringAttribute" value="A signal with value true to stop the swarmlet.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[800.0, 200.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <port name="stop" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[230.0, 240.0]">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[247.0, 267.29019927978516]">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;GenerateKV.value&quot;,x=147.0,y=257.29019927978516}, tail={id=&quot;relation3.vertex1&quot;,x=247.0,y=267.29019927978516}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="{480.0, 175.0}">
        </vertex>
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;relation2.vertex1&quot;,x=480.0,y=175.0}, tail={id=&quot;TrainableTest.input&quot;,x=550.0,y=80.0}, points={480.0,80.0} },{ head={id=&quot;TextDisplay.input&quot;,x=550.0,y=175.0}, tail={id=&quot;relation2.vertex1&quot;,x=480.0,y=175.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[540.0, 260.0]">
        </vertex>
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="LocalStorage.key" relation="relation6"/>
    <link port="LocalStorage.value" relation="relation3"/>
    <link port="LocalStorage.trigger" relation="relation6"/>
    <link port="LocalStorage.result" relation="relation2"/>
    <link port="LocalStorage.debug" relation="relation"/>
    <link port="TextDisplay.input" relation="relation2"/>
    <link port="TextDisplay2.input" relation="relation4"/>
    <link port="TrainableTest.input" relation="relation2"/>
    <link port="TrainableTest.output" relation="relation7"/>
    <link port="TrainableTest2.input" relation="relation4"/>
    <link port="TrainableTest2.output" relation="relation8"/>
    <link port="Clock.output" relation="relation5"/>
    <link port="GenerateKV.key" relation="relation6"/>
    <link port="GenerateKV.value" relation="relation3"/>
    <link port="GenerateKV.trigger" relation="relation5"/>
    <link port="StringReplace.output" relation="relation4"/>
    <link port="StringReplace.input" relation="relation"/>
    <link port="And.input1" relation="relation7"/>
    <link port="And.input2" relation="relation8"/>
    <link port="And.output" relation="relation9"/>
    <link port="Stop.stop" relation="relation9"/>
</entity>
