<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="Heartbeat" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="10">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[72.5, 50.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={13, 80, 1070, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[836, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{418.0, 261.0}">
    </property>
    <property name="AccessorCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorCodeGenerator">
        <property name="codeDirectory" class="ptolemy.data.expr.FileParameter" value="$PTII/org/terraswarm/accessor/accessors/web/node_modules/@accessors-hosts/node">
        </property>
        <property name="runCommand" class="ptolemy.data.expr.StringParameter" value="@node@ nodeHostInvoke.js node_modules/@accessors-hosts/node/@modelName@">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[650.0, 215.0]">
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model implements a Heartbeat that phones home&#10;to a mothership website.&#10;&#10;The mothership portion is not present and this model&#10;requires a non-public key in $HOME/.ptKeystore/heartbeatKey&#10;&#10;If you have access to the TerraSwarm swarmbox repo, then&#10;get the key from swarmbox/heartbeat/key                                                                                &#10;&#10;See https://www.terraswarm.org/testbeds/wiki/Main/SwarmboxGitRepo                                                      &#10;&#10;To download the repo using a repo.eecs.berkeley.edu username and                                                       &#10;password (possibly different than your terraswarm website username                                                     &#10;and password):                                                                                                                                                                                                                                &#10;   git clone https://repo.eecs.berkeley.edu/git/projects/terraswarm/swarmbox.git                                        &#10; If you uploaded your SSH key to repo.eecs, then use:                                                                                                                                                                                     &#10;   git clone repoman@repo.eecs.berkeley.edu:projects/terraswarm/swarmbox.git  ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 180.0]">
        </property>
    </property>
    <property name="AccessorSSHCodeGenerator" class="ptolemy.cg.kernel.generic.accessor.AccessorSSHCodeGenerator">
        <property name="npmInstall" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="runForever" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="userHost" class="ptolemy.data.expr.StringParameter" value="sbuser@192.168.2.10">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[650.0, 300.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Christopher Brooks">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[25.0, 480.0]">
        </property>
    </property>
    <entity name="Heartbeat" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Send a heartbeat to a mothership monitoring web server.&#10; *&#10; * This accessor is not of much use because it requires the Mothership&#10; * server, which is not yet available.&#10; *&#10; * The Mothership server require a key string from the Heartbeat client.&#10; *&#10; * This accessor looks for key in $KEYSTORE/heartbeatKey, which&#10; * resolves to $HOME/.ptKeystore/heartbeatKey.&#10; *&#10; * The key is found in the swarmbox git repo, which not public.&#10; * Look for swarmbox/heartbeat/key&#10; * See https://www.terraswarm.org/testbeds/wiki/Main/SwarmboxGitRepo&#10; *&#10; * To download the repo using a repo.eecs.berkeley.edu username and&#10; * password (possibly different than your terraswarm website username&#10; * and password):&#10; *&#10; *   git clone https://repo.eecs.berkeley.edu/git/projects/terraswarm/swarmbox.git&#10; *&#10; * If you uploaded your SSH key to repo.eecs, then use:&#10; *&#10; *   git clone repoman@repo.eecs.berkeley.edu:projects/terraswarm/swarmbox.git&#10; *&#10; *  @accessor services/Heartbeat&#10; *  @author Christopher Brooks, based on heartbeat.js by Marten Lohstroh.&#10; *  @version $$Id$$&#10; *  @input {string} ipAddress The IP address of the host&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, console, error, exports, extend, get, getResource, input, output, parameter, require, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var http = require('@accessors-modules/http-client');&#10;var os = require('os');&#10;&#10;// Mothership expects the Heartbeat clients to use a key.&#10;var key = '';&#10;&#10;function Heartbeat() {&#10;    var heartbeat = {};&#10;    heartbeat.pingMothership = function () {&#10;        console.log(&quot;HeartBeat: pingMothership&quot;);&#10;        var config = {};&#10;        config.hostname = os.hostname();&#10;        config.timestamp_sent = Math.floor(new Date()); // in ms&#10;        var configString = JSON.stringify(config);&#10;        var headers = {&#10;            'Content-Type': 'application/json',&#10;            'Content-Length': configString.length&#10;        };&#10;&#10;        var url = {&#10;            host: 'terra.eecs.berkeley.edu',&#10;            port: 8088,&#10;            path: '/check-in?key=' + key,&#10;            protocol: 'https'&#10;        };&#10;        var options = {&#10;            url: url,&#10;            method: 'POST',&#10;            headers: headers,&#10;            rejectUnauthorized: false,&#10;            body: configString&#10;                // We're using a self-signed certificate at the moment.&#10;        };&#10;&#10;        // Prepare request handler.&#10;        var req = http.request(options, function (res) {&#10;            if (res === null) {&#10;                console.log(&quot;Heartbeat.pingMothership: request handler: res == null&quot;);&#10;                return;&#10;            }&#10;            console.log(&quot;Heartbeat.pingMothership: request handler: res = &quot; + res);&#10;            // //res.setEncoding('utf-8');&#10;            // var responseString = '';&#10;            // // Receive a response.&#10;            // res.on('data', function(data) {&#10;            //     responseString += data;&#10;            // });&#10;&#10;            // res.on('end', function() {&#10;            //     //console.log(responseString);&#10;            //     //console.log('Checked in...');&#10;            // });&#10;&#10;            // res.on('error', function(e) {&#10;            //     console.log('Unable to check in with server: ' + e);&#10;            // });&#10;        });&#10;&#10;        // Issue request.&#10;        // httpClient does this for us because the body is in the options.&#10;        //req.write(configString);&#10;        req.end();&#10;&#10;        req.on('error', function (e) {&#10;            console.log('Request problem: Unable to check in with server: ' + e);&#10;        });&#10;&#10;    };&#10;&#10;    return heartbeat;&#10;}&#10;&#10;/** Set up the accessor by defining the inputs and outputs.&#10; */&#10;exports.setup = function () {&#10;    this.input('ipAddress', {&#10;        type: &quot;string&quot;&#10;    });&#10;&#10;    // See the accessor comment for how to get the key.&#10;    var keyFile = '$KEYSTORE/heartbeatKey';&#10;    try {&#10;        key = getResource('$KEYSTORE/heartbeatKey', 1000).trim();&#10;    } catch (e) {&#10;        console.log('Heartbeat: Could not get ' + keyFile + &quot;:  &quot; + e +&#10;            '\nThe key is not public, so this accessor is only useful ' +&#10;            'If you have the key.  See ' +&#10;            'https://www.icyphy.org/accessors/library/index.html?accessor=services.Heartbeat');&#10;        key = 'ThisIsNotAPipeNorIsItAWorkingKeySeeTheHeartbeatAccessorDocs';&#10;    }&#10;};&#10;&#10;/** Initialize the accessor by attaching an input handler to the&#10; *  the *ipAddress* input.&#10; */&#10;exports.initialize = function () {&#10;    this.heartbeat = Heartbeat.call(this);&#10;    this.addInputHandler('ipAddress', this.heartbeat.pingMothership);&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/Heartbeat.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[405.0, 125.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Send a heartbeat to a mothership monitoring web server.&lt;/p&gt;&#10;&lt;p&gt;This accessor is not of much use because it requires the Mothership&#10;server, which is not yet available.&lt;/p&gt;&#10;&lt;p&gt;The Mothership server require a key string from the Heartbeat client.&lt;/p&gt;&#10;&lt;p&gt;This accessor looks for key in $KEYSTORE/heartbeatKey, which&#10;resolves to $HOME/.ptKeystore/heartbeatKey.&lt;/p&gt;&#10;&lt;p&gt;The key is found in the swarmbox git repo, which not public.&#10;Look for swarmbox/heartbeat/key&#10;See https://&lt;a href=&quot;http://www.terraswarm.org/testbeds/wiki/Main/SwarmboxGitRepo&quot;&gt;www.terraswarm.org/testbeds/wiki/Main/SwarmboxGitRepo&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt;To download the repo using a repo.eecs.berkeley.edu username and&#10;password (possibly different than your terraswarm website username&#10;and password):&lt;/p&gt;&#10;&lt;p&gt;  git clone https://repo.eecs.berkeley.edu/git/projects/terraswarm/swarmbox.git&lt;/p&gt;&#10;&lt;p&gt;If you uploaded your SSH key to repo.eecs, then use:&lt;/p&gt;&#10;&lt;p&gt;  git clone &lt;a href=&quot;mailto:repoman@repo.eecs.berkeley.edu&quot;&gt;repoman@repo.eecs.berkeley.edu&lt;/a&gt;:projects/terraswarm/swarmbox.git&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks, based on heartbeat.js by Marten Lohstroh.">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="ipAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The IP address of the host">
            </property>
        </property>
        <port name="ipAddress" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="IPAddress" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor outputs the IP address of the local machine.&#10; *&#10; *  @accessor net/IPAddress&#10; *  @author Elizabeth Latronico (beth@berkeley.edu), based on IPAddress actor&#10; *  by Christopher Brooks&#10; *  @input {boolean} trigger Send a token here to produce an output.&#10; *  @output {string} IPAddress The IP address of the local machine.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals error, exports, require */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;var discovery = require('@accessors-modules/discovery');&#10;// Initialize ds here, instead of in setup(), so that the ds object is defined&#10;// when the ds.on() function is encountered&#10;// But surround in a try-catch so that the browser host or any other host&#10;// that does not support the discovery module can proceed and at least read&#10;// the interface.&#10;var ds;&#10;try {&#10;    ds = new discovery.DiscoveryService();&#10;} catch (err) {&#10;    error('Failed to instantiate discovery service: ' + err);&#10;}&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;&#10;    this.input('trigger', {&#10;        type: 'boolean'&#10;    });&#10;&#10;    this.output('IPAddress', {&#10;        type: 'string'&#10;    });&#10;};&#10;&#10;/** Upon receiving a trigger input, output the host machine's IP address.&#10; */&#10;exports.initialize = function () {&#10;    var self = this;&#10;    this.addInputHandler('trigger', function () {&#10;        self.send('IPAddress', ds.getHostAddress());&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/IPAddress.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 125.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor outputs the IP address of the local machine.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Latronico (beth@berkeley.edu), based on IPAddress actor&#10; by Christopher Brooks">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Send a token here to produce an output.">
            </property>
            <property name="IPAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The IP address of the local machine.">
            </property>
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_type" class="ptolemy.actor.TypeAttribute" value="double">
            </property>
        </port>
        <port name="IPAddress" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="TestSpontaneous" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once per time interval.&#10;//&#10;// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneous&#10; *  @parameter interval The interval between outputs in milliseconds.&#10; *  @output output Output for the counting sequence, of type number.&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('interval', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.output('output', {&#10;        'type': 'number'&#10;    });&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;var count = 0;&#10;&#10;exports.initialize = function () {&#10;    count = 0;&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setInterval(function () {&#10;        thiz.send('output', count);&#10;        count += 1;&#10;    }, this.getParameter('interval'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearInterval(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneous.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[65.0, 125.0]">
        </property>
        <property name="DecoratorAttributesFor_AccessorCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorCodeGenerator">
            </property>
        </property>
        <property name="DecoratorAttributesFor_AccessorSSHCodeGenerator" class="ptolemy.kernel.util.DecoratorAttributes">
            <property name="decoratorName" class="ptolemy.kernel.util.StringAttribute" value="AccessorSSHCodeGenerator">
            </property>
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="interval (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The interval between outputs in milliseconds.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="Output for the counting sequence, of type number.">
            </property>
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;Heartbeat.ipAddress&quot;,x=405.0,y=125.0}, tail={id=&quot;IPAddress.IPAddress&quot;,x=240.0,y=125.0}, points={} } }">
        </property>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
        <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;IPAddress.trigger&quot;,x=240.0,y=125.0}, tail={id=&quot;TestSpontaneous.output&quot;,x=65.0,y=125.0}, points={} } }">
        </property>
    </relation>
    <link port="Heartbeat.ipAddress" relation="relation"/>
    <link port="IPAddress.trigger" relation="relation2"/>
    <link port="IPAddress.IPAddress" relation="relation"/>
    <link port="TestSpontaneous.output" relation="relation2"/>
</entity>
