<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="ScarabApriltagHueController" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={251, 152, 1067, 679}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[833, 569]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0000000000000062">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{186.0621905940597, 81.3501701732676}">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="Infinity">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[145.0, 15.0]">
        </property>
    </property>
    <entity name="RosSubscriber_tf" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) sock-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the&#10; *  WebSocketClient accessor to do so.&#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.&#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function () {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function () {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */&#10;exports.initialize = function () {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function () {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function () {&#10;&#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;,&#10;        fragmentCount = 0,&#10;        processMessage = function (message) {&#10;&#10;            //Check for missing fragment&#10;            if (fragmentCount !== message.num) {&#10;                console.error(&quot;Fragment &quot; +&#10;                    fragmentCount +&#10;                    &quot; of message is missing. Instead received fragment number &quot; +&#10;                    message.num);&#10;            }&#10;&#10;            //Accumulate data from fragment.&#10;            if (fragmentCount === 0) {&#10;                originalMessage = message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount &lt; message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount == message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount = 0;&#10;                return originalMessage;&#10;            } else {&#10;                console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;                return null;&#10;            }&#10;        };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function (message) {&#10;&#10;    var messageToSend;&#10;    if (this.getParameter('outputCompleteResponseOnly') &amp;&amp; message.op === &quot;fragment&quot;) {&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null) {&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/robotics/RosSubscriber.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/tf">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-55.0, 275.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the&#10; WebSocketClient accessor to do so.&#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="compression" class="ptolemy.data.expr.Parameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Hue2" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;//  FIXME: Allow an IP address to be dynamically provided.&#10;&#10;/** This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; *  To use it, you need to know the IP address of the Hue Bridge, which is&#10; *  unfortunately, somewhat hard to find out.  See below for some hints.&#10; *&#10; *  Upon initialization, this accessor will use the userName parameter to&#10; *  contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; *  engage in a dialog with the Bridge to create a new user. This will require&#10; *  the user to push the button on the Hue Bridge when the alert to do so appears.&#10; *  The assigned userName will be recorded in the userName parameter.&#10; *&#10; *  Upon authenticating with the Bridge, this accessor will output a data&#10; *  structure that reports all the lights that have been registered with the Bridge.&#10; *  These lights each have a number ID, such as '1'.  The state of each light&#10; *  will be reported in this output. The most important property of the state&#10; *  is the 'reachable' property. If this has value false, then the light is not&#10; *  reachable by the Bridge and therefore cannot be controlled.&#10; *&#10; *  The *commands* input is either a single command or an array of commands,&#10; *  where each command can have the following properties:&#10; *&#10; *  * id (required):  The id of the light to manipulate, which is a number.&#10; *  * on: true to turn on; false to turn off.&#10; *  * bri: Brightness.  0-255.&#10; *  * hue: Color, for bulbs that support color. This is a number in the&#10; *    range 0-65280.&#10; *  * xy: Two numbers between 0.0 and 1.0 in an array, e.g. [0.4, 0.4],&#10; *    specifying a color according to the image at&#10; *    https://www.developers.meethue.com/documentation/core-concepts&#10; *  * sat: Saturation, for bulbs that support color. This is a number in the&#10; *    range 0-255.&#10; *  * ct: Color temperature. This takes values in a scale called &quot;reciprocal&#10; *    megakelvin&quot; or &quot;mirek&quot;. Using this scale, the warmest color 2000K&#10; *    is 500 mirek (&quot;ct&quot;:500) and the coldest color 6500K is 153 mirek (&quot;ct&quot;:153).&#10; *  * transitiontime: The time in ms for the bulb to make the transition.&#10; *&#10; *&#10; *  Please see Hue docs for mapping colors to hue/saturation values:&#10; *  http://www.developers.meethue.com/documentation/core-concepts.&#10; *  &#10; *  Some common colors given as xy are (for a gammut B bulb):&#10; *  * orange:     [0.60, 0.38]&#10; *  * red:        [0.67, 0.32]&#10; *  * yellow:     [0.54, 0.42]&#10; *  * green:      [0.41, 0.52]&#10; *  * violet:     [0.17, 0.04]&#10; *  * blue:       [0.17, 0.05]&#10; *  * magenta:    [0.41, 0.18]&#10; *  * cool white: [0.28, 0.28]  (about 10,000 Kelvin)&#10; *  * warm white: [0.46, 0.41]  (about 2,700 Kelvin)&#10; *&#10; *&#10; *  If a light is not accessible, this accessor warns but does not error.&#10; *  In CapeCode, this results in a dialog box with a message.&#10; *  Sometimes Hue lights are transient (get unplugged, become temporarily&#10; *  disconnected) and may be valid in the future. Rather than terminating the&#10; *  model, we hope that the lights come back. A good practice is to use the&#10; *  lights output to determine which lights are reachable.&#10; *&#10; *  Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; *  The bridge acquires its address via DHCP, so the address will typically change&#10; *  each time the bridge is rebooted. Moreover, the address will likely not be&#10; *  accessible except on the local network.  The bridge responds to UPnP packets&#10; *  (universal plug-and-play), so it is possible to use software such as&#10; *  &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; *  Another option is to use the Discovery accessor and look for a device named&#10; *  philips-hue (or the name assigned to your bridge if assigned manually).&#10; *&#10; *  @accessor devices/Hue&#10; *  @input {JSON} commands JSON commands for the Hue, for example,&#10; *   {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *  @input probe Trigger production of a 'lights' output that gives the status of&#10; *   lights registered with this bridge.&#10; *  @output lights An object with one property for each light that is registered&#10; *   with the bridge. The name of the property is the light ID, an integer given as&#10; *   a string, and the value is an object with information about the light&#10; *   (manufacturer, modelid, name, state, etc.). The state property has a boolean&#10; *   'on' indicating whether the light is on and 'reachable' indicating whether the&#10; *   light is in communication with the bridge.&#10; *  @output assignedUserName {string} If a user name is automatically generated and&#10; *   registered with the bridge, then it will be sent on this output port.&#10; *  @output response The response from the bridge to a command.&#10; *  @parameter {string} bridgeIP The bridge IP address (and port, if needed).&#10; *  @parameter {string} userName The username for logging on to the Hue Bridge.&#10; *   This must be at least 11 characters, or the Hue regards it as invalid.&#10; *   A username will be automatically generated if none is available.&#10; *   The assigned user name will be sent on the assignedUserName output.&#10; *  @author Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals alert, clearTimeout, console, error, exports, httpRequest, require, setTimeout  */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var http = require('@accessors-modules/http-client');&#10;&#10;// Node Host needs util defined.&#10;var util = require('util');&#10;&#10;/** Define inputs and outputs. */&#10;exports.setup = function () {&#10;&#10;    this.input('commands');&#10;    this.input('probe');&#10;    &#10;    this.parameter('bridgeIP', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('userName', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;ptolemyuser&quot;&#10;    });&#10;    this.parameter('onWrapup', {&#10;        value: &quot;turn off&quot;,&#10;        type: &quot;string&quot;,&#10;        options: [&quot;none&quot;, &quot;restore&quot;, &quot;turn off&quot;]&#10;    });&#10;    this.output('lights', {&#10;        spontaneous: true&#10;    });&#10;    this.output('assignedUserName', {&#10;        type: &quot;string&quot;,&#10;        spontaneous: true&#10;    });&#10;    this.output('response', {&#10;        spontaneous: true&#10;    });&#10;};&#10;&#10;/** Define a Hue function using a variant of the Module pattern.  The function&#10; *  returns a hue object which offers a public connect() function.&#10; *  This will create an object with its own local state, allowing multiple&#10; *  Hue accessors to run concurrently without interfering with each other on&#10; *  hosts with a shared Javascript engine (such as the browser host).&#10; *&#10; *  An instance of the returned hue object implements the following public functions:&#10; *&#10; *  * connect(): Contact the bridge and register the user, if needed.  Add an&#10; *    input handler to the trigger input to submit commands to the bridge.&#10; *  * contactBridge(): Query the bridge for the status of lights registered with&#10; *    it. The status will be sent to the 'lights' output.&#10; *  * issueCommand():  Issue a command to the bridge.  A command is an object&#10; *    that may contain the following fields:&#10; *&#10; *    * id (required):  The id of the light to manipulate.&#10; *    * on: true to turn on; false to turn off.&#10; *    * bri: Brightness.  0-255.&#10; *    * hue: Hue (for bulbs that support color).  0-65280.&#10; *    * sat: Saturation (for bulbs that support color). 0-255.&#10; *    * transitiontime:  The delay before the bulb responds to the command.  In ms.&#10; *&#10; *  For example, {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}&#10; *&#10; */&#10;function Hue() {&#10;    var hue = {};&#10;&#10;    // Public variables.&#10;    hue.changedLights = [];&#10;    hue.lights = {};&#10;&#10;    // Private variables.&#10;    var authenticated = false;&#10;    var debug = true;&#10;    var handleRegisterUser;&#10;    var ipAddress = &quot;&quot;;&#10;    var maxRegisterAttempts = 10;&#10;    var maxRetries = 5;&#10;    var registerInterval = 5000;&#10;    var registerAttempts = 0;&#10;    var retryCount = 0;&#10;    var retryTimeout = 1000;&#10;    var timeout = 3000;&#10;    var url = &quot;&quot;;&#10;    var userName = &quot;&quot;;&#10;    var pendingCommands = [];&#10;    var alerted = false;&#10;    var errorOccurred = false;&#10;&#10;    // Use self in contained functions so the caller does not have to bind &quot;this&quot;&#10;    // on each function call.&#10;    var self = this;&#10;&#10;    // Public functions.&#10;    // Available to be used for e.g. inputHandlers.&#10;&#10;    /** Utility function to check that an object is a nonempty array.&#10;     *  @param obj The object.&#10;     */&#10;    function isNonEmptyArray(obj) {&#10;        return (obj instanceof Array &amp;&amp; obj.length &gt; 0);&#10;    }&#10;&#10;    var bridgeRequestErrorHandler;&#10;    var registerUser;&#10;&#10;    /** Contact the bridge and send to the 'lights' output the status of all&#10;     *  lights registered with the bridge.  Register the user, if needed.&#10;     */&#10;    hue.contactBridge = function() {&#10;        console.log(&quot;Attempting to connect to: &quot; + url + &quot;/&quot; + userName + &quot;/lights/&quot;);&#10;        var bridgeRequest = http.get(url + &quot;/&quot; + userName + &quot;/lights/&quot;, function (response) {&#10;            if (response !== null) {&#10;                console.log(&quot;Got a response from the bridge: &quot; + response.body);&#10;                if (errorOccurred) {&#10;                    // Fatal error has occurred. Ignore response.&#10;                    self.error('Error occurred before response arrive. Response ignored');&#10;                    return;&#10;                }&#10;                if (response.statusCode !== 200) {&#10;                    // Response is other than OK. Retry if not a fatal error.&#10;                    bridgeRequestErrorHandler(response.statusMessage);&#10;                } else {&#10;                    var lights = JSON.parse(response.body);&#10;&#10;                    if (isNonEmptyArray(lights) &amp;&amp; lights[0].error) {&#10;                        var description = lights[0].error.description;&#10;&#10;                        if (description.match(&quot;unauthorized user&quot;)) {&#10;                            // Add this user.&#10;                            // Prevent the alert from coming up more than once.&#10;                            alerted = true;&#10;                            alert(userName + &quot; is not a registered user.\n&quot; +&#10;                                &quot;Push the link button on the Hue bridge to register.&quot;);&#10;                            // Oddly, the invalid userName, which has the right form,&#10;                            // is not an acceptable parameter value. Since it is invalid&#10;                            // anyway, discard it and replace.&#10;                            userName = 'ptolemyuser';&#10;                            // It takes two successive posts to register a new user.&#10;                            // Issue the first one now, then attempt again later.&#10;                            registerUser();&#10;                            console.log(&quot;Will register user in &quot; + registerInterval + &quot; ms&quot;);&#10;                            handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                        } else {&#10;                            console.error('Error occurred when trying to get Hue light status:' + description);&#10;                            self.error(description);&#10;                            errorOccurred = true;&#10;                        }&#10;                    } else if (lights) {&#10;                        console.log(&quot;Authenticated!&quot;);&#10;                        authenticated = true;&#10;&#10;                        // Process any previously queued requests.&#10;                        if (pendingCommands) {&#10;                            for (var i = 0; i &lt; pendingCommands.length; i++) {&#10;                                hue.processCommands(pendingCommands[i]);&#10;                            }&#10;                            pendingCommands = [];&#10;                        }&#10;                        hue.lights = lights;&#10;                        self.send('lights', lights);&#10;                    }&#10;                }&#10;            } else {&#10;                self.error(&quot;Unable to connect to bridge.&quot;);&#10;                errorOccurred = true;&#10;            }&#10;        });&#10;    }&#10;&#10;    /** Contact the bridge and register the user, if needed. */&#10;    hue.connect = function () {&#10;        ipAddress = self.getParameter('bridgeIP');&#10;        userName = self.getParameter('userName');&#10;&#10;        if (userName.length &lt; 11) {&#10;            throw &quot;Username too short. Hue only accepts usernames that contain at least 11 characters.&quot;;&#10;        }&#10;&#10;        if (ipAddress === null || ipAddress.trim() === &quot;&quot;) {&#10;            throw &quot;No IP Address is given for the Hue Bridge.&quot;;&#10;        }&#10;&#10;        url = &quot;http://&quot; + ipAddress + &quot;/api&quot;;&#10;&#10;        hue.contactBridge();&#10;    };&#10;&#10;    /** Issue a command to the bridge.  Commands are queued if not yet authenticated. */&#10;    hue.issueCommand = function () {&#10;        if (errorOccurred) {&#10;            return;&#10;        }&#10;        var commands = self.get('commands');&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: issueCommand(): &quot; + util.inspect(commands));&#10;        }&#10;&#10;        // (Re)connect with the bridge&#10;        if (ipAddress !== self.getParameter('bridgeIP') ||&#10;            userName !== self.getParameter('userName')) {&#10;            console.log(&quot;New bridge parameters detected. Need to re-authenticate.&quot;);&#10;            authenticated = false;&#10;            hue.connect();&#10;        }&#10;&#10;        // If not yet connected, queue the command.&#10;        if (!authenticated) {&#10;            console.log(&quot;Not authenticated; queueing command.&quot;);&#10;            pendingCommands.push(commands);&#10;            return;&#10;        }&#10;        hue.processCommands(commands);&#10;    };&#10;&#10;    /** Utility function to limit the range of a number&#10;     *  and to force it to be an integer. If the value argument&#10;     *  is a string, then it will be converted to a Number.&#10;     *  @param value The value to limit.&#10;     *  @param low The low value.&#10;     *  @param high The high value.&#10;     */&#10;    function limit(value, low, high) {&#10;        var parsed = parseInt(value, 10);&#10;        if (typeof parsed === 'undefined') {&#10;            parsed = parseFloat(value);&#10;            if (typeof parsed === 'undefined') {&#10;                self.error(&quot;Expected a number between &quot; + low + &quot; and &quot; + high + &quot;, but got &quot; + value);&#10;                return 0;&#10;            } else {&#10;                parsed = Math.floor(parsed);&#10;            }&#10;        }&#10;        if (parsed &lt; low) {&#10;            return low;&#10;        } else if (parsed &gt; high) {&#10;            return high;&#10;        } else {&#10;            return parsed;&#10;        }&#10;    }&#10;&#10;    /** If the response indicates an error, report it.&#10;     *  Return true if the response is an error.&#10;     */&#10;    hue.reportIfError = function (response) {&#10;        var body = response.body;&#10;        if (typeof body == &quot;string&quot;) {&#10;            body = JSON.parse(body);&#10;        }&#10;        if (isNonEmptyArray(body) &amp;&amp; body[0].error) {&#10;            self.error(&quot;Server responds with error: &quot; +&#10;                body[0].error.description);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /** Process the specified commands. The argument can be a single object&#10;     *  with properties for the command, or an array of such objects.&#10;     */&#10;    hue.processCommands = function (commands) {&#10;        if (typeof commands === 'string') {&#10;            commands = JSON.parse(commands);&#10;        }&#10;        if (debug) {&#10;            console.log(&quot;Hue.js: processCommands() commands: &quot; + util.inspect(commands));&#10;        }&#10;        // Accept both arrays and non-arrays.&#10;        // The following concatenates the input with an empty array, ensuring the result&#10;        // is an array.&#10;        commands = [].concat(commands);&#10;&#10;        // Iterate over commands (assuming input is an array of commands)&#10;        for (var i = 0; i &lt; commands.length; i++) {&#10;            var command = {};&#10;            if (typeof commands[i] === 'string') {&#10;                commands[i] = JSON.parse(commands);&#10;            }&#10;            var lightID = commands[i].id;&#10;&#10;            // Check whether input is valid&#10;            if (typeof lightID === 'undefined') {&#10;                self.error(&quot;Invalid command (no light id): &quot; + commands[i]);&#10;            } else {&#10;&#10;                // Keep track of changed lights to turn off during wrap up.&#10;                if (hue.changedLights.indexOf(lightID) == -1) {&#10;                    hue.changedLights.push(lightID);&#10;                }&#10;&#10;                // Pack properties into object&#10;                if (typeof commands[i].on !== 'undefined') {&#10;                    command.on = commands[i].on;&#10;                }&#10;                if (typeof commands[i].bri !== 'undefined') {&#10;                    command.bri = limit(commands[i].bri, 0, 255);&#10;                }&#10;                if (typeof commands[i].hue !== 'undefined') {&#10;                    command.hue = limit(commands[i].hue, 0, 65280);&#10;                }&#10;                if (typeof commands[i].sat !== 'undefined') {&#10;                    command.sat = limit(commands[i].sat, 0, 255);&#10;                }&#10;                if (typeof commands[i].transitiontime !== 'undefined') {&#10;                    command.transitiontime = commands[i].transitiontime;&#10;                }&#10;                if (typeof commands[i].xy !== 'undefined') {&#10;                    command.xy = commands[i].xy;&#10;                }&#10;                if (typeof commands[i].ct !== 'undefined') {&#10;                    command.ct = commands[i].ct;&#10;                }&#10;            }&#10;&#10;            if (Object.keys(command).length &lt; 1) {&#10;                self.error(&quot;Invalid command (no properties): &quot; + JSON.stringify(commands[i]));&#10;            } else {&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands() command: &quot; + JSON.stringify(command));&#10;                }&#10;                var options = {&#10;                    body: JSON.stringify(command),&#10;                    timeout: 10000,&#10;                    url: url + &quot;/&quot; + userName + &quot;/lights/&quot; + encodeURIComponent(lightID) + &quot;/state/&quot;&#10;                };&#10;                if (debug) {&#10;                    console.log(&quot;Hue.js: processCommands(): PUT request: options: &quot; + JSON.stringify(options));&#10;                }&#10;                http.put(options, function (response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js: processCommands(): response status: &quot; + response.statusMessage);&#10;                        console.log(&quot;Hue.js: processCommands(): response body: &quot; + response.body);&#10;                    }&#10;                    self.send('response', response);&#10;                    hue.reportIfError(response);&#10;                });&#10;            }&#10;        }&#10;    };&#10;&#10;    // Private functions.&#10;&#10;    /** Handle an error. This will report it on the console and then retry a&#10;     *  fixed number of times before giving up.  A retry is a re-invocation of&#10;     *  registerUser().&#10;     */&#10;    bridgeRequestErrorHandler = function (err) {&#10;        // FIXME: We should do a UPnP discovery here and find a bridge.&#10;        // Could not connect to the bridge&#10;        console.error('Error connecting to Hue Bridge:');&#10;        console.error(err);&#10;        if (retryCount &lt; maxRetries) {&#10;            console.log('Will retry');&#10;            retryCount++;&#10;            setTimeout(hue.contactBridge, retryTimeout);&#10;        } else {&#10;            self.error('Could not reach the Hue Bridge at ' + url +&#10;                ' after ' + retryCount + ' attempts.');&#10;            errorOccurred = true;&#10;        }&#10;    };&#10;&#10;    /** Register a new user.&#10;     *  This function repeats at registerInterval until successful or until&#10;     *  maxRegisterAttempts.  Some wait time is given between attempts for the&#10;     *  user to click the button on the Hue bridge.&#10;     */&#10;    registerUser = function () {&#10;&#10;        // Should be of the format {&quot;devicetype&quot;:&quot;my_hue_app#iphone peter&quot;}&#10;        // http://www.developers.meethue.com/documentation/getting-started&#10;        // (free registration required).&#10;        var registerData = {&#10;            devicetype: &quot;hue_accessor#&quot; + userName&#10;        };&#10;        var options = {&#10;            body: JSON.stringify(registerData),&#10;            timeout: 10000,&#10;            url: url&#10;        };&#10;        http.post(options, function (response) {&#10;            var rsp = JSON.parse(response.body);&#10;            if (debug) {&#10;                console.log(&quot;Hue.js registerUser(): Response &quot; + JSON.stringify(rsp));&#10;            }&#10;            if (isNonEmptyArray(rsp) &amp;&amp; rsp[0].error) {&#10;&#10;                var description = rsp[0].error.description;&#10;&#10;                if (description.match(&quot;link button not pressed&quot;) ||&#10;                    description.match(&quot;invalid value&quot;)) {&#10;                    // Retry registration for the given number of attempts.&#10;                    console.log(&quot;Please push the link button on the Hue bridge.&quot;);&#10;                    registerAttempts++;&#10;&#10;                    if (registerAttempts &lt; maxRegisterAttempts) {&#10;                        handleRegisterUser = setTimeout(registerUser, registerInterval);&#10;                    } else {&#10;                        errorOccurred = true;&#10;                        throw &quot;Failed to create user after &quot; + registerAttempts +&#10;                            &quot; attempt(s).&quot;;&#10;                    }&#10;                    return;&#10;                } else {&#10;                    errorOccurred = true;&#10;                    throw description;&#10;                }&#10;            } else if ((isNonEmptyArray(rsp) &amp;&amp; rsp[0].success)) {&#10;                authenticated = true;&#10;&#10;                // The bridge will return a username.  Save it.&#10;                userName = rsp[0].success.username;&#10;                self.setParameter('userName', userName);&#10;                self.send('assignedUserName', userName);&#10;                if (handleRegisterUser !== null) {&#10;                    clearTimeout(handleRegisterUser);&#10;                }&#10;                // contact the bridge and find the available lights&#10;                hue.contactBridge();&#10;            } else {&#10;                throw &quot;Unknown error registering new user&quot;;&#10;            }&#10;        });&#10;    };&#10;&#10;    return hue;&#10;}&#10;&#10;/** Add an input handler to react to commands.&#10; *  Commands will be ignored until the user is authenticated.&#10; *  If a bridge IP address has been given, contact the bridge to check if it is&#10; *  present.  Next, register the user if not already registered.&#10; */&#10;exports.initialize = function () {&#10;    // Call the Hue function binding &quot;this&quot;, to create local state variables&#10;    // while providing access to accessor functions.&#10;    // Setting &quot;this.hue&quot; makes hue available in other accessor functions, e.g.&#10;    // initialize().&#10;    // TODO:  Test with two accessors to make sure each has separate state.&#10;    this.hue = Hue.call(this);&#10;&#10;    // FIXME:  We need a way to dynamically supply the IP address.&#10;    // Recommend using a separate port.&#10;    this.addInputHandler('commands', this.hue.issueCommand);&#10;    this.addInputHandler('probe', this.hue.contactBridge);&#10;    this.hue.connect();&#10;};&#10;&#10;/** Turn off changed lights on wrapup. */&#10;exports.wrapup = function () {&#10;    var action = this.getParameter('onWrapup'),&#10;        cmd = JSON.stringify({&#10;            on: false&#10;        }),&#10;        debug = false,&#10;        errorLights = [],&#10;        options = {};&#10;&#10;    if (action !== &quot;none&quot;) {&#10;        // wrapup() gets called by the code generator after setting&#10;        // the types, so there is a chance that changedLights has not been set.&#10;        if (typeof this.hue !== 'undefined' &amp;&amp; typeof this.hue.changedLights !== 'undefined') {&#10;&#10;            for (var i = 0; i &lt; this.hue.changedLights.length; i++) {&#10;                options = {&#10;                    body: cmd,&#10;                    timeout: 10000,&#10;                    url: &quot;http://&quot; + this.get(&quot;bridgeIP&quot;) + &quot;/api/&quot; +&#10;                        this.getParameter(&quot;userName&quot;) + &quot;/lights/&quot; + this.hue.changedLights[i] +&#10;                        &quot;/state/&quot;&#10;                };&#10;&#10;                var self = this;&#10;&#10;                http.put(options, function (response) {&#10;                    if (debug) {&#10;                        console.log(&quot;Hue.js wrapup(): Response &quot; + JSON.stringify(response));&#10;                    }&#10;                    if (self.hue.reportIfError(response)) {&#10;                        errorLights.push(this.lightID);&#10;                    }&#10;                });&#10;            }&#10;        }&#10;        if (errorLights.length !== 0) {&#10;            error(&quot;Error turning off lights &quot; + errorLights.toString());&#10;        }&#10;    }&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/devices/Hue.js">
        </property>
        <property name="bridgeIPAddress" class="ptolemy.actor.parameters.PortParameter" value="&quot;192.168.131.17&quot;">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="userName" class="ptolemy.data.expr.StringParameter" value="ptolemyuser">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="lightID" class="ptolemy.actor.parameters.PortParameter" value="1">
        </property>
        <property name="brightness" class="ptolemy.actor.parameters.PortParameter" value="255">
        </property>
        <property name="hue" class="ptolemy.actor.parameters.PortParameter" value="20860.0">
        </property>
        <property name="saturation" class="ptolemy.actor.parameters.PortParameter" value="255">
        </property>
        <property name="on" class="ptolemy.actor.parameters.PortParameter" value="false">
        </property>
        <property name="transitionTime" class="ptolemy.actor.parameters.PortParameter" value="4">
        </property>
        <property name="trigger" class="ptolemy.actor.parameters.PortParameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[510.0, 135.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; To use it, you need to know the IP address of the Hue Bridge, which is&#10; unfortunately, somewhat hard to find out.  See below for some hints.&lt;/p&gt;&#10;&lt;p&gt; Upon initialization, this accessor will use the userName parameter to&#10; contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; engage in a dialog with the Bridge to create a new user. This will require&#10; the user to push the button on the Hue Bridge when the alert to do so appears.&#10; The assigned userName will be recorded in the userName parameter.&lt;/p&gt;&#10;&lt;p&gt; Upon authenticating with the Bridge, this accessor will output a data&#10; structure that reports all the lights that have been registered with the Bridge.&#10; These lights each have a number ID, such as '1'.  The state of each light&#10; will be reported in this output. The most important property of the state&#10; is the 'reachable' property. If this has value false, then the light is not&#10; reachable by the Bridge and therefore cannot be controlled.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;commands&lt;/em&gt; input is either a single command or an array of commands,&#10; where each command can have the following properties:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;id (required):  The id of the light to manipulate, which is a number.&lt;/li&gt;&#10;&lt;li&gt;on: true to turn on; false to turn off.&lt;/li&gt;&#10;&lt;li&gt;bri: Brightness.  0-255.&lt;/li&gt;&#10;&lt;li&gt;hue: Color, for bulbs that support color. This is a number in the&#10;range 0-65280.&lt;/li&gt;&#10;&lt;li&gt;xy: Two numbers between 0.0 and 1.0 in an array, e.g. [0.4, 0.4],&#10;specifying a color according to the image at&#10;https://&lt;a href=&quot;http://www.developers.meethue.com/documentation/core-concepts&quot;&gt;www.developers.meethue.com/documentation/core-concepts&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;sat: Saturation, for bulbs that support color. This is a number in the&#10;range 0-255.&lt;/li&gt;&#10;&lt;li&gt;ct: Color temperature. This takes values in a scale called &amp;quot;reciprocal&#10;megakelvin&amp;quot; or &amp;quot;mirek&amp;quot;. Using this scale, the warmest color 2000K&#10;is 500 mirek (&amp;quot;ct&amp;quot;:500) and the coldest color 6500K is 153 mirek (&amp;quot;ct&amp;quot;:153).&lt;/li&gt;&#10;&lt;li&gt;transitiontime: The time in ms for the bulb to make the transition.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; Please see Hue docs for mapping colors to hue/saturation values:&#10; http://&lt;a href=&quot;http://www.developers.meethue.com/documentation/core-concepts&quot;&gt;www.developers.meethue.com/documentation/core-concepts&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt; Some common colors given as xy are (for a gammut B bulb):&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;orange:     [0.60, 0.38]&lt;/li&gt;&#10;&lt;li&gt;red:        [0.67, 0.32]&lt;/li&gt;&#10;&lt;li&gt;yellow:     [0.54, 0.42]&lt;/li&gt;&#10;&lt;li&gt;green:      [0.41, 0.52]&lt;/li&gt;&#10;&lt;li&gt;violet:     [0.17, 0.04]&lt;/li&gt;&#10;&lt;li&gt;blue:       [0.17, 0.05]&lt;/li&gt;&#10;&lt;li&gt;magenta:    [0.41, 0.18]&lt;/li&gt;&#10;&lt;li&gt;cool white: [0.28, 0.28]  (about 10,000 Kelvin)&lt;/li&gt;&#10;&lt;li&gt;warm white: [0.46, 0.41]  (about 2,700 Kelvin)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; If a light is not accessible, this accessor warns but does not error.&#10; In CapeCode, this results in a dialog box with a message.&#10; Sometimes Hue lights are transient (get unplugged, become temporarily&#10; disconnected) and may be valid in the future. Rather than terminating the&#10; model, we hope that the lights come back. A good practice is to use the&#10; lights output to determine which lights are reachable.&lt;/p&gt;&#10;&lt;p&gt; Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; The bridge acquires its address via DHCP, so the address will typically change&#10; each time the bridge is rebooted. Moreover, the address will likely not be&#10; accessible except on the local network.  The bridge responds to UPnP packets&#10; (universal plug-and-play), so it is possible to use software such as&#10; &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; Another option is to use the Discovery accessor and look for a device named&#10; philips-hue (or the name assigned to your bridge if assigned manually).&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The username for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.&#10;  A username will be automatically generated if none is available.&#10;  The assigned user name will be sent on the assignedUserName output.">
            </property>
            <property name="bridgeIPAddress (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lightID (port)" class="ptolemy.kernel.util.StringAttribute" value="The light identifier (an integer beginning with 1).">
            </property>
            <property name="brightness (port)" class="ptolemy.kernel.util.StringAttribute" value="The brightness (an integer between 0 and 255).">
            </property>
            <property name="hue (port)" class="ptolemy.kernel.util.StringAttribute" value="The hue (an integer between 0 and 62580).">
            </property>
            <property name="saturation (port)" class="ptolemy.kernel.util.StringAttribute" value="The saturation (an integer between 0 and 255).">
            </property>
            <property name="transitionTime (port)" class="ptolemy.kernel.util.StringAttribute" value="The transition time, in multiples of 100ms.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="Triggers a PUT request with all the light settings. Can be any type.">
            </property>
            <property name="on (port)" class="ptolemy.kernel.util.StringAttribute" value="Whether the light is on (true) or off (false).">
            </property>
            <property name="commands (port)" class="ptolemy.kernel.util.StringAttribute" value="JSON commands for the Hue, for example,&#10;  {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}">
            </property>
            <property name="bridgeIP (port)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="lights (port)" class="ptolemy.kernel.util.StringAttribute" value="An object with one property for each light that is registered&#10;  with the bridge. The name of the property is the light ID, an integer given as&#10;  a string, and the value is an object with information about the light&#10;  (manufacturer, modelid, name, state, etc.). The state property has a boolean&#10;  'on' indicating whether the light is on and 'reachable' indicating whether the&#10;  light is in communication with the bridge.">
            </property>
            <property name="assignedUserName (port)" class="ptolemy.kernel.util.StringAttribute" value="If a user name is automatically generated and&#10;  registered with the bridge, then it will be sent on this output port.">
            </property>
            <property name="bridgeIP (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The bridge IP address (and port, if needed).">
            </property>
            <property name="probe (port)" class="ptolemy.kernel.util.StringAttribute" value="Trigger production of a 'lights' output that gives the status of&#10;  lights registered with this bridge.">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="The response from the bridge to a command.">
            </property>
        </property>
        <property name="bridgeIP" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="onWrapup" class="ptolemy.data.expr.Parameter" value="turn off">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="bridgeIPAddress" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="brightness" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="hue" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="saturation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="on" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="transitionTime" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="commands" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="lights" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="assignedUserName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="probe" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <entity name="RosSubscriber_tag_detections_mapped" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) sock-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the&#10; *  WebSocketClient accessor to do so.&#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.&#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function () {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function () {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */&#10;exports.initialize = function () {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function () {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function () {&#10;&#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;,&#10;        fragmentCount = 0,&#10;        processMessage = function (message) {&#10;&#10;            //Check for missing fragment&#10;            if (fragmentCount !== message.num) {&#10;                console.error(&quot;Fragment &quot; +&#10;                    fragmentCount +&#10;                    &quot; of message is missing. Instead received fragment number &quot; +&#10;                    message.num);&#10;            }&#10;&#10;            //Accumulate data from fragment.&#10;            if (fragmentCount === 0) {&#10;                originalMessage = message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount &lt; message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount == message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount = 0;&#10;                return originalMessage;&#10;            } else {&#10;                console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;                return null;&#10;            }&#10;        };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function (message) {&#10;&#10;    var messageToSend;&#10;    if (this.getParameter('outputCompleteResponseOnly') &amp;&amp; message.op === &quot;fragment&quot;) {&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null) {&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/robotics/RosSubscriber.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/tag_detections_mapped">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-185.0, 200.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the&#10; WebSocketClient accessor to do so.&#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="compression" class="ptolemy.data.expr.Parameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="RosSubscriber_moveResult" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) sock-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the&#10; *  WebSocketClient accessor to do so.&#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.&#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function () {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function () {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */&#10;exports.initialize = function () {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function () {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function () {&#10;&#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;,&#10;        fragmentCount = 0,&#10;        processMessage = function (message) {&#10;&#10;            //Check for missing fragment&#10;            if (fragmentCount !== message.num) {&#10;                console.error(&quot;Fragment &quot; +&#10;                    fragmentCount +&#10;                    &quot; of message is missing. Instead received fragment number &quot; +&#10;                    message.num);&#10;            }&#10;&#10;            //Accumulate data from fragment.&#10;            if (fragmentCount === 0) {&#10;                originalMessage = message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount &lt; message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount == message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount = 0;&#10;                return originalMessage;&#10;            } else {&#10;                console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;                return null;&#10;            }&#10;        };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function (message) {&#10;&#10;    var messageToSend;&#10;    if (this.getParameter('outputCompleteResponseOnly') &amp;&amp; message.op === &quot;fragment&quot;) {&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null) {&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/robotics/RosSubscriber.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/move/result">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-85.0, 35.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the&#10; WebSocketClient accessor to do so.&#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="compression" class="ptolemy.data.expr.Parameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="RosSubscriber_pose" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) sock-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; *  It communicates to ROS through the rosbridge web socket, and extends the&#10; *  WebSocketClient accessor to do so.&#10; *  It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; *  The other parameters configure how the data is to be received according&#10; *  to the rosbridge specification:&#10; *  https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&#10; *&#10; *  @accessor robotics/RosSubscriber&#10; *  @parameter {string} topic The ROS topic to subscribe to.&#10; *  @parameter {int} throttleRate The minimum amount of time (in ms)&#10; *   that must elapse between messages sent. Defaults to 0.&#10; *  @parameter {int} queueLength The ROS size of the queue to buffer messages.&#10; *   Messages are buffered as a result of the throttleRate. Defaults to 1.&#10; *  @parameter {int} fragment_size The maximum size that a message can take&#10; *   before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10; *   model if fragment size is too large (not sure what the maximum is).&#10; *  @parameter {string} compression A string to specify the compression&#10; *   scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.&#10; *  @parameter {boolean} outputCompleteResponseOnly A flag which if set to true&#10; *   will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10; *   until it has concatenated the data fields from message fragments back into&#10; *   the original unfragmented message. Otherwise it will send the message&#10; *   fragments as they come in.&#10; *  @output {boolean} connected The status of the web socket connection.&#10; *  @output {JSON} received The data received from the web socket server.&#10; *  @author Marcus Pan, Matt Weber&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals console, getParameter, exports, extend, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs, outputs and parameters from setup() in WebSocketClient.&lt;br&gt;&#10; *  Adds a 'topic' input which is the ROS topic to subscribe to. */&#10;exports.setup = function () {&#10;&#10;    this.extend('net/WebSocketClient');&#10;&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;    this.parameter('throttleRate', {&#10;        type: &quot;int&quot;,&#10;        value: 0&#10;    });&#10;    this.parameter('queueLength', {&#10;        type: &quot;int&quot;,&#10;        value: 10&#10;    });&#10;    this.parameter('fragmentSize', {&#10;        type: &quot;int&quot;,&#10;        value: 10000&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        type: &quot;boolean&quot;,&#10;        value: true&#10;    });&#10;    this.parameter('compression', {&#10;        type: &quot;string&quot;,&#10;        value: 'none'&#10;    });&#10;};&#10;&#10;/** Overrides the toSendInputHandler to throw an error if called.&#10; *  A subscriber should not be publishing inputs.&#10; */&#10;exports.toSendInputHandler = function () {&#10;    console.error('This is a subscriber and does not take input to publish.');&#10;};&#10;&#10;/** Inherits initialize from webSocketClient.&#10; *  Sends a message to rosbridge to start subscribing to the topic on input 'topic'.&#10; */&#10;exports.initialize = function () {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    this.exports.sendToWebSocket.call(this, {&#10;        &quot;op&quot;: &quot;subscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;throttle_rate&quot;: this.getParameter('throttleRate'),&#10;        &quot;queue_length&quot;: this.getParameter('queueLength'),&#10;        &quot;fragment_size&quot;: this.getParameter('fragmentSize'),&#10;        &quot;compression&quot;: this.getParameter('compression')&#10;    });&#10;};&#10;&#10;/** Unsubscribe from the topic. Close websocket connections by calling wrapup of WebSocketClient */&#10;exports.wrapup = function () {&#10;    var unsubscribe = {&#10;        &quot;op&quot;: &quot;unsubscribe&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unsubscribe);&#10;    this.exports.ssuper.wrapup.call(this);&#10;};&#10;&#10;//Combines fragments into the original message. If the message is incomplete this function&#10;//returns null. When the entire message has been received it returns the whole message.&#10;exports.defragmentMessage = (function () {&#10;&#10;    //This closure remembers the number and content of fragments already seen.&#10;    var originalMessage = &quot;&quot;,&#10;        fragmentCount = 0,&#10;        processMessage = function (message) {&#10;&#10;            //Check for missing fragment&#10;            if (fragmentCount !== message.num) {&#10;                console.error(&quot;Fragment &quot; +&#10;                    fragmentCount +&#10;                    &quot; of message is missing. Instead received fragment number &quot; +&#10;                    message.num);&#10;            }&#10;&#10;            //Accumulate data from fragment.&#10;            if (fragmentCount === 0) {&#10;                originalMessage = message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount &lt; message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount += 1;&#10;                return null;&#10;            } else if (fragmentCount == message.total - 1) {&#10;                originalMessage += message.data;&#10;                fragmentCount = 0;&#10;                return originalMessage;&#10;            } else {&#10;                console.error(&quot;Error in reconstructing fragments. Fragment count exceeds indicated total.&quot;);&#10;                return null;&#10;            }&#10;        };&#10;    return processMessage;&#10;})();&#10;&#10;&#10;exports.onMessage = function (message) {&#10;&#10;    var messageToSend;&#10;    if (this.getParameter('outputCompleteResponseOnly') &amp;&amp; message.op === &quot;fragment&quot;) {&#10;        messageToSend = this.defragmentMessage(message);&#10;        if (messageToSend === null) {&#10;            return;&#10;        }&#10;    } else {&#10;        messageToSend = message;&#10;    }&#10;&#10;    this.send('received', messageToSend);&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/robotics/RosSubscriber.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="1000">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/pose">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-125.0, 125.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor subscribes to a pre-established ROS topic.&lt;br&gt;&#10; It communicates to ROS through the rosbridge web socket, and extends the&#10; WebSocketClient accessor to do so.&#10; It has a 'topic' parameter, that must be prefixed with a '/' eg: '/noise'.&lt;br&gt;.&#10; The other parameters configure how the data is to be received according&#10; to the rosbridge specification:&#10; https://github.com/RobotWebTools/rosbridge_suite/blob/develop/ROSBRIDGE_PROTOCOL.md#344-subscribe&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan, Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to subscribe to.">
            </property>
            <property name="toSend" class="ptolemy.kernel.util.StringAttribute" value="The data to be send to the web socket server, in JSON format.">
            </property>
            <property name="connected (port)" class="ptolemy.kernel.util.StringAttribute" value="The status of the web socket connection.">
            </property>
            <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" value="The data received from the web socket server.">
            </property>
            <property name="throttleRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The minimum amount of time (in ms)&#10;  that must elapse between messages sent. Defaults to 0.">
            </property>
            <property name="queueLength (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS size of the queue to buffer messages.&#10;  Messages are buffered as a result of the throttleRate. Defaults to 1.">
            </property>
            <property name="fragment_size (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The maximum size that a message can take&#10;  before it is to be fragmented. Defaults to 1000. Ptolemy will close the&#10;  model if fragment size is too large (not sure what the maximum is).">
            </property>
            <property name="compression (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A string to specify the compression&#10;  scheme to be used on messages. Options are &quot;none&quot; (default) and &quot;png&quot;.">
            </property>
            <property name="outputCompleteResponseOnly (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A flag which if set to true&#10;  will cause the accessor to delay in sending messages on the &quot;received&quot; port&#10;  until it has concatenated the data fields from message fragments back into&#10;  the original unfragmented message. Otherwise it will send the message&#10;  fragments as they come in.">
            </property>
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="compression" class="ptolemy.data.expr.Parameter" value="none">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="RosPublisher_goal" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) sock-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor advertises and publishes to a ROS topic. It extends&#10; * the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&#10; *&#10; * During intialize, it will advertise the topic it will publish to,&#10; * along with its type. The purpose of 'advertise' here is to&#10; * establish the ROS topic if isn't already established. This is&#10; * slightly different from the 'advertise' function in NodeHandle&#10; * which simply publicizes that the the node will be publishing&#10; * messages to the topic.&#10; * &lt;ul&gt;&#10; * &lt;li&gt;If the topic does not already exist, and the type is valid, a&#10; * topic will be established with this type.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with a different type, no new topic&#10; * will be established&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with the same type, no new topic&#10; * will be established.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10; * topic will be established.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; *&#10; *  On input from 'toSend', this accessor publishes that input to the&#10; *  aforementioned topic.&#10; *  The input from 'toSend' must be in JSON form, and must match the message&#10; *  datatype that the ROS topic is expecting. For example if ROS topic is&#10; *  expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; *  as follows:&#10; *  &lt;pre&gt; { &quot;data&quot;: &quot;hello world&quot; } &lt;/pre&gt;&#10; *  Some ROS types contain a header which consists of a sequence,&#10; *  timestamp, and a frame_id. If the ROS type has a header, you can&#10; *  either:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt;send the message on toSend without the header, and check the&#10; *  parameter 'addHeader'. This sends the message with a header with&#10; *  only the frame_id specified, and rosbridge will add the sequence&#10; *  and timestamp for you.&lt;/li&gt;&#10; *  &lt;li&gt;send a fully formed message with all fields in the header&#10; *  included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; *  &lt;/ul&gt;&#10; *  This accessor doesn't do any error checking. All error messages&#10; *  orginate from rosbridge and will appear on the console running&#10; *  rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; *  protocol specification&lt;/a&gt; site.&#10; *&#10; *  @accessor robotics/RosPublisher&#10; *  @parameter {string} topic The ROS topic to publish to.&#10; *  @parameter {string} ROStype The ROS datatype of the topic.&#10; *  @parameter {boolean} addHeader If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.&#10; *  @parameter {string} frame_id The frame_id of the header (only needed if a header is required).&#10; *  @author Marcus Pan&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals exports, extend, get, getParameter, parameter */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs from setup() in&#10; * WebSocketClient. Adds additional parameters regarding the ROS topic&#10; * to which to publish to.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/WebSocketClient');&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('ROStype', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('addHeader', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.parameter('frame_id', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;};&#10;&#10;/** Override inputHandler on 'toSend' from WebSocketClient. */&#10;exports.toSendInputHandler = function () {&#10;    var msg = this.get('toSend');&#10;    // Add a header with a blank time and sequence info. This will be added by rosbridge.&#10;    if (this.getParameter('addHeader')) {&#10;        msg.header = {&#10;            &quot;frame_id&quot;: this.getParameter('frame_id')&#10;        };&#10;    }&#10;&#10;    var data = {&#10;        &quot;op&quot;: &quot;publish&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;msg&quot;: msg&#10;    };&#10;&#10;    this.exports.sendToWebSocket.call(this, data);&#10;};&#10;&#10;/**  Inherits initialize from WebSocketClient.&#10; *   Advertise the topic we are publishing to.&#10; */&#10;exports.initialize = function () {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    var advertise = {&#10;        &quot;op&quot;: &quot;advertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;type&quot;: this.getParameter('ROStype')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, advertise);&#10;&#10;};&#10;&#10;/** Unadvertise the topic and inherit wrapup from WebSocketClient. */&#10;exports.wrapup = function () {&#10;    var unadvertise = {&#10;        &quot;op&quot;: &quot;unadvertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unadvertise);&#10;    this.ssuper.wrapup();&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/robotics/RosPublisher.js">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/goal">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="ROStype" class="ptolemy.data.expr.StringParameter" value="geometry_msgs/PoseStamped">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="addHeader" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="frame_id" class="ptolemy.data.expr.StringParameter" value="map">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[355.0, -65.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor advertises and publishes to a ROS topic. It extends&#10;the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&lt;/p&gt;&#10;&lt;p&gt;During intialize, it will advertise the topic it will publish to,&#10;along with its type. The purpose of 'advertise' here is to&#10;establish the ROS topic if isn't already established. This is&#10;slightly different from the 'advertise' function in NodeHandle&#10;which simply publicizes that the the node will be publishing&#10;messages to the topic.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the topic does not already exist, and the type is valid, a&#10;topic will be established with this type.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with a different type, no new topic&#10;will be established&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with the same type, no new topic&#10;will be established.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10;topic will be established.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt; On input from 'toSend', this accessor publishes that input to the&#10; aforementioned topic.&#10; The input from 'toSend' must be in JSON form, and must match the message&#10; datatype that the ROS topic is expecting. For example if ROS topic is&#10; expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; as follows:&#10; &lt;pre&gt; { &amp;quot;data&amp;quot;: &amp;quot;hello world&amp;quot; } &lt;/pre&gt;&#10; Some ROS types contain a header which consists of a sequence,&#10; timestamp, and a frame_id. If the ROS type has a header, you can&#10; either:&#10; &lt;ul&gt;&#10; &lt;li&gt;send the message on toSend without the header, and check the&#10; parameter 'addHeader'. This sends the message with a header with&#10; only the frame_id specified, and rosbridge will add the sequence&#10; and timestamp for you.&lt;/li&gt;&#10; &lt;li&gt;send a fully formed message with all fields in the header&#10; included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; &lt;/ul&gt;&#10; This accessor doesn't do any error checking. All error messages&#10; orginate from rosbridge and will appear on the console running&#10; rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; protocol specification&lt;/a&gt; site.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to publish to.">
            </property>
            <property name="ROStype (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS datatype of the topic.">
            </property>
            <property name="addHeader (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.">
            </property>
            <property name="frame_id (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The frame_id of the header (only needed if a header is required).">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="RosPublisher_cancelWaypoint" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) sock-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** This accessor advertises and publishes to a ROS topic. It extends&#10; * the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&#10; *&#10; * During intialize, it will advertise the topic it will publish to,&#10; * along with its type. The purpose of 'advertise' here is to&#10; * establish the ROS topic if isn't already established. This is&#10; * slightly different from the 'advertise' function in NodeHandle&#10; * which simply publicizes that the the node will be publishing&#10; * messages to the topic.&#10; * &lt;ul&gt;&#10; * &lt;li&gt;If the topic does not already exist, and the type is valid, a&#10; * topic will be established with this type.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with a different type, no new topic&#10; * will be established&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists with the same type, no new topic&#10; * will be established.&lt;/li&gt;&#10; * &lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10; * topic will be established.&lt;/li&gt;&#10; * &lt;/ul&gt;&#10; *&#10; *  On input from 'toSend', this accessor publishes that input to the&#10; *  aforementioned topic.&#10; *  The input from 'toSend' must be in JSON form, and must match the message&#10; *  datatype that the ROS topic is expecting. For example if ROS topic is&#10; *  expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; *  as follows:&#10; *  &lt;pre&gt; { &quot;data&quot;: &quot;hello world&quot; } &lt;/pre&gt;&#10; *  Some ROS types contain a header which consists of a sequence,&#10; *  timestamp, and a frame_id. If the ROS type has a header, you can&#10; *  either:&#10; *  &lt;ul&gt;&#10; *  &lt;li&gt;send the message on toSend without the header, and check the&#10; *  parameter 'addHeader'. This sends the message with a header with&#10; *  only the frame_id specified, and rosbridge will add the sequence&#10; *  and timestamp for you.&lt;/li&gt;&#10; *  &lt;li&gt;send a fully formed message with all fields in the header&#10; *  included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; *  &lt;/ul&gt;&#10; *  This accessor doesn't do any error checking. All error messages&#10; *  orginate from rosbridge and will appear on the console running&#10; *  rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; *  protocol specification&lt;/a&gt; site.&#10; *&#10; *  @accessor robotics/RosPublisher&#10; *  @parameter {string} topic The ROS topic to publish to.&#10; *  @parameter {string} ROStype The ROS datatype of the topic.&#10; *  @parameter {boolean} addHeader If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.&#10; *  @parameter {string} frame_id The frame_id of the header (only needed if a header is required).&#10; *  @author Marcus Pan&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals exports, extend, get, getParameter, parameter */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10;&#10;/** Sets up by accessor by inheriting inputs from setup() in&#10; * WebSocketClient. Adds additional parameters regarding the ROS topic&#10; * to which to publish to.&#10; */&#10;exports.setup = function () {&#10;    this.extend('net/WebSocketClient');&#10;    this.parameter('topic', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('ROStype', {&#10;        type: &quot;string&quot;&#10;    });&#10;    this.parameter('addHeader', {&#10;        type: &quot;boolean&quot;,&#10;        value: false&#10;    });&#10;    this.parameter('frame_id', {&#10;        type: &quot;string&quot;,&#10;        value: &quot;&quot;&#10;    });&#10;};&#10;&#10;/** Override inputHandler on 'toSend' from WebSocketClient. */&#10;exports.toSendInputHandler = function () {&#10;    var msg = this.get('toSend');&#10;    // Add a header with a blank time and sequence info. This will be added by rosbridge.&#10;    if (this.getParameter('addHeader')) {&#10;        msg.header = {&#10;            &quot;frame_id&quot;: this.getParameter('frame_id')&#10;        };&#10;    }&#10;&#10;    var data = {&#10;        &quot;op&quot;: &quot;publish&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;msg&quot;: msg&#10;    };&#10;&#10;    this.exports.sendToWebSocket.call(this, data);&#10;};&#10;&#10;/**  Inherits initialize from WebSocketClient.&#10; *   Advertise the topic we are publishing to.&#10; */&#10;exports.initialize = function () {&#10;    this.exports.ssuper.initialize.call(this);&#10;&#10;    var advertise = {&#10;        &quot;op&quot;: &quot;advertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic'),&#10;        &quot;type&quot;: this.getParameter('ROStype')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, advertise);&#10;&#10;};&#10;&#10;/** Unadvertise the topic and inherit wrapup from WebSocketClient. */&#10;exports.wrapup = function () {&#10;    var unadvertise = {&#10;        &quot;op&quot;: &quot;unadvertise&quot;,&#10;        &quot;topic&quot;: this.getParameter('topic')&#10;    };&#10;    this.exports.sendToWebSocket.call(this, unadvertise);&#10;    this.ssuper.wrapup();&#10;};&#10;">
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/robotics/RosPublisher.js">
        </property>
        <property name="checkoutOrUpdateAccessorsRepository" class="ptolemy.actor.parameters.SharedParameter" value="false">
        </property>
        <property name="numberOfRetries" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="timeBetweenRetries" class="ptolemy.data.expr.Parameter" value="100">
        </property>
        <property name="reconnectOnClose" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="discardMessagesBeforeOpen" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="throttleFactor" class="ptolemy.data.expr.Parameter" value="0">
        </property>
        <property name="topic" class="ptolemy.data.expr.StringParameter" value="/move/cancel">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="ROStype" class="ptolemy.data.expr.StringParameter" value="actionlib_msgs/GoalID">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="addHeader" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="frame_id" class="ptolemy.data.expr.StringParameter" value="map">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[425.0, 20.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor advertises and publishes to a ROS topic. It extends&#10;the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&lt;/p&gt;&#10;&lt;p&gt;During intialize, it will advertise the topic it will publish to,&#10;along with its type. The purpose of 'advertise' here is to&#10;establish the ROS topic if isn't already established. This is&#10;slightly different from the 'advertise' function in NodeHandle&#10;which simply publicizes that the the node will be publishing&#10;messages to the topic.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the topic does not already exist, and the type is valid, a&#10;topic will be established with this type.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with a different type, no new topic&#10;will be established&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with the same type, no new topic&#10;will be established.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists but the type isn't resolved, no new&#10;topic will be established.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt; On input from 'toSend', this accessor publishes that input to the&#10; aforementioned topic.&#10; The input from 'toSend' must be in JSON form, and must match the message&#10; datatype that the ROS topic is expecting. For example if ROS topic is&#10; expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in 'toSend' should be&#10; as follows:&#10; &lt;pre&gt; { &amp;quot;data&amp;quot;: &amp;quot;hello world&amp;quot; } &lt;/pre&gt;&#10; Some ROS types contain a header which consists of a sequence,&#10; timestamp, and a frame_id. If the ROS type has a header, you can&#10; either:&#10; &lt;ul&gt;&#10; &lt;li&gt;send the message on toSend without the header, and check the&#10; parameter 'addHeader'. This sends the message with a header with&#10; only the frame_id specified, and rosbridge will add the sequence&#10; and timestamp for you.&lt;/li&gt;&#10; &lt;li&gt;send a fully formed message with all fields in the header&#10; included and don't check the parameter 'addHeader'.&lt;/li&gt;&#10; &lt;/ul&gt;&#10; This accessor doesn't do any error checking. All error messages&#10; orginate from rosbridge and will appear on the console running&#10; rosbridge. More information ccan be viewed on the &lt;a href='https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md'&gt;rosbridge&#10; protocol specification&lt;/a&gt; site.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS topic to publish to.">
            </property>
            <property name="ROStype (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The ROS datatype of the topic.">
            </property>
            <property name="addHeader (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.">
            </property>
            <property name="frame_id (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The frame_id of the header (only needed if a header is required).">
            </property>
        </property>
        <property name="receiveType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="sendType" class="ptolemy.data.expr.Parameter" value="application/json">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="server" class="ptolemy.actor.parameters.PortParameter" value="localhost">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="trustedCACertPath" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="server" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="toSend" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="connected" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="received" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="port" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Engine" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="var moveResultHandle, tagDetectionsMappedHandle, tfHandle, sendToTagHandle;&#10;var cameraCoords;&#10;var currentTag = {id: 0};&#10;&#10;//vars to enumerate options for sendToTag function&#10;var current = 0;&#10;var next = 1;&#10;&#10;var unreachableCount = 0;&#10;&#10;exports.setup = function() {&#10;   this.input('moveResult', {type: 'JSON', value: {}});&#10;   this.input('pose', {type: 'JSON', value: {}});&#10;   this.input('tagDetectionsMapped', {type: 'JSON', value: {}});&#10;   this.input('tf', {type: 'JSON', value: {}});//frame transforms&#10;   this.output('waypoint', {type: 'JSON'});//pose msg to publish to /goal topic&#10;   this.output('cancelWaypoint', {type: 'JSON'});//abort msg to publish to /move/cancel topic&#10;   this.output('lightID', {type: 'int'});&#10;   this.output('hue', {type: 'int'});//hue of a Hue bulb&#10;   this.output('on', {type: 'boolean'});&#10;   this.output('trigger');&#10;   this.parameter('stopAtTagDuration', {type: 'number', value: 1000}); //time to spend at each tag before moving in ms&#10;   this.parameter('robotDistanceFromTag', {type: 'number', value: 0.1}); //distance from robot to tag in m &#10;   this.parameter('goalTolerance', {type: 'number', value: 0.2}); //the tolerance in distance (m) to conclude a robot has reached a tag&#10;   this.parameter('mapFrame', {type: 'string', value: 'map_hokuyo'});&#10;   this.parameter('cameraFrame', {type: 'string', value: 'foscam'});&#10;}&#10;&#10;&#10;exports.initialize = function() {&#10;   tfHandle = this.addInputHandler('tf', tfHandler);&#10;   tagDetectionsMappedHandle = this.addInputHandler('tagDetectionsMapped', &#10;         tagDetectionsMappedHandler);&#10;   moveResultHandle = this.addInputHandler('moveResult', moveResultHandler);&#10;}&#10;/** search transfroms for camera coords. Removes input handler after set */&#10;function tfHandler() {&#10;   console.log('looking for camera to  map transform');&#10;   //check transforms for camera pose&#10;   var transforms = this.get('tf').msg.transforms;&#10;   var map_frame = this.getParameter('mapFrame');&#10;   var camera_frame = this.getParameter('cameraFrame');&#10;   for (var i = 0; i &lt; transforms.length; i++) {&#10;      if (transforms[i].header.frame_id == map_frame &amp;&amp; &#10;         transforms[i].child_frame_id == camera_frame) {&#10;         cameraCoords = {&quot;x&quot;: transforms[i].transform.translation.x,&#10;                         &quot;y&quot;: transforms[i].transform.translation.y};&#10;         console.log(&quot;set camera coords&quot;);&#10;         //only need to set this once&#10;         this.removeInputHandler(tfHandle);&#10;      }&#10;   }&#10;&#10;}&#10;/**&#10; Only need a handle once. sendToTag is called next by the MoveStatusHandler&#10;*/&#10;function tagDetectionsMappedHandler() {&#10;   if (!cameraCoords) {&#10;      console.log('received tag detections but not camera coords yet. Will wait.');&#10;      return;&#10;   }&#10;   sendToTag(next, this.getParameter('robotDistanceFromTag'));&#10;   this.removeInputHandler(tagDetectionsMappedHandle);&#10;}&#10;  &#10;/** Checks the move status of the hfn goal/status topic. The status is &#10;  defined by the ROS actionlib and the ROS message at scarab_msgs/action/Move.action&#10;  If hfn goal is reached, check that tag is really within tolerance of the robot. &#10;  If not, resend to robot to current tag.&#10;*/&#10;  &#10;function moveResultHandler() {&#10;   var moveResult = this.get('moveResult').msg;&#10;   console.log(moveResult);&#10;   var moveStatus = this.get('moveResult').msg.result.final_status;&#10;   var goalID  = moveResult.goal_id;//id of goal&#10;   var finalStatus = moveResult.result.final_status//integer reporting status&#10;   var robotDistanceFromTag = this.getParameter('robotDistanceFromTag');&#10;   //moveStatus mapping: 0=FINISHED, 1=TIMEOUT, 2=STUCK, 3=NOTREADY, 4=UNREACHABLE&#10;   if (moveStatus == 0) {&#10;   //success&#10;      flashLight(currentTag.id);&#10;      unreachableCount = 0;&#10;      sendToTag(next);&#10;      sendToTagHandle = setTimeout(sendToTag, this.getParameter('stopAtTagDuration'), next, robotDistanceFromTag);&#10;      console.log('robot reached waypoint successfully. sending to next tag');&#10;   } else if (finalStatus == 4) {&#10;   //waypoint is unreachable. tag localization may not be accurate, resulting in a tag location deep in occupied space.  &#10;   //abort current waypoint and send new one with increased distance between waypoint and tag&#10;      cancelWaypoint();&#10;      unreachableCount++;&#10;      sendToTag(current, unreachableCount * robotDistanceFromTag);&#10;      console.log('waypoint cannot be reached. sending new one with increased distance betweeen waypoint and tag');&#10;    } else {&#10;     //problem encountered. abort previous goals and  send to current tag again. &#10;      cancelWaypoint();&#10;      sendToTag(current, robotDistanceFromTag);&#10;      console.log('robot is either stuck, not ready or too slow. sending waypoint again');&#10;   }&#10;}&#10;&#10;/** Utility functions to flash lights */&#10;function flashLight(id) {&#10;   this.send('lightID', id);&#10;   this.send('hue', 62580 * id/3);&#10;   this.send('on', true);&#10;   this.send('trigger', true);&#10;   setTimeout(offLight, 2000, id);&#10;}&#10;&#10;function offLight(id) {&#10;   this.send('lightID', id);&#10;   this.send('on', false);&#10;   this.send('trigger', true);&#10;}&#10;&#10;   &#10;/** Assume currentTag is still in the frame and get nextTag by ascending ID.&#10;    If stayOnCurrentTag is defined and true, nextTag is the current tag.&#10;    If can't get currentTag, set nextTag to the first tag. &#10;    Send to nextTag's position. &#10;    tag0 is on the robot. &#10;*/ &#10;function sendToTag(currentOrNext, distanceFromTag) {&#10;   var input = this.get('tagDetectionsMapped');  &#10;   console.log(input);&#10;   if (!input.msg) {&#10;      console.log('No detections received yet. Will check again');&#10;      setTimeout('sendToTag', 1000);&#10;      return;&#10;   }&#10;   if (!cameraCoords) {&#10;      console.log('No camera coords yet.  Will check again');&#10;      setTimeout('sendToTag', 1000);&#10;      return;&#10;   }&#10;&#10;   var detections = input.msg.detections;&#10;   detections.sort(function(a, b) {return a.id &gt; b.id});&#10;   console.log('got detections');&#10;&#10;   for (var i = 0; i &lt; detections.length; i++) {&#10;      if (detections[i].id == currentTag.id) {&#10;         if (currentOrNext == current) { &#10;            currentTag = detections[i];&#10;         } else {&#10;            currentTag = detections[(i+1) % detections.length];&#10;         }&#10;         break;&#10;      }&#10;      //current tag no longer exists. set to tag with smallest id.&#10;      //don't send to tag0 (on the robot)&#10;      if (i == detections.length - 1) {&#10;         currentTag = detections[1];&#10;      }&#10;   } &#10;   //tag frame: facing tag, x-&gt;right, y-&gt;up, z-&gt;toward you&#10;   //robot frame: facing robot, x-&gt;toward you, y-&gt;right, z-&gt;up&#10;   //send robot to face tag with separation specified by parameter, in the line from the camera to the tag&#10;   //format data accoding to ROS pose datatype, (cartesian position and quaternion orientation)&#10;   tagX = currentTag.pose.pose.position.x;&#10;   tagY = currentTag.pose.pose.position.y;&#10;   cameraX = cameraCoords.x;&#10;   cameraY = cameraCoords.y;&#10;&#10;   //get unit vector of direction from tag to camera&#10;   deltaX = cameraX - tagX;&#10;   deltaY = cameraY - tagY;&#10;   deltaLength = distance(deltaX, 0, deltaY, 0);&#10;&#10;   theta = Math.atan2(deltaY, deltaX) + Math.PI;&#10;&#10;   goal = {&#10;      pose: {&#10;         position: {&#10;            x: tagX + (distanceFromTag * deltaX / deltaLength), &#10;            y: tagY + (distanceFromTag * deltaY / deltaLength),&#10;            z: 0&#10;         },&#10;         orientation: {&#10;            x: 0,&#10;            y: 0,&#10;            z: Math.sin(0.5*theta),  &#10;            w: Math.cos(0.5*theta)&#10;         }&#10;      }&#10;   }&#10;   console.log('waypoint sent to tag ' + currentTag.id);&#10;   this.send('waypoint', goal); &#10;&#10;}&#10;&#10;function cancelWaypoint() {&#10;   //blank info aborts all goals for all time. This is fine, since we only send one goal at a time.&#10;   msg = {&#10;      stamp: {&#10;         secs: 0,&#10;         nsecs: 0&#10;      },&#10;      id: ''&#10;   }&#10;   this.send('cancelWaypoint', msg);&#10;}&#10;&#10;exports.wrapup = function() {&#10;   //abort all goals&#10;   cancelWaypoint();&#10;   //remove input handlers&#10;   if (moveResultHandle) {&#10;     this.removeInputHandler(moveResultHandle);&#10;   } &#10;   if (tagDetectionsMappedHandle) {&#10;     this.removeInputHandler(tagDetectionsMappedHandle);&#10;   } &#10;   if (tfHandle) {&#10;     this.removeInputHandler(tfHandle);&#10;   } &#10;   if (sendToTagHandle) {&#10;     this.removeInputHandler(sendToTagHandle);&#10;   } &#10;}&#10;&#10;/** utlity function to return distance between two points */&#10;function distance(x1, x2, y1, y2) {&#10;   return Math.sqrt(&#10;      Math.pow(x2 - x1, 2) + Math.pow(y2 -y1, 2)&#10;   );&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="16">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="80">
                </property>
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[165.0, 130.0]">
        </property>
        <property name="moveResult" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="pose" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="tagDetectionsMapped" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="tf" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="stopAtTagDuration" class="ptolemy.data.expr.Parameter" value="1000.0">
        </property>
        <property name="robotDistanceFromTag" class="ptolemy.data.expr.Parameter" value="0.1">
        </property>
        <property name="goalTolerance" class="ptolemy.data.expr.Parameter" value="0.2">
        </property>
        <property name="mapFrame" class="ptolemy.data.expr.StringParameter" value="map_hokuyo">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="cameraFrame" class="ptolemy.data.expr.StringParameter" value="foscam">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="moveResult" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="pose" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="tagDetectionsMapped" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="tf" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="waypoint" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="cancelWaypoint" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="lightID" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="hue" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="on" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="RosSubscriber_tf.received" relation="relation"/>
    <link port="Hue2.lightID" relation="relation7"/>
    <link port="Hue2.hue" relation="relation8"/>
    <link port="Hue2.on" relation="relation9"/>
    <link port="Hue2.trigger" relation="relation10"/>
    <link port="RosSubscriber_tag_detections_mapped.received" relation="relation4"/>
    <link port="RosSubscriber_moveResult.received" relation="relation2"/>
    <link port="RosSubscriber_pose.received" relation="relation3"/>
    <link port="RosPublisher_goal.toSend" relation="relation5"/>
    <link port="RosPublisher_cancelWaypoint.toSend" relation="relation6"/>
    <link port="Engine.moveResult" relation="relation2"/>
    <link port="Engine.pose" relation="relation3"/>
    <link port="Engine.tagDetectionsMapped" relation="relation4"/>
    <link port="Engine.tf" relation="relation"/>
    <link port="Engine.waypoint" relation="relation5"/>
    <link port="Engine.cancelWaypoint" relation="relation6"/>
    <link port="Engine.lightID" relation="relation7"/>
    <link port="Engine.hue" relation="relation8"/>
    <link port="Engine.on" relation="relation9"/>
    <link port="Engine.trigger" relation="relation10"/>
</entity>
