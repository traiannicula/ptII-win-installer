<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="TemperatureAdapters" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.1.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-60.0, 45.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={506, 23, 934, 632}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="0.8000000000000007">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{230.99371366279064, 310.2328306686046}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="First, select a value for the SourceTemperatureOntology parameter.&#10;This unit type is used to query an ontology of adapters and select&#10;the correct adapter accessor to download and reify in the Mutable.&#10;The adapter will convert the TemperatureValue (which is supposed to&#10;represent data from a temperature sensor) from the Source Temperature&#10;Ontology into Fahrenheit for the display.&#10;&#10;This pattern could be used to set up a control loop with dynamically&#10;acquired sensors and actuators.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-135.0, 85.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="PREFIX adapters: &lt;http://ptolemy.berkeley.edu/adapters#&gt;&#10;&#10;select * where{&#10;    ?a adapters:MatchesTo adapters:Fahrenheit.&#10;    ?a adapters:MatchesFrom adapters:Kelvin.&#10;    ?accessorURI adapters:Implements ?a.&#10;} ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-180.0, 455.0]">
        </property>
    </property>
    <property name="SourceTemperatureOntology" class="ptolemy.data.expr.ChoiceStringParameter" value="Kelvin">
        <property name="choices" class="ptolemy.data.expr.StringParameter" value="Kelvin, Celsius, Fahrenheit">
        </property>
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[150.0, 45.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 0.0, 1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="The query produced from QueryGenerator resembles: ">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-195.0, 425.0]">
        </property>
    </property>
    <entity name="GetAccessor" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that gets an accessor's code and specifies parameter and default input settings&#10;// for the retrieved accessor.&#10;//&#10;// Copyright (c) 2019 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Subclass of the GetResource accessor intended to obtain accessors for reification in a &#10; *  mutable accessor. In addition to the GetResource accessor's functionality, this accessor produces a&#10; *  parameterMap and inputMap along with the accessor. It also ignores all triggers&#10; *  until after this accessor's &quot;resource&quot; input value has been changed from the default (an empty string).&#10; *  This feature is useful if the desired accessor resource is unknown until runtime.&#10; *&#10; *  Refer to utilities/GetResource for further documentation.&#10; &#10; *  @accessor utilities/GetAccessor&#10; *  @input options Options passed to the getResources() function, see utilities/GetResource.&#10; *  @input resource {string} The accessor to be read. Unlike superclass, defaults to an empty string.&#10; *  @input trigger {boolean} Send a token to this input to get the specified resource. &#10; *  @input parameterMap {JSON} Parameter settings for the retrieved accessor to be provided along with that accessor.&#10; *  @input inputMap {JSON} Default input settings for the retrieved accessor to be provided along with that accessor.&#10; *  @parameter synchronous {boolean} Perform a synchronous or asynchronous call of getResource.&#10; *    Note some hosts do not currently implement both versions.&#10; *  @output output {JSON} An object with &quot;accessor&quot;, &quot;parameterMap&quot;, and &quot;inputMap&quot; properties.&#10; *    This format is compatible with Mutable accessors.&#10; *  @author Matt Weber&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearInterval, exports, require, setInterval */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.extend(&quot;utilities/GetResource&quot;);&#10;    this.input(&quot;parameterMap&quot;, {&#10;        &quot;type&quot;: &quot;JSON&quot;,&#10;        &quot;value&quot;: {}&#10;    });&#10;    this.input(&quot;inputMap&quot;, {&#10;        &quot;type&quot;: &quot;JSON&quot;,&#10;        &quot;value&quot;: {}&#10;    });&#10;&#10;    //Override base class&#10;    this.input('resource', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;};&#10;&#10;exports.initialize= function(){&#10;    this.exports.ssuper.initialize.call(this);&#10;}&#10;&#10;//Override superclass input handler to first check if resource is an empty string.&#10;exports.handleTrigger = function(){&#10;    var thiz = this;&#10;    if(thiz.get('resource')){&#10;        thiz.exports.ssuper.handleTrigger.call(thiz);&#10;    }&#10;}&#10;&#10;//Override base class to produce parameterMap and inputMap along with the accessor. &#10;exports.filterResponse = function (response) {&#10;    return {&#10;        &quot;accessor&quot;: response,&#10;        &quot;parameterMap&quot;: this.get(&quot;parameterMap&quot;),&#10;        &quot;inputMap&quot;: this.get(&quot;inputMap&quot;)&#10;    };&#10;};&#10;&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/GetAccessor.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="resource" class="ptolemy.actor.parameters.PortParameter" value="https://ptolemy.berkeley.edu/accessors/adapters/CelsiusToFahrenheit.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="parameterMap" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="inputMap" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[395.0, 335.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="resource" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="parameterMap" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="inputMap" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Mutable" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;    this.extend('utilities/MutableBase');&#10;    this.implement('adapters/Adapter');&#10;    // Add your interface information here.&#10;    // See documentation for MutableBase to see how to use this.&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Mutable.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[515.0, 345.0]">
        </property>
        <property name="_localChanges" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <port name="accessor" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="in" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="out" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Display" class="ptolemy.actor.lib.gui.Display">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={401, 420, 499, 208}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[625.0, 355.0]">
        </property>
    </entity>
    <entity name="TemperatureValue" class="ptolemy.actor.lib.Const">
        <property name="value" class="ptolemy.data.expr.Parameter" value="9.25">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.BoxedValueIcon">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="value">
            </property>
            <property name="displayWidth" class="ptolemy.data.expr.Parameter" value="40">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[360.0, 410.0]">
        </property>
    </entity>
    <entity name="MicrostepDelay" class="ptolemy.actor.lib.MicrostepDelay">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[230.0, 410.0]">
        </property>
    </entity>
    <entity name="SemanticRepositoryQuery" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** Perform a SPARQL query on a semantic repository such as GraphDB.&#10; * &#10; *  SPARQL is a W3C standard for querying semantic repositories,&#10; *  playing an analogous role to SQL with respect to relational&#10; *  databases. Semantic repositories fall within the domain of knowledge&#10; *  representation in AI and typically are implemented as a triplestore:&#10; *  entries in the repository have the form &quot;subject&quot;, &quot;predicate&quot;, &quot;object&quot;&#10; *  eg. &quot;An Apple&quot; &quot;IsA&quot; &quot;Fruit&quot;&#10; *  &#10; *  An example SPARQL query to get a list of up to 100 triples in the repository:&#10; *&#10; *  select * where { &#10; *      ?s ?p ?o .&#10; *  } limit 100&#10; *&#10; *  Documentation for SPARQL and the SPARQL Protocol can be found at&#10; *  https://www.w3.org/TR/rdf-sparql-query/&#10; *&#10; *  Information on GraphDB can be found at&#10; *  http://graphdb.ontotext.com/&#10; *  &#10; *  SPARQL is also a protocol for communicating with RDF databases&#10; *  Upon receiving a query input, this accessor performs an http GET&#10; *  to the specified server and port with the querystring &quot;query&quot; set to the&#10; *  query input. The JSON response from the semantic repository (if any) is &#10; *  sent to the response output. Depending on the query type, the &#10; *  response will be JSON &quot;sparql-results&quot; or &quot;rdf+json&quot;&#10; *&#10; *  This accessor does not block waiting for the response, but if any additional&#10; *  *query* input is received before a pending request has received a response&#10; *  or timed out, then the new request will be queued and sent out only after&#10; *  the pending request has completed. This strategy ensures that outputs are&#10; *  produced in the same order as the input requests.&#10; *&#10; *  @accessor services/SemanticRepositoryQuery&#10; *  @author Matt Weber&#10; *  @version $$Id: SemanticRepository.js 1725 2017-05-19 22:59:11Z cxh $$&#10; *  @input {string} query The SPARQL query to be sent to the semantic repository.&#10; *   Types of queries yielding a response are: SELECT, CONSTRUCT, ASK, and DESCRIBE&#10; *  @parameter {string} protocol Either http or https.&#10; *  @parameter {string} host The URL for the semantic repository.&#10; *  @parameter {string} port The port for the semantic repository.&#10; *  @parameter {string} repositoryName The name of the particular repository on the host.&#10; *  @parameter {boolean} authenticate If true, enable authentication to an access controlled&#10; *   semantic repository by sending username and password with request. If false, username &#10; *   and password information will not be sent. An error will occur if the http protocol is&#10; *   selected with a true authenticate setting to avoid sending username/password information&#10; *   in plain text.&#10; *  @parameter {string} username A username for an access controlled semantic repository. &#10; *  @parameter {string} password A password for an access controlled semantic repository.&#10; *  @parameter {int} timeout The amount of time (in milliseconds) to wait for a response&#10; *   before triggering a null response and an error. This defaults to 20000.&#10; *  @output response An object containing the raw response from the service conforming&#10; *   to the SPARQL protocol. If the query type was SELECT or ASK the response will be&#10; *   JSON &quot;sparql-results&quot;. If the query type was CONSTRUCT or DESCRIBE the response&#10; *   will be &quot;rdf+json&quot;.&#10; */&#10;&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should&#10;// be no space between the / and the * and global. See&#10;// https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*globals addInputHandler, addInputParameter, console, error, exports, extend, input, get, getParameter, getResource, output, parameter, send */&#10;/*jshint globalstrict: true*/&#10;'use strict';&#10; &#10; /** Set up the accessor by defining the inputs and outputs.&#10; */&#10;&#10;var base64 = require('base64-js');&#10;&#10;exports.setup = function () {&#10;    this.extend('net/REST');&#10;    this.input('query', {&#10;        'type': 'string'&#10;    });&#10;&#10;    this.parameter('protocol', {&#10;        'type': 'string',&#10;        'value': 'http',&#10;        'options': ['http', 'https']&#10;    });&#10;&#10;    this.parameter('host', {&#10;        'type': 'string',&#10;        'value': 'localhost'&#10;    });&#10;&#10;    this.parameter('port', {&#10;        'type': 'int',&#10;        'value': 7200&#10;    });&#10;&#10;    this.parameter('repositoryName', {&#10;        'type': 'string',&#10;    });&#10;&#10;    this.parameter('authenticate', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;&#10;    this.parameter('username', {&#10;        'type': 'string',&#10;        'value': 'admin'&#10;    });&#10;&#10;    this.parameter('password', {&#10;        'type': 'string',&#10;        'value': 'root'&#10;    });&#10;&#10;    //Overriding inherited default timeout value of 5000ms to allow for longer queries by default&#10;    this.parameter('timeout', {&#10;        'type': 'int',&#10;        'value': 20000&#10;    });&#10;&#10;    //Use the response output from the REST accessor&#10;&#10;&#10;    // Change default values of the base class inputs.&#10;    // Also, hide base class inputs, except trigger.&#10;    this.input('options', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('command', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('arguments', {&#10;        'visibility': 'expert',&#10;    });&#10;    this.input('body', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.input('trigger', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('headers', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.output('status', {&#10;        'visibility': 'expert'&#10;    });&#10;    this.parameter('outputCompleteResponseOnly', {&#10;        'visibility': 'expert'&#10;    });&#10;};&#10;&#10;//Overriding REST&#10;exports.filterResponse = function(response){&#10;    return JSON.parse(response);&#10;};&#10;&#10;//Overriding REST&#10;//Connections to the SemanticRepository should be closed once data has been received.&#10;exports.handleResponse = function(message){&#10;     exports.ssuper.handleResponse.call(this, message);&#10;     exports.ssuper.wrapup();&#10;};&#10;&#10;exports.initialize = function(){&#10;    exports.ssuper.initialize.call(this);&#10;    &#10;    //Check for bad authentication and protocol settings at initialization.&#10;    if(this.getParameter('protocol') == 'http' &amp;&amp; this.getParameter('authenticate') ){&#10;        error(&quot;Semantic Repository authentication setting incompatible with protocol setting. This accessor will not send username and password information in plain text over http. Change to https or dissable authentication.&quot;);&#10;    }&#10;&#10;    var thiz = this;&#10;&#10;    this.addInputHandler('query', function(){&#10;&#10;        //Check for bad authentication and protocol settings when preparing to send.&#10;        if(thiz.getParameter('protocol') == 'http' &amp;&amp; thiz.getParameter('authenticate') ){&#10;            error(&quot;Semantic Repository authentication setting incompatible with protocol setting. This accessor will not send username and password information in plain text over http. Change to https or dissable authentication.&quot;);&#10;            return;&#10;        }&#10;&#10;        var queryInput = thiz.get('query');&#10;        var host = thiz.getParameter('host');&#10;        var port = thiz.getParameter('port');&#10;        var repositoryName = thiz.getParameter('repositoryName');&#10;        var authenticate = thiz.getParameter('authenticate');&#10;        var protocol = thiz.getParameter('protocol');&#10;&#10;        var options = {&#10;            'headers' : {'Accept':'application/sparql-results+json, application/rdf+json'},&#10;            'method'  : 'GET',&#10;            'url'     : {'host'  : host,&#10;                        'port'   : port,&#10;                        'protocol' : protocol&#10;                        }&#10;        };&#10;&#10;        //If authenticating, add base64 encoded username and password to headers.&#10;        //See basic authentication under http://graphdb.ontotext.com/documentation/standard/authentication.html&#10;        if(authenticate &amp;&amp; protocol == 'https'){&#10;            var username = thiz.getParameter('username');&#10;            var password = thiz.getParameter('password');&#10;&#10;            //Note, contrary to the graphDB documentation, the separator between&#10;            //username and password is a colon, not a forward slash.&#10;            var login = username +&quot;:&quot; + password;&#10;            var loginArray = login.split(&quot;&quot;);&#10;            var loginNumeric = loginArray.map(function(x){ return x.charCodeAt(0)});&#10;            var loginUint = new Uint8Array(loginNumeric);&#10;            var login64 = base64.fromByteArray(loginUint);&#10;            options.headers.Authorization =  'Basic ' + login64;&#10;        }&#10;&#10;        var command = 'repositories/' + repositoryName;&#10;        var args = {'query' : queryInput} ;&#10;&#10;        thiz.send('options', options);&#10;        thiz.send('command', command);&#10;        thiz.send('arguments', args);&#10;        thiz.send('trigger', true);&#10;    });&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/services/SemanticRepositoryQuery.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Perform a SPARQL query on a semantic repository such as GraphDB.&lt;/p&gt;&#10;&lt;p&gt; SPARQL is a W3C standard for querying semantic repositories,&#10; playing an analogous role to SQL with respect to relational&#10; databases. Semantic repositories fall within the domain of knowledge&#10; representation in AI and typically are implemented as a triplestore:&#10; entries in the repository have the form &amp;quot;subject&amp;quot;, &amp;quot;predicate&amp;quot;, &amp;quot;object&amp;quot;&#10; eg. &amp;quot;An Apple&amp;quot; &amp;quot;IsA&amp;quot; &amp;quot;Fruit&amp;quot;&lt;/p&gt;&#10;&lt;p&gt; An example SPARQL query to get a list of up to 100 triples in the repository:&lt;/p&gt;&#10;&lt;p&gt; select * where { &#10;     ?s ?p ?o .&#10; } limit 100&lt;/p&gt;&#10;&lt;p&gt; Documentation for SPARQL and the SPARQL Protocol can be found at&#10; https://&lt;a href=&quot;http://www.w3.org/TR/rdf-sparql-query/&quot;&gt;www.w3.org/TR/rdf-sparql-query/&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt; Information on GraphDB can be found at&#10; http://graphdb.ontotext.com/&lt;/p&gt;&#10;&lt;p&gt; SPARQL is also a protocol for communicating with RDF databases&#10; Upon receiving a query input, this accessor performs an http GET&#10; to the specified server and port with the querystring &amp;quot;query&amp;quot; set to the&#10; query input. The JSON response from the semantic repository (if any) is &#10; sent to the response output. Depending on the query type, the &#10; response will be JSON &amp;quot;sparql-results&amp;quot; or &amp;quot;rdf+json&amp;quot;&lt;/p&gt;&#10;&lt;p&gt; This accessor does not block waiting for the response, but if any additional&#10; &lt;em&gt;query&lt;/em&gt; input is received before a pending request has received a response&#10; or timed out, then the new request will be queued and sent out only after&#10; the pending request has completed. This strategy ensures that outputs are&#10; produced in the same order as the input requests.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Matt Weber">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: SemanticRepository.js 1725 2017-05-19 22:59:11Z cxh $$">
            </property>
            <property name="query (port)" class="ptolemy.kernel.util.StringAttribute" value="The SPARQL query to be sent to the semantic repository.&#10;  Types of queries yielding a response are: SELECT, CONSTRUCT, ASK, and DESCRIBE">
            </property>
            <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" value="An object containing the raw response from the service conforming&#10;  to the SPARQL protocol. If the query type was SELECT or ASK the response will be&#10;  JSON &quot;sparql-results&quot;. If the query type was CONSTRUCT or DESCRIBE the response&#10;  will be &quot;rdf+json&quot;.">
            </property>
            <property name="protocol (parameter)" class="ptolemy.kernel.util.StringAttribute" value="Either http or https.">
            </property>
            <property name="host (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The URL for the semantic repository.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port for the semantic repository.">
            </property>
            <property name="repositoryName (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the particular repository on the host.">
            </property>
            <property name="authenticate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, enable authentication to an access controlled&#10;  semantic repository by sending username and password with request. If false, username &#10;  and password information will not be sent. An error will occur if the http protocol is&#10;  selected with a true authenticate setting to avoid sending username/password information&#10;  in plain text.">
            </property>
            <property name="username (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A username for an access controlled semantic repository.">
            </property>
            <property name="password (parameter)" class="ptolemy.kernel.util.StringAttribute" value="A password for an access controlled semantic repository.">
            </property>
            <property name="timeout (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The amount of time (in milliseconds) to wait for a response&#10;  before triggering a null response and an error. This defaults to 20000.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="command" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="arguments" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="protocol" class="ptolemy.data.expr.Parameter" value="https">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="host" class="ptolemy.data.expr.Parameter" value="wessel.eecs.berkeley.edu">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="repositoryName" class="ptolemy.data.expr.Parameter" value="Adapters">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="username" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="password" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{50.0, 330.0}">
        </property>
        <property name="authenticate" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="command" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="arguments" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="body" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="response" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="status" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="headers" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="query" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="ParseResults" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function(){&#10;    this.input(&quot;result&quot;);&#10;    this.output(&quot;accessorName&quot;, {&#10;        type: 'string'&#10;    });&#10;};&#10;&#10;exports.fire = function(){&#10;    var result = this.get('result');&#10;    var accessorName = result.results.bindings[0].accessorURI.value&#10;    this.send('accessorName', accessorName);&#10;}">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[225.0, 330.0]">
        </property>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="accessorName" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="QueryGenerator" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function(){&#10;    this.parameter(&quot;temperatureOntology&quot;, {&#10;        type: 'string',&#10;        value: 'Kelvin',&#10;        options: [&quot;Kelvin&quot;, &quot;Celsius&quot;, &quot;Fahrenheit&quot;]&#10;    });&#10;&#10;    this.output(&quot;query&quot;, {&#10;        type: 'string',&#10;        spontaneous: true&#10;    });&#10;};&#10;&#10;exports.initialize = function(){&#10;    var query = &quot;PREFIX adapters: &lt;http://ptolemy.berkeley.edu/adapters#&gt;&quot; +&#10;            &quot;select * where{&quot; +&#10;            &quot;?a adapters:MatchesTo adapters:Fahrenheit.&quot; +&#10;            &quot;?a adapters:MatchesFrom adapters:&quot; + this.getParameter('temperatureOntology') + &quot;.&quot; +&#10;            &quot;?accessorURI adapters:Implements ?a.&quot; +&#10;                &quot;}&quot;&#10;    this.send(&quot;query&quot;, query);&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[-115.0, 330.0]">
        </property>
        <property name="temperatureOntology" class="ptolemy.data.expr.Parameter" value="$SourceTemperatureOntology">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="query" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
    </entity>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[570.0, 435.0]">
        </vertex>
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[280.0, 345.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="GetAccessor.resource" relation="relation10"/>
    <link port="GetAccessor.trigger" relation="relation10"/>
    <link port="GetAccessor.output" relation="relation6"/>
    <link port="Mutable.accessor" relation="relation6"/>
    <link port="Mutable.state" relation="relation5"/>
    <link port="Mutable.in" relation="relation4"/>
    <link port="Mutable.out" relation="relation3"/>
    <link port="Display.input" relation="relation3"/>
    <link port="TemperatureValue.output" relation="relation4"/>
    <link port="TemperatureValue.trigger" relation="relation2"/>
    <link port="MicrostepDelay.input" relation="relation5"/>
    <link port="MicrostepDelay.output" relation="relation2"/>
    <link port="SemanticRepositoryQuery.response" relation="relation8"/>
    <link port="SemanticRepositoryQuery.query" relation="relation"/>
    <link port="ParseResults.result" relation="relation8"/>
    <link port="ParseResults.accessorName" relation="relation10"/>
    <link port="QueryGenerator.query" relation="relation"/>
</entity>
