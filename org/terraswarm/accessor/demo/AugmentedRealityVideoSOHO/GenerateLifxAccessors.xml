<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="GenerateLifxAccessors" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.0.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="5">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[90.0, 265.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="An augmented reality&#10;demo using this service&#10;is here:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[35.0, 445.0]">
        </property>
    </property>
    <property name="Sender" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="AugmentedRealityVideoSOHO">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="{35.0, 505.0}">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/AugmentedRealityVideoSOHO.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model uses a key-value store running on &#10;192.168.1.217&#10;You need not start up key-value store, but if you&#10;want to look at it, then click on the link below:&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[505.0, 450.0]">
        </property>
    </property>
    <property name="Sender2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="KeyValueStoreServerSOHOModel">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[510.0, 530.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/KeyValueStoreServerSOHO.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={165, 153, 1244, 743}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[1010, 633]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0105263157894737">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{512.4073660714287, 296.20005580357144}">
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Author: Chadlia Jerad&#10;Based on GenerateHueAccessor by Christopher Brooks">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[35.0, 560.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model reads from the lifxs.json file the Lifx mac addresses and their corresponding atag.&#10;&#10;After running Lifx discovery, the bulbs (identified through their macAddresses) will have their &#10;corrsponding ipAddress and port number &#10;&#10;The model generates accessors that are added to the key-value store. The '@macAddress@',&#10;'@ipAddress'@ and '@port@' strings are respectiveley substituted with the macAddress, ipAddress &#10;and port from the previous step.&#10;&#10;Click on the link below to open the template:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 5.0]">
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="LifxAccessorTemplate.js">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[35.0, 180.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/LifxAccessorTemplate.js">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{125, 125}">
            </property>
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <entity name="Errors" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={856, 415, 499, 189}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[610.0, 395.0]">
        </property>
    </entity>
    <entity name="KeyValueStore" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor reads or writes data to a key-value store web service whenever&#10; *  it receives a trigger input.&#10; *  A URL for the service is specified by the &lt;i&gt;storeLocation&lt;/i&gt; parameter.&#10; *  A Ptolemy II model that provides such a key-value store service can be found&#10; *  at https://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml.&#10; *  A demo client that uses this accessor is provided at&#10; *  https://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml.&#10; *&#10; *  The key and the value are both text items provided as inputs.&#10; *  If &lt;i&gt;remove&lt;/i&gt; is true and the &lt;i&gt;key&lt;/i&gt; is non-empty, then upon firing, this actor&#10; *  will remove the specified key from the store, producing on its output the previous&#10; *  value (if any). If &lt;i&gt;remove&lt;/i&gt; is false, then this actor will either set or&#10; *  retrieve a value in the key-value store, depending on whether the&#10; *  &lt;i&gt;value&lt;/i&gt; input is non-empty. If the &lt;i&gt;value&lt;/i&gt; is non-empty, then this&#10; *  actor sets the value for the specified key.&#10; *  If it is empty, then this actor retrieves the value for the specified key.&#10; *  If no key is given, then this actor retrieves an array of all the keys&#10; *  in the key-value store.&#10; *&#10; *  If an error occurs accessing the key-value store (e.g., no store is found at the specified&#10; *  URL, or no value is found with the specified key),&#10; *  then an exception is thrown.&#10; *&#10; *  This accessor assumes that the protocol implemented at that location matches&#10; *  the specification below for the default location:&#10; *&#10; *  * To store a value with key MY_ID and value MY_VALUE, use&#10; *&#10; *      http://localhost:8077/keyvalue/set?id=MY_ID&amp;value=MY_VALUE&#10; *&#10; *  * To retrieve the value, use&#10; *&#10; *      http://localhost:8077/keyvalue/get?id=MY_ID&#10; *&#10; *  * To remove a value, use&#10; *&#10; *      http://localhost:8077/keyvalue/delete?id=MY_ID&#10; *&#10; *  * To list all the keys, use&#10; *&#10; *      http://localhost:8077/keyvalue/list&#10; *&#10; *  The key and value are both&#10; *  encoded using the JavaScript encodeURIComponent() function,&#10; *  and on retrieval, decoded using decodeURIComponent(),&#10; *  and hence can include any text characters.&#10; *&#10; *  Note that this accessor uses nonblocking reads to access the store,&#10; *  so the output is produced later when the server responds.&#10; *&#10; *  @accessor net/KeyValueStore&#10; *  @input {string} storeLocation The URL of the key-value store service.&#10; *  @input {string} key The key to be updated or retrieved.&#10; *  @input {boolean} remove If true, then remove the key from the store;&#10; *   otherwise, retrieve the value for the key.&#10; *  @input {string} value The value to store in the key-value store,&#10; *   or empty to not store anything.&#10; *  @input trigger The trigger input.&#10; *  @output {string} result The value retrieved from or written to&#10; *   the key-value store.&#10; *&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*global console, error, exports, readURL */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var httpClient = require('@accessors-modules/http-client');&#10;&#10;exports.setup = function () {&#10;    this.input('storeLocation', {&#10;        'type': 'string',&#10;        'value': 'http://localhost:8077/keyvalue'&#10;    });&#10;    this.input('key', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('remove', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.input('value', {&#10;        'type': 'string'&#10;    });&#10;    this.input('trigger');&#10;    this.output('result', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;};&#10;&#10;var inputHandler = null;&#10;exports.initialize = function() {&#10;    inputHandler = this.addInputHandler('trigger', handleInputs.bind(this));&#10;}&#10;&#10;function handleInputs() {&#10;    var store = this.get('storeLocation');&#10;    var theKey = this.get('key');&#10;    var toRemove = this.get('remove');&#10;    var theValue = this.get('value');&#10;    var thiz = this;&#10;    if (toRemove) {&#10;        if (theKey !== &quot;&quot;) {&#10;            httpClient.get(url, function(response) {&#10;                var produce = response.body;&#10;                var url = store + '/delete?id=' + theKey;&#10;                // FIXME: This should use HTTP delete not get.&#10;                httpClient.get(url, function(response) {&#10;                    if (checkResponse(response, thiz) &amp;&amp; produce !== &quot;&quot;) {&#10;                        thiz.send('result', produce);&#10;                    }&#10;                });&#10;            });&#10;        }&#10;    } else {&#10;        // toRemove == false. If there is a value, use it to set.&#10;        if (theValue !== &quot;&quot; &amp;&amp; theValue !== null) {&#10;            if (!theKey) {&#10;                thiz.error(&quot;Invalid key: &quot; + theKey + &quot; for value: &quot; + theValue);&#10;                return;&#10;            }&#10;            // FIXME: encodeURIComponent is not defined as a top-level accessor function.&#10;            var url = store + '/set?id=' + encodeURIComponent(theKey);&#10;            var options = {&#10;                'url':url,&#10;                'body':theValue&#10;            };&#10;            httpClient.post(options, function(response) {&#10;                if (checkResponse(response, thiz)) {&#10;                    thiz.send('result', theValue);&#10;                }&#10;            });&#10;        } else {&#10;            var url;&#10;            if (theKey) {&#10;                url = store + '/get?id=' + theKey;&#10;            } else {&#10;                url = store + '/list';&#10;            }&#10;            httpClient.get(url, function(response) {&#10;                if (checkResponse(response, thiz)) {&#10;                    var valueFromStore = decodeURIComponent(response.body);&#10;                    thiz.send('result', valueFromStore);&#10;                }&#10;            });&#10;        }&#10;    }&#10;};&#10;&#10;function checkResponse(response, thiz) {&#10;    if (response.statusCode &gt;= 400) {&#10;        thiz.error('Server responds with '&#10;                + response.statusCode&#10;                + ': '&#10;                + response.statusMessage);&#10;        return false;&#10;    } else if (response.statusCode &gt;= 300) {&#10;        thiz.error('Server responds with a redirect, no supported yet, code '&#10;                + response.statusCode&#10;                + ': '&#10;                + response.statusMessage);&#10;        return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;exports.wrapup = function() {&#10;    if (inputHandler !== null) {&#10;        this.removeInputHandler(inputHandler);&#10;        inputHandler = null;&#10;    }&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/KeyValueStore.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor reads or writes data to a key-value store web service whenever&#10; it receives a trigger input.&#10; A URL for the service is specified by the &lt;i&gt;storeLocation&lt;/i&gt; parameter.&#10; A Ptolemy II model that provides such a key-value store service can be found&#10; at https://&lt;a href=&quot;http://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&quot;&gt;www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&lt;/a&gt;.&#10; A demo client that uses this accessor is provided at&#10; https://&lt;a href=&quot;http://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&quot;&gt;www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt; The key and the value are both text items provided as inputs.&#10; If &lt;i&gt;remove&lt;/i&gt; is true and the &lt;i&gt;key&lt;/i&gt; is non-empty, then upon firing, this actor&#10; will remove the specified key from the store, producing on its output the previous&#10; value (if any). If &lt;i&gt;remove&lt;/i&gt; is false, then this actor will either set or&#10; retrieve a value in the key-value store, depending on whether the&#10; &lt;i&gt;value&lt;/i&gt; input is non-empty. If the &lt;i&gt;value&lt;/i&gt; is non-empty, then this&#10; actor sets the value for the specified key.&#10; If it is empty, then this actor retrieves the value for the specified key.&#10; If no key is given, then this actor retrieves an array of all the keys&#10; in the key-value store.&lt;/p&gt;&#10;&lt;p&gt; If an error occurs accessing the key-value store (e.g., no store is found at the specified&#10; URL, or no value is found with the specified key),&#10; then an exception is thrown.&lt;/p&gt;&#10;&lt;p&gt; This accessor assumes that the protocol implemented at that location matches&#10; the specification below for the default location:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;To store a value with key MY_ID and value MY_VALUE, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/set?id=MY_ID&amp;amp;value=MY_VALUE&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;To retrieve the value, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/get?id=MY_ID&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;To remove a value, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/delete?id=MY_ID&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;To list all the keys, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/list&lt;/p&gt;&#10;&lt;p&gt;The key and value are both&#10;encoded using the JavaScript encodeURIComponent() function,&#10;and on retrieval, decoded using decodeURIComponent(),&#10;and hence can include any text characters.&lt;/p&gt;&#10;&lt;p&gt;Note that this accessor uses nonblocking reads to access the store,&#10;so the output is produced later when the server responds.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="storeLocation (port)" class="ptolemy.kernel.util.StringAttribute" value="The URL of the key-value store service.">
            </property>
            <property name="key (port)" class="ptolemy.kernel.util.StringAttribute" value="The key to be updated or retrieved.">
            </property>
            <property name="remove (port)" class="ptolemy.kernel.util.StringAttribute" value="If true, then remove the key from the store;&#10;  otherwise, retrieve the value for the key.">
            </property>
            <property name="value (port)" class="ptolemy.kernel.util.StringAttribute" value="The value to store in the key-value store,&#10;  or empty to not store anything.">
            </property>
            <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" value="The value retrieved from or written to&#10;  the key-value store.">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="The trigger input.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="storeLocation" class="ptolemy.actor.parameters.PortParameter" value="http://192.168.1.217:8099/keyvalue">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="key" class="ptolemy.actor.parameters.PortParameter" value="586">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[525.0, 340.0]">
        </property>
        <port name="storeLocation" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="key" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="remove" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
        </port>
        <port name="value" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="result" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="Accessors" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={991, 497, 929, 583}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[929, 558]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[395.0, 450.0]">
        </property>
    </entity>
    <entity name="AprilTagIDs" class="ptolemy.actor.lib.gui.TimedDisplay">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={668, 773, 499, 189}, maximized=false}">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[499, 164]">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[450.0, 240.0]">
        </property>
    </entity>
    <entity name="TestSpontaneousOnce" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Test accessor that spontaneously produces outputs once.&#10;//&#10;// Copyright (c) 2016-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** Test accessor that spontaneously produces outputs once per time interval.&#10; *  This implementation produces a counting sequence.&#10; *&#10; *  @accessor test/TestSpontaneousOnce&#10; *  @parameter delay The delay in milliseconds before the value is outputk.&#10; *  @parameter value The value to be output after the delay.&#10; *  @output output The output port&#10; *  @author Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals clearTimeout, console, error, exports, require, setTimeout */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;exports.setup = function () {&#10;    this.parameter('delay', {&#10;        'type': 'number',&#10;        'value': 1000&#10;    });&#10;    this.parameter('value', {&#10;        'value': true&#10;    }); &#10;    this.output('output');&#10;};&#10;&#10;// These variables will not be visible to subclasses.&#10;var handle = null;&#10;&#10;exports.initialize = function () {&#10;    // Need to record 'this' for use in the callback.&#10;    var thiz = this;&#10;    handle = setTimeout(function () {&#10;        thiz.send('output', thiz.getParameter('value'));&#10;    }, this.getParameter('delay'));&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        clearTimeout(handle);&#10;        handle = null;&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/test/TestSpontaneousOnce.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Test accessor that spontaneously produces outputs once per time interval.&#10; This implementation produces a counting sequence.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Christopher Brooks and Edward A. Lee. Based on TestSpontaneous by Edward A. Lee">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="The output port">
            </property>
            <property name="delay (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The delay in milliseconds before the value is outputk.">
            </property>
            <property name="value (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The value to be output after the delay.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[55.0, 340.0]">
        </property>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="GenerateLifxAccessors" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="/** The key is the AprilTag ID, which is an integer and the&#10; *  value is the Hue ID.&#10; */&#10;var IdToLifxId = [];&#10;&#10;/** Setup the input and output ports.&#10; *  Read in the hue.json file and create an array that maps from AprilTag id&#10; *  to the hue ID name.&#10; */&#10;exports.setup = function() {&#10;    // Inputs&#10;    this.input('trigger');&#10;    &#10;    // Outputs&#10;    this.output('aprilTagId', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.output('accessor', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    &#10;    &#10;    this.parameter('file', {&#10;    	'type': 'string',&#10;    	'value': 'LifxAccessorTemplate.js'&#10;    });&#10;    &#10;    // Read in the lifxs.json file and create an array that maps&#10;	// AprilTag to Accessor.&#10;	var TagToAccessor = [];&#10;&#10;	var lifxs = JSON.parse(getResource('lifxs.json', 10000));&#10;	for (lifx in lifxs.lifxs) {&#10;		var theLifx = lifxs.lifxs[lifx];&#10;		if (typeof theLifx.atag !== 'undefined') {&#10;			var aprilTag = theLifx.atag;&#10;			aprilTag = parseInt(aprilTag, 10);&#10;			IdToLifxId[aprilTag] = theLifx;&#10;			// console.log('TagToAccessor: AprilTag: ' + aprilTag + ', LifxId: ' + theLifx.macAddress);&#10;		}&#10;	}&#10;};&#10;&#10;exports.initialize = function() {&#10;    var thiz = this;&#10;    var aprilTagsSeen = [];&#10;    &#10;    // Each time we get a trigger, substitute in the macAddress, the ipAddress&#10;    // and the port, then output the accessor.&#10;    this.addInputHandler('trigger', function() { &#10;        // Instantiate a standAlone Lifx Accessor&#10;        // in order to run Lifx discovery.&#10;	    var discoverLifx = this.instantiate('discoverLifx', 'devices/Lifx', true);&#10;	    discoverLifx.setParameter('discoveryInterval', 10000);&#10;	    discoverLifx.initialize();&#10;	    discoverLifx.provideInput('triggerDiscovery', 1);&#10;	    discoverLifx.react();&#10;	    &#10;	    var discoveredLifxBulbs;&#10;	    &#10;	    var handleDiscovery = setInterval(function() {&#10;	    	discoveredLifxBulbs = discoverLifx.latestOutput('discovered');&#10;	    	if (discoveredLifxBulbs) {&#10;	    		// Stop discovery&#10;	    		clearInterval(handleDiscovery);&#10;		&#10;	    		// We can distroy now the discoverLifx&#10;	    		discoverLifx.wrapup();&#10;	    		discoverLifx = null;&#10;	    		&#10;	    		// Now generate the accessors&#10;			    var lifxAccessorTemplate = getResource(getParameter('file', 2000));&#10;		    	for (var aprilTag in IdToLifxId) {&#10;		    		if (typeof aprilTagsSeen[aprilTag] === 'undefined' ) {&#10;		    			aprilTagsSeen[aprilTag] = true;&#10;		    			var macAddress = IdToLifxId[aprilTag].macAddress;&#10;		    			discoveredLifxBulbs.forEach(function(lb) {&#10;		    				if (lb.macAddress === macAddress) {&#10;		    					var ipAddress = lb.ipAddress;&#10;		    					var port = lb.port;&#10;		    					var accessor = lifxAccessorTemplate.replace(/@ipAddress@/, ipAddress);&#10;		        				var accessor = accessor.replace(/@macAddress@/, macAddress);&#10;		        				var accessor = accessor.replace(/@port@/, port);&#10;		        				thiz.send('aprilTagId', aprilTag);&#10;		        				thiz.send('accessor', accessor);&#10;		    				}&#10;		    			});&#10;		    		}&#10;		    	}&#10;		    	// We are done! &#10;		    	thiz.wrapup();&#10;	    	};&#10;	    }, 2000);&#10;    });&#10;};&#10;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[222.08251953125, 340.0]">
        </property>
        <property name="file" class="ptolemy.data.expr.Parameter" value="LifxAccessorTemplate.js">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="aprilTagId" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="accessor" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[370.0, 330.0]">
        </vertex>
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[320.0, 350.0]">
        </vertex>
    </relation>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="Errors.input" relation="relation6"/>
    <link port="KeyValueStore.error" relation="relation6"/>
    <link port="KeyValueStore.key" relation="relation3"/>
    <link port="KeyValueStore.value" relation="relation4"/>
    <link port="KeyValueStore.trigger" relation="relation4"/>
    <link port="Accessors.input" relation="relation4"/>
    <link port="AprilTagIDs.input" relation="relation3"/>
    <link port="TestSpontaneousOnce.output" relation="relation"/>
    <link port="GenerateLifxAccessors.trigger" relation="relation"/>
    <link port="GenerateLifxAccessors.aprilTagId" relation="relation3"/>
    <link port="GenerateLifxAccessors.accessor" relation="relation4"/>
</entity>
