<?xml version="1.0" standalone="no"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN"
    "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity name="AugmentedRealityVideoSOHO" class="ptolemy.actor.TypedCompositeActor">
    <property name="_createdBy" class="ptolemy.kernel.attributes.VersionAttribute" value="11.1.devel">
    </property>
    <property name="DE Director" class="ptolemy.domains.de.kernel.DEDirector">
        <property name="stopTime" class="ptolemy.data.expr.Parameter" value="">
        </property>
        <property name="stopWhenQueueIsEmpty" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="synchronizeToRealTime" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[60.0, 205.0]">
        </property>
    </property>
    <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={0, 23, 1210, 800}, maximized=false}">
    </property>
    <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[976, 690]">
    </property>
    <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
    </property>
    <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{488.0, 345.0}">
    </property>
    <property name="_layoutConfiguration" class="ptolemy.vergil.basic.layout.ActorLayoutConfiguration">
        <property name="includeDecorations" class="ptolemy.data.expr.Parameter" value="false">
            <display name="Include decorations"/>
        </property>
        <property name="spacing" class="ptolemy.actor.parameters.DoubleRangeParameter" value="2.0">
            <display name="Object spacing"/>
        </property>
        <property name="logAspectRatio" class="ptolemy.actor.parameters.DoubleRangeParameter" value="-1.0">
            <display name="Aspect ratio"/>
        </property>
    </property>
    <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model is for the TerraSwarm demo, where the test environment is a Small Office/Home Office (SOHO) router with a:&#10;* SwarmGateway (192.168.1.200) that acts as a Bluetooth Low Energry (BLE) Gateway that allow&#10;   access to local MQTT devices and optionally publishes to the GDP.&#10;* SwarmBox (192.168.1.217) that acts as the key-value store &#10;&#10;This model looks for AR tags in the camera's field of view, then using the ID of the AR tag, fetches an&#10;accessor from a key-value store, reifies it, and then overlays the sensor data provided&#10;by the accessor on the image. If the accessor provides a schema, then it will also&#10;construct a form for data entry to be sent back to the accessor.">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 10.0]">
        </property>
    </property>
    <property name="Annotation2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.6,0.6,0.6,1.0}">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Authors: Christopher Brooks, Edward A. Lee">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 655.0]">
        </property>
    </property>
    <property name="Annotation3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="This model uses a key-value store which is assumed&#10;to be running on the address specified below.&#10;The key-value store service is defined by this model:&#10;">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 435.0]">
        </property>
    </property>
    <property name="Sender" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="KeyValueStoreServerSOHO Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 490.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/KeyValueStoreServerSOHO.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="Annotation4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="To get a service to access, you can also run the companion&#10;SoundServerSOHO.xml model, which provides an a sound&#10;actuator that reacts to commands:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 540.0]">
        </property>
    </property>
    <property name="Sender2" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="SoundServerSOHO Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 605.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/SoundServerSOHO.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="storeLocation" class="ptolemy.data.expr.StringParameter" value="192.168.1.217:8099">
        <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
            <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
            </property>
        </property>
        <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
            <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
        </property>
        <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 525.0]">
        </property>
    </property>
    <property name="Sender3" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="tag36h11-19-29.pdf">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 325.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/tag36h11-19-29.pdf">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="Annotation6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textSize" class="ptolemy.data.expr.Parameter" value="12">
        </property>
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Open the file below &#10;and take a picture&#10;with your phone&#10;camera.&#10;Tag 21 is the light&#10;Tag 22 is the BLEE">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[10.0, 230.0]">
        </property>
    </property>
    <property name="enableBackwardTypeInference" class="ptolemy.data.expr.Parameter" value="false">
    </property>
    <property name="Annotation5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="You can also run the companion GenerateMQTTAccessors.xml&#10;model, which generates accessors for MQTT topics listed in&#10;mqtts.json and uploads them to the key-value store:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[515.0, 430.0]">
        </property>
    </property>
    <property name="Sender4" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="GenerateMQTTAccessors Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 485.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/GenerateMQTTAccessors.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="Annotation7" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="You can also run the companion GenerateHueAccessors.xml&#10;model, which generates accessors for Hue bulbs listed in&#10;hues.json and uploads them to the key-value store:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[515.0, 515.0]">
        </property>
    </property>
    <property name="Sender5" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="GenerateHueAccessors Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 575.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/GenerateHueAccessors.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <property name="Annotation8" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="textColor" class="ptolemy.actor.gui.ColorAttribute" value="{0.8,0.0,0.0,1.0}">
        </property>
        <property name="bold" class="ptolemy.data.expr.Parameter" value="true">
        </property>
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="You can also run the companion GenerateLifxAccessors.xml&#10;model, which generates accessors for Lifx bulbs listed in&#10;lifxs.json and uploads them to the key-value store:">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 600.0]">
        </property>
    </property>
    <property name="Sender6" class="ptolemy.vergil.kernel.attributes.TextAttribute">
        <property name="text" class="ptolemy.kernel.util.StringAttribute" value="GenerateLifxAccessors Model">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[520.0, 660.0]">
        </property>
        <property name="LiveLink" class="ptolemy.actor.gui.LiveLink" value="$CLASSPATH/org/terraswarm/accessor/demo/AugmentedRealityVideoSOHO/GenerateLifxAccessors.xml">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{0.0, 0.0, 1.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:blue" y="20">LL</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{395, 280}">
            </property>
        </property>
        <property name="IconLink" class="ptolemy.vergil.basic.export.web.IconLink" value="">
            <property name="linkTarget" class="ptolemy.vergil.basic.export.web.LinkTarget" value="_blank">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{340, 390}">
            </property>
        </property>
    </property>
    <entity name="ObjectRecognizer" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2016 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/**&#10; * Accessor to detect AprilTags in an image or stream of images.&#10; * An AprilTag is a pattern of dark and light squares similar to a QR code but easier for&#10; * cameras to detect robustly and at a distance.&#10; * AprilTags were created by Associate Professor Edwin Olson (ebolson@umich.edu),&#10; * EECS, University of Michigan. See [https://april.eecs.umich.edu/](https://april.eecs.umich.edu/#in_browser).&#10; * &#10; * The implementation of this accessor on the Ptolemy II/Nashorn accessor host&#10; * uses an older Java implementation of the AprilTags detector written by Edwin Olson&#10; * and more recently supplanted by a C version that performs much better. But this Java&#10; * version is more easily included in Ptolemy II in a portable way. If you need better&#10; * performance, consider replacing this with the C implementation and using JNI to interface&#10; * to Ptolemy II.&#10; * &#10; * https://april.eecs.umich.edu/software/apriltag.html contains a set of&#10; * pregenerated tags as png and PostScript files.  However, these are of&#10; * low resolution.  To scale them, use linear interpolation to avoid blurring.&#10; * For example, with ImageMagik, use:&#10; *&#10; *  mogrify -scale 1000x1000 *.png; convert *.png tag36h11.pdf&#10; *&#10; * Or, search the web for &quot;tag 36H11&quot;.  &#10; *&#10; * In the Ptolemy tree, a sample file may be found at&#10; * $PTII/ptolemy/actor/lib/jjs/modules/aprilTags//demo/AprilTags/tag36_11_00586.pdf&#10; *&#10; * The input to this accessor is an image or a stream of images, e.g. from the Camera&#10; * accessor.  There are two outputs. The one named _output_ is a modified version&#10; * of the input image that outlines any detected AprilTags in the image&#10; * and indicates their center and ID.  The _tags_ output is an array of&#10; * objects representing the detected tags. Each object includes the following fields:&#10; * &#10; * + _id_: The ID of the detected tag.&#10; * + _center_: An array with two doubles giving the center of the tag in pixel coordinates.&#10; * + _perimeter_: An array with four arrays, each of which gives the x and y coordinates of&#10; *   a corner of the AprilTag.&#10; * &#10; * The AprilTags detector has a large number of parameters that can be tuned via&#10; * the _options_ input. To set an option, provide a JSON object with a field matching&#10; * the option name.  The options are described below using descriptions provided by&#10; * by Edwin Olson in his Java implementation of an AprilTag detector:&#10; * &#10; * + _MagThresh_: When growing components, the intra component variation is&#10; *   allowed to grow when the component is small in size. This&#10; *   threshold affects how much. The default is 1200.&#10; * + _MaxEdgeCost_: Set the maximum angle range allowed for the gradient directions&#10; *   when connecting edges, in radians. This defaults to the radian&#10; *   equivalent of 30 degrees.&#10; * + _MinMag_: Set the gradient magnitude threshold for ignoring pixels.&#10; *   Do not consider pixels whose gradient magnitude is less than&#10; *   minMag. Small values make the detector more sensitive, but also&#10; *   force us to consider many more edges resulting in slower&#10; *   computation time. A value of 0.001 is very sensitive. A value&#10; *   of 0.01 is quite fast. The default is 0.004.&#10; * + _SegDecimate_: Set whether decimating before segmenting is enabled.&#10; *   Instead of blurring the input image before segmentation, we&#10; *   can achieve similar effects by decimating the image by a factor&#10; *   of two. When enabled, this option applies a block LPF filter of&#10; *   width 2, then decimates the image. With this option, not only&#10; *   can we safely set segSigma = 0, but the slowest part of the&#10; *   algorithm (the segmentation) runs about 4 times faster. The&#10; *   downside is that the position of the targets is determined&#10; *   based on the segmentation: lower resolution will result in more&#10; *   localization error. However, the effect on quality is quite&#10; *   modest, and this optimization is generally recommended (along&#10; *   with segSigma = 0). If segSigma is non-zero, the filtering by&#10; *   segSigma occurs first, followed by the block LPF, and the&#10; *   decimation. This defaults to false, indicating that the option&#10; *   is not enabled.&#10; * + _SegSigma_: Set the Gaussian smoothing kernel applied to image (0 == no filter)&#10; *   used when detecting the outline of the box. It is almost always&#10; *   useful to have some filtering, since the loss of small details&#10; *   won't hurt. Recommended value = 0.8 (the default). The case where sigma ==&#10; *   segsigma has been optimized to avoid a redundant filter&#10; *   operation.&#10; * + _Sigma_: Set the Gaussian smoothing kernel applied to image (0 == no filter, the default)&#10; *   used when sampling bits. Filtering is a good idea in cases&#10; *   where A) a cheap camera is introducing artifical sharpening, B)&#10; *   the bayer pattern is creating artifcats, C) the sensor is very&#10; *   noisy and/or has hot/cold pixels. However, filtering makes it&#10; *   harder to decode very small tags. Reasonable values are 0, or&#10; *   [0.8, 1.5].&#10; * + _TagFamily_: Set the name of the tag family being detected.&#10; *   This defaults to &quot;Tag36h11&quot;.&#10; *   The supported families are &quot;Tag16h5&quot;, &quot;Tag25h7&quot;, &quot;Tag25h9&quot;, &quot;Tag36h10&quot;, and &quot;Tag36h11&quot;.&#10; *   The default family seems least susceptible to false positives.&#10; * + _ThetaThresh_: When growing components, the intra component variation is&#10; *   allowed to grow when the component is small in size. This&#10; *   threshold affects how much. The default is 100.&#10; * &#10; *   @accessor image/AprilTags&#10; *   @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *   @input input An input image.&#10; *   @output output An output image, with detected AprilTags outlined in green and identified.&#10; *   @output tags An array of objects, one object for each tag detected in the image.&#10; *   @parameter options The options for the detector. This is a JSON object with fields defined above.&#10; *   It defaults to an empty object, meaning to use default values for all the otpions.&#10; *   @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*globals addInputHandler, exports, get, input, output, removeInputHandler, require, send,  */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var aprilTags = require('aprilTags');&#10;&#10;exports.setup = function () {&#10;    this.input('input');&#10;    this.output('output');&#10;    this.output('tags');&#10;    this.input('options', {&#10;        'type': 'JSON',&#10;        'value': ''&#10;    });&#10;};&#10;&#10;var handle;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    handle = self.addInputHandler('input', function () {&#10;        var options = self.get('options');&#10;        var image = self.get('input');&#10;        var result = aprilTags.filter(image, options);&#10;        self.send('output', result);&#10;        var tags = aprilTags.tags();&#10;        if (tags) {&#10;            self.send('tags', tags);&#10;        }&#10;    });&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (handle) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/image/AprilTags.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor to detect AprilTags in an image or stream of images.&#10;An AprilTag is a pattern of dark and light squares similar to a QR code but easier for&#10;cameras to detect robustly and at a distance.&#10;AprilTags were created by Associate Professor Edwin Olson (&lt;a href=&quot;mailto:ebolson@umich.edu&quot;&gt;ebolson@umich.edu&lt;/a&gt;),&#10;EECS, University of Michigan. See &lt;a href=&quot;https://april.eecs.umich.edu/#in_browser&quot;&gt;https://april.eecs.umich.edu/&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;The implementation of this accessor on the Ptolemy II/Nashorn accessor host&#10;uses an older Java implementation of the AprilTags detector written by Edwin Olson&#10;and more recently supplanted by a C version that performs much better. But this Java&#10;version is more easily included in Ptolemy II in a portable way. If you need better&#10;performance, consider replacing this with the C implementation and using JNI to interface&#10;to Ptolemy II.&lt;/p&gt;&#10;&lt;p&gt;https://april.eecs.umich.edu/software/apriltag.html contains a set of&#10;pregenerated tags as png and PostScript files.  However, these are of&#10;low resolution.  To scale them, use linear interpolation to avoid blurring.&#10;For example, with ImageMagik, use:&lt;/p&gt;&#10;&lt;p&gt; mogrify -scale 1000x1000 &lt;em&gt;.png; convert &lt;/em&gt;.png tag36h11.pdf&lt;/p&gt;&#10;&lt;p&gt;Or, search the web for &amp;quot;tag 36H11&amp;quot;.  &lt;/p&gt;&#10;&lt;p&gt;In the Ptolemy tree, a sample file may be found at&#10;$PTII/ptolemy/actor/lib/jjs/modules/aprilTags//demo/AprilTags/tag36_11_00586.pdf&lt;/p&gt;&#10;&lt;p&gt;The input to this accessor is an image or a stream of images, e.g. from the Camera&#10;accessor.  There are two outputs. The one named &lt;em&gt;output&lt;/em&gt; is a modified version&#10;of the input image that outlines any detected AprilTags in the image&#10;and indicates their center and ID.  The &lt;em&gt;tags&lt;/em&gt; output is an array of&#10;objects representing the detected tags. Each object includes the following fields:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;_id_: The ID of the detected tag.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;center&lt;/em&gt;: An array with two doubles giving the center of the tag in pixel coordinates.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;perimeter&lt;/em&gt;: An array with four arrays, each of which gives the x and y coordinates of&#10;a corner of the AprilTag.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;The AprilTags detector has a large number of parameters that can be tuned via&#10;the &lt;em&gt;options&lt;/em&gt; input. To set an option, provide a JSON object with a field matching&#10;the option name.  The options are described below using descriptions provided by&#10;by Edwin Olson in his Java implementation of an AprilTag detector:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;em&gt;MagThresh&lt;/em&gt;: When growing components, the intra component variation is&#10;allowed to grow when the component is small in size. This&#10;threshold affects how much. The default is 1200.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;MaxEdgeCost&lt;/em&gt;: Set the maximum angle range allowed for the gradient directions&#10;when connecting edges, in radians. This defaults to the radian&#10;equivalent of 30 degrees.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;MinMag&lt;/em&gt;: Set the gradient magnitude threshold for ignoring pixels.&#10;Do not consider pixels whose gradient magnitude is less than&#10;minMag. Small values make the detector more sensitive, but also&#10;force us to consider many more edges resulting in slower&#10;computation time. A value of 0.001 is very sensitive. A value&#10;of 0.01 is quite fast. The default is 0.004.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;SegDecimate&lt;/em&gt;: Set whether decimating before segmenting is enabled.&#10;Instead of blurring the input image before segmentation, we&#10;can achieve similar effects by decimating the image by a factor&#10;of two. When enabled, this option applies a block LPF filter of&#10;width 2, then decimates the image. With this option, not only&#10;can we safely set segSigma = 0, but the slowest part of the&#10;algorithm (the segmentation) runs about 4 times faster. The&#10;downside is that the position of the targets is determined&#10;based on the segmentation: lower resolution will result in more&#10;localization error. However, the effect on quality is quite&#10;modest, and this optimization is generally recommended (along&#10;with segSigma = 0). If segSigma is non-zero, the filtering by&#10;segSigma occurs first, followed by the block LPF, and the&#10;decimation. This defaults to false, indicating that the option&#10;is not enabled.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;SegSigma&lt;/em&gt;: Set the Gaussian smoothing kernel applied to image (0 == no filter)&#10;used when detecting the outline of the box. It is almost always&#10;useful to have some filtering, since the loss of small details&#10;won't hurt. Recommended value = 0.8 (the default). The case where sigma ==&#10;segsigma has been optimized to avoid a redundant filter&#10;operation.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;Sigma&lt;/em&gt;: Set the Gaussian smoothing kernel applied to image (0 == no filter, the default)&#10;used when sampling bits. Filtering is a good idea in cases&#10;where A) a cheap camera is introducing artifical sharpening, B)&#10;the bayer pattern is creating artifcats, C) the sensor is very&#10;noisy and/or has hot/cold pixels. However, filtering makes it&#10;harder to decode very small tags. Reasonable values are 0, or&#10;[0.8, 1.5].&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;TagFamily&lt;/em&gt;: Set the name of the tag family being detected.&#10;This defaults to &amp;quot;Tag36h11&amp;quot;.&#10;The supported families are &amp;quot;Tag16h5&amp;quot;, &amp;quot;Tag25h7&amp;quot;, &amp;quot;Tag25h9&amp;quot;, &amp;quot;Tag36h10&amp;quot;, and &amp;quot;Tag36h11&amp;quot;.&#10;The default family seems least susceptible to false positives.&lt;/li&gt;&#10;&lt;li&gt;&lt;em&gt;ThetaThresh&lt;/em&gt;: When growing components, the intra component variation is&#10;allowed to grow when the component is small in size. This&#10;threshold affects how much. The default is 100.&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="input (port)" class="ptolemy.kernel.util.StringAttribute" value="An input image.">
            </property>
            <property name="output (port)" class="ptolemy.kernel.util.StringAttribute" value="An output image, with detected AprilTags outlined in green and identified.">
            </property>
            <property name="tags (port)" class="ptolemy.kernel.util.StringAttribute" value="An array of objects, one object for each tag detected in the image.">
            </property>
            <property name="options (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The options for the detector. This is a JSON object with fields defined above.&#10;  It defaults to an empty object, meaning to use default values for all the otpions.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="options" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[240.0, 270.0]">
        </property>
        <port name="options" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="input" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="output" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="ConstructUI" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// The spec input is expected to be HTML containing&#10;// a form to overlay on the image.&#10;exports.setup = function() {&#10;	this.input('reset', {'type':'string'});&#10;	this.input('translate');&#10;	this.input('data');&#10;	this.input('spec', {'type':'JSON'});&#10;	this.input('image');&#10;	this.output('html', {'type':'string'});&#10;	this.output('resources');&#10;	this.output('update', {'type':'JSON'});&#10;}&#10;&#10;exports.initialize = function() {&#10;	var self = this;&#10;	var htmlSent = false;&#10;	&#10;	this.addInputHandler('reset', function() {&#10;		var reset = this.get('reset');&#10;		if (reset == 'new') {&#10;			self.send('update', {&#10;            	'id': 'output',&#10;            	'property': 'html',&#10;            	'content': '&lt;b&gt;Looking for device&lt;/b&gt;',&#10;        	});&#10;		} else {&#10;			self.send('update', {&#10;				'id': 'output',&#10;            	'property': 'html',&#10;            	'content': '&lt;b&gt;No tags found&lt;/b&gt;',&#10;        	});&#10;			// Put the message in the upper right.&#10;            self.send('update', {&#10;            	'id': 'overlay',&#10;            	'property': 'style',&#10;            	'content': 'top:0%;left:0%',&#10;            });&#10;		}&#10;		self.send('update', {&#10;       		'id': 'input',&#10;       		'property': 'html',&#10;       		'content': '',&#10;       	});&#10;	});&#10;	&#10;	this.addInputHandler('spec', function() {&#10;		var content = self.get('spec');&#10;       	self.send('update', {&#10;       		'id': 'input',&#10;       		'property': 'html',&#10;       		'content': content,&#10;       	});&#10;	});&#10;&#10;	this.addInputHandler('image', function() {&#10;		var image = self.get('image');&#10;		// Send the new image, updating the resource named 'image.jpg'.&#10;		self.send('resources', {&#10;			'image.jpg': {&#10;				'data': image,&#10;				'contentType': 'image/jpeg'&#10;			}&#10;		});&#10;		// Send an update to force the browser to update the DOM img element.&#10;		self.send('update', {&#10;			'id':'image',&#10;			'property':'src',&#10;			'content':'image.jpg'&#10;		});&#10;		var html = '&lt;h1&gt;Augmented Reality Demo&lt;/h1&gt;\n';&#10;		&#10;		html += '&lt;form action=&quot;/&quot; method=&quot;post&quot; target=&quot;blankIframe&quot;&gt;\n\&#10;				&lt;input type=&quot;submit&quot; value=&quot;Next Tag&quot; name=&quot;next&quot; id=&quot;next&quot;/&gt;\n\&#10;			&lt;/form&gt;\n\&#10;			&lt;div id=&quot;container&quot;&gt;\n\&#10;		    &lt;img src=&quot;image.jpg&quot; id=&quot;image&quot; alt=&quot;Mechanical Room Image&quot;&gt;\n\&#10;		    &lt;div id=&quot;overlay&quot; style=&quot;top:0%;left:0%;&quot;&gt;\n\&#10;		        &lt;div id=&quot;output&quot;&gt;No data&lt;/div&gt;&lt;br/&gt;\n\&#10;		        &lt;div id=&quot;input&quot;&gt;&lt;/div&gt;\n\&#10;		    &lt;/div&gt;\n\&#10;		&lt;/div&gt;\n';&#10;		&#10;		// Firefox insists on displaying the response to the post,&#10;		// so we direct the response to a small iframe.&#10;		html += '&lt;iframe name=&quot;blankIframe&quot; id=&quot;blankIframe&quot; height=0 width=0/&gt;';&#10;		&#10;		if (!htmlSent) {&#10;			self.send('html', html);&#10;			htmlSent = true;&#10;		}&#10;	});&#10;	&#10;	this.addInputHandler('translate', function() {&#10;		var translate = self.get('translate');&#10;		if (translate !== null &amp;&amp; translate[0] !== null &amp;&amp; translate[1] !== null) {&#10;            var id = &quot;overlay&quot;;&#10;            var property = &quot;style&quot;;&#10;            // FIXME: Hardcoded to container width of 1000px and Height 700.&#10;            // Assume image is not scaled.&#10;            var left = 100*translate[0]/1000;&#10;            var top = 100*translate[1]/700;&#10;            var content = &quot;top:&quot; + top + &quot;%;left:&quot; + left + &quot;%;&quot;;&#10;            self.send('update', {&#10;            	'id': id,&#10;            	'property': property,&#10;            	'content': content,&#10;            });&#10;        }&#10;	});&#10;	&#10;	this.addInputHandler('data', function() {&#10;		var id = &quot;output&quot;;&#10;        var property = &quot;html&quot;;&#10;        var content = '&lt;table&gt;';&#10;        &#10;        var json = self.get('data');&#10;		try {&#10;			json = JSON.parse(json);&#10;		} catch(err) {&#10;			json = {'error': err.message};&#10;		}&#10;		&#10;		if (!json || Object.keys(json).length === 0) {&#10;			content += '&lt;tr&gt;&lt;td&gt;No Data&lt;/td&gt;&lt;/tr&gt;';&#10;		} else {&#10;			// If the keys have changed, then print a wait message.&#10;			var keys = '';&#10;			for (prop in json) {&#10;				keys += prop + ',';&#10;			}&#10;			for (prop in json) {&#10;				var value = util.inspect(json[prop]);&#10;				content += '&lt;tr&gt;&lt;td&gt;' + prop + '&lt;/td&gt;&lt;td&gt;' + value + '&lt;/td&gt;&lt;/tr&gt;';&#10;			}&#10;		}&#10;		content += '&lt;/table&gt;';&#10;&#10;        self.send('update', {&#10;        	'id': id,&#10;           	'property': property,&#10;           	'content': content,&#10;        });&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[685.0, 205.0]">
        </property>
        <port name="reset" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="translate" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="data" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="html" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="resources" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="update" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="spec" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="UserInterface" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Accessor that provides a user interface based on HTML5 on the local host.&#10;//&#10;// Copyright (c) 2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** Accessor that provides a user interface based on HTML5 on the local host.&#10; *  The initial content on the page may be specified using the *content*&#10; *  parameter and HTML header content may be specified using *header*.&#10; *  &#10; *  Whatever text is received on the *html* input port will replace the content&#10; *  of the web page. Normally, this will be HTML text without any DOCTYPE or&#10; *  header and without a body tag. Each time new text is received, the content&#10; *  of the page will be replaced.&#10; *  &#10; *  The page will be opened upon initialize if *content* is not empty.&#10; *  Otherwise, it will be opened when the first *html* input is received.&#10; *  &#10; *  The *resources* input can be used to provide resources, such as images,&#10; *  that will be used by the HTML content provided on the *html* input.&#10; *  Note that you probably will also have to provide an *update* input (see below)&#10; *  to force the user interface to update the page using the specified resource.&#10; *  &#10; *  The *update* input can be used to instruct the user interface to replace content&#10; *  within the page, vs. the *html* input which replaces the entire page.&#10; *  The value of an *update* input is expected to be an object with three properties,&#10; *  *id*, *property*, and *content*.&#10; *  &#10; *  The *id* property refers to a the ID of&#10; *  a DOM element in the content of the page, where the content has been provided&#10; *  either via the *content* parameter or the *html* input. For example, your&#10; *  page may include:&#10; *  &lt;pre&gt;&#10; *     &amp;lt;div id=&quot;foo&quot;&amp;gt;&amp;lt;/div&amp;gt;&#10; *  &lt;/pre&gt;&#10; *  or&#10; *  &lt;pre&gt;&#10; *     &amp;lt;img id=&quot;bar&quot; src=&quot;image.jpg&quot;/&amp;gt;&#10; *  &lt;/pre&gt;&#10; *   *  @param id The ID.&#10; *  The *property* field specifies what property of the DOM element with the&#10; *  specified ID is to be updated. If *property* is &quot;html&quot;, then the&#10; *  DOM object is updated by invoking the jQuery html() function&#10; *  with the specified *content* as an argument. For example, if *id* is &quot;foo&quot;,&#10; *  *property* is &quot;html&quot;, and *content* is &quot;Hello World!&quot;, then the above div&#10; *  will be populated with the text &quot;Hello World!&quot; on the web page.&#10; *  The *content* can include any HTML markup or even scripts, which will be executed.&#10; *  &#10; *  If *property* is anything other than 'html', then the DOM element's *property*&#10; *  attribute will be assigned the value of *content*.&#10; *  A *property* value of 'src', however, is treated specially.&#10; *  A *property* value of 'src' can be used, for example, to replace the image in the above img tag.&#10; *  Just send the updated image to the *resources* input and send this to the&#10; *  *update* input:&#10; *  &lt;pre&gt;&#10; *     {'id':'bar', 'property':'src', 'content':'image.jpg'}&#10; *  &lt;/pre&gt;&#10; *  &#10; *  Note that to get the user interface to actually replace the image, we may have to play some tricks.&#10; *  If the user interface is implemented by a browser, then the browser&#10; *  normally caches an image that it has previously retrieved&#10; *  and it will use the cached version of the image rather than obtaining the new image&#10; *  from the server.  To force the user interface to refresh the image, this accessor&#10; *  treats a *property* value of 'src' specially.&#10; *  Specifically, it appends to the *content* a suffix of the form '?count=*n*',&#10; *  where *n* is a unique number. This forces the user interface to retrieve the image&#10; *  from the server rather than use its cached version because the URI is&#10; *  different from that of the cached version. The server, on the other hand, ignores&#10; *  the parameter 'count' that has been appended to this URI and simply returns the&#10; *  updated image.&#10; *&#10; *  The way this accessor works on most hosts is that it starts a web server on localhost&#10; *  at the specified port that serves the specified web page and then instructs&#10; *  the system default browser to load the default page from that server.&#10; *  The page served by the server includes a script that listens for websocket&#10; *  connections that are used to provide HTML content and udpates to display on the page.&#10; *  Some hosts, however, such as the cordova and browser hosts, natively use&#10; *  a browser as part of the host, so in these cases, no web server nor socket&#10; *  connection is needed and the *port* parameter will be ignored.&#10; *  &#10; *  @accessor utilities/UserInterface.js&#10; *  @input {string} html HTML content to render in the body of the page displayed&#10; *   by the user interface.&#10; *  @input resources An object where each named property is an object containing&#10; *   two properties, 'data' and 'contentType'. The name of the named property is&#10; *   the path to be used to access the resource. The 'data' property is the resource&#10; *   itself, an arbitrary collection of bytes. The 'contentType' is the MIME&#10; *   type of the data.&#10; *  @input update An object with three properties, 'id', 'property', and 'content',&#10; *   that specifies an update to a DOM element on the page.&#10; *  @parameter {string} header HTML content to include in the header part of the web page.&#10; *   This is a good place to script definitions.&#10; *  @parameter {string} content HTML content to include in the main body of the page.&#10; *   If this is non-empty, then the page is opened upon initialize.&#10; *   Otherwise, the page is opened when the first *html* input is received.&#10; *  @parameter {int} port The port to use, if needed, for websocket communication between this&#10; *   accessor (which updates the HTML content of the web page) and the user interface.&#10; *   The web page will listen on this socket for content and display whatever arrives&#10; *   on that port. This is ignored on hosts that do not need to invoke an external browser.&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global error, exports, require, util */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var UserInterface = require('@accessors-modules/user-interface');&#10;var userInterface = null;&#10;&#10;exports.setup = function () {&#10;    this.parameter('header', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.parameter('content', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('html', {&#10;        'type': 'string'&#10;    });&#10;    this.input('resources');&#10;    this.input('update', {&#10;        'type': 'JSON'&#10;    });&#10;    this.output('post', {&#10;        'type': 'JSON',&#10;        'spontaneous': true&#10;    });&#10;    // Use port 8089 because port 8080 is occupied on terra.eecs.berkeley.edu&#10;    this.parameter('port', {&#10;        'type': 'int',&#10;        'value': 8089&#10;    });&#10;};&#10;&#10;/** Display the HTML contents retrieved from the *html* input in the main body&#10; *  of the user interface page replacing whatever was there before.&#10; *  Before doing this, check for any *resources* input and add those resources&#10; *  to the user interface in case the HTML references them. &#10; */&#10;function display() {&#10;    // Check for any new resources.&#10;    var resources = this.get('resources');&#10;    if (resources) {&#10;        for (var name in resources) {&#10;            userInterface.addResource(name, resources[name].data, resources[name].contentType);&#10;        }&#10;    }&#10;&#10;    var toDisplay = this.get('html');&#10;    userInterface.display(toDisplay);&#10;}&#10;&#10;/** Update the specified property of the DOM element of the current page,&#10; *  if it exists, with the specified content.&#10; *  @param id The ID.&#10; *  @param property The type of the update. If this is &quot;html&quot;, then the&#10; *   DOM object is updated by invoking the jQuery html() function it&#10; *   with the specified content as an argument. Otherwise, the property&#10; *   with name *property* is assigned the value of the content.&#10; *   If *property* is 'src', then in addition, the content is augmented&#10; *   with a suffix of the form '?count=*n*', where *n* is a unique number.&#10; *   This is so that the user interface will be forced to reload the src rather than&#10; *   using any cached version it may have. This can be used, for example,&#10; *   to force an update to an img tag where a new image has been provided&#10; *   using addResource().&#10; *  @param content The content of the update, typically HTML to insert or&#10; *   a property value like src to set.&#10; */&#10;function update() {&#10;    var updateValue = this.get('update');&#10;    if (!updateValue.id || !updateValue.property) {&#10;        error('Malformed update input. Expected an object with id, property, and content properties.'&#10;                + 'Got instead: ' + util.inspect(updateValue));&#10;        return;&#10;    }&#10;    // Ensure that updateValue.content exists.&#10;    if (!updateValue.content) {&#10;        updateValue.content = '';&#10;    }&#10;    userInterface.update(updateValue.id, updateValue.property, updateValue.content);&#10;}&#10;&#10;exports.initialize = function () {&#10;    var self = this;&#10;    &#10;    userInterface = new UserInterface.UserInterface(&#10;            {'port': self.getParameter('port')},&#10;            self.getParameter('header'),&#10;            self.getParameter('content')&#10;    );&#10;    // Listen for any POST to the server.&#10;    userInterface.addListener('/', function(data) {&#10;        self.send('post', JSON.parse(data));&#10;    });&#10;&#10;    this.addInputHandler('html', display.bind(this));&#10;&#10;    this.addInputHandler('update', update.bind(this));&#10;&#10;    this.addInputHandler('resources', function() {&#10;        var resources = this.get('resources');&#10;        for (var name in resources) {&#10;            userInterface.addResource(name, resources[name].data, resources[name].contentType);&#10;        }&#10;    });&#10;};&#10;&#10;exports.wrapup = function () {&#10;    if (userInterface) {&#10;        userInterface.stop();&#10;    }&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/UserInterface.js">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;Accessor that provides a user interface based on HTML5 on the local host.&#10; The initial content on the page may be specified using the &lt;em&gt;content&lt;/em&gt;&#10; parameter and HTML header content may be specified using &lt;em&gt;header&lt;/em&gt;.&lt;/p&gt;&#10;&lt;p&gt; Whatever text is received on the &lt;em&gt;html&lt;/em&gt; input port will replace the content&#10; of the web page. Normally, this will be HTML text without any DOCTYPE or&#10; header and without a body tag. Each time new text is received, the content&#10; of the page will be replaced.&lt;/p&gt;&#10;&lt;p&gt; The page will be opened upon initialize if &lt;em&gt;content&lt;/em&gt; is not empty.&#10; Otherwise, it will be opened when the first &lt;em&gt;html&lt;/em&gt; input is received.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;resources&lt;/em&gt; input can be used to provide resources, such as images,&#10; that will be used by the HTML content provided on the &lt;em&gt;html&lt;/em&gt; input.&#10; Note that you probably will also have to provide an &lt;em&gt;update&lt;/em&gt; input (see below)&#10; to force the user interface to update the page using the specified resource.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;update&lt;/em&gt; input can be used to instruct the user interface to replace content&#10; within the page, vs. the &lt;em&gt;html&lt;/em&gt; input which replaces the entire page.&#10; The value of an &lt;em&gt;update&lt;/em&gt; input is expected to be an object with three properties,&#10; &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;property&lt;/em&gt;, and &lt;em&gt;content&lt;/em&gt;.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;id&lt;/em&gt; property refers to a the ID of&#10; a DOM element in the content of the page, where the content has been provided&#10; either via the &lt;em&gt;content&lt;/em&gt; parameter or the &lt;em&gt;html&lt;/em&gt; input. For example, your&#10; page may include:&#10; &lt;pre&gt;&#10;    &amp;lt;div id=&amp;quot;foo&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&#10; &lt;/pre&gt;&#10; or&#10; &lt;pre&gt;&#10;    &amp;lt;img id=&amp;quot;bar&amp;quot; src=&amp;quot;image.jpg&amp;quot;/&amp;gt;&#10; &lt;/pre&gt;&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;@param id The ID.&#10;The &lt;em&gt;property&lt;/em&gt; field specifies what property of the DOM element with the&#10;specified ID is to be updated. If &lt;em&gt;property&lt;/em&gt; is &amp;quot;html&amp;quot;, then the&#10;DOM object is updated by invoking the jQuery html() function&#10;with the specified &lt;em&gt;content&lt;/em&gt; as an argument. For example, if &lt;em&gt;id&lt;/em&gt; is &amp;quot;foo&amp;quot;,&#10;&lt;em&gt;property&lt;/em&gt; is &amp;quot;html&amp;quot;, and &lt;em&gt;content&lt;/em&gt; is &amp;quot;Hello World!&amp;quot;, then the above div&#10;will be populated with the text &amp;quot;Hello World!&amp;quot; on the web page.&#10;The &lt;em&gt;content&lt;/em&gt; can include any HTML markup or even scripts, which will be executed.&lt;/p&gt;&#10;&lt;p&gt;If &lt;em&gt;property&lt;/em&gt; is anything other than 'html', then the DOM element's &lt;em&gt;property&lt;/em&gt;&#10;attribute will be assigned the value of &lt;em&gt;content&lt;/em&gt;.&#10;A &lt;em&gt;property&lt;/em&gt; value of 'src', however, is treated specially.&#10;A &lt;em&gt;property&lt;/em&gt; value of 'src' can be used, for example, to replace the image in the above img tag.&#10;Just send the updated image to the &lt;em&gt;resources&lt;/em&gt; input and send this to the&#10;&lt;em&gt;update&lt;/em&gt; input:&lt;/p&gt;&#10;&lt;pre&gt;&#10;{'id':'bar', 'property':'src', 'content':'image.jpg'}&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Note that to get the user interface to actually replace the image, we may have to play some tricks.&#10;If the user interface is implemented by a browser, then the browser&#10;normally caches an image that it has previously retrieved&#10;and it will use the cached version of the image rather than obtaining the new image&#10;from the server.  To force the user interface to refresh the image, this accessor&#10;treats a &lt;em&gt;property&lt;/em&gt; value of 'src' specially.&#10;Specifically, it appends to the &lt;em&gt;content&lt;/em&gt; a suffix of the form '?count=&lt;em&gt;n&lt;/em&gt;',&#10;where &lt;em&gt;n&lt;/em&gt; is a unique number. This forces the user interface to retrieve the image&#10;from the server rather than use its cached version because the URI is&#10;different from that of the cached version. The server, on the other hand, ignores&#10;the parameter 'count' that has been appended to this URI and simply returns the&#10;updated image.&lt;/p&gt;&#10;&lt;p&gt;The way this accessor works on most hosts is that it starts a web server on localhost&#10;at the specified port that serves the specified web page and then instructs&#10;the system default browser to load the default page from that server.&#10;The page served by the server includes a script that listens for websocket&#10;connections that are used to provide HTML content and udpates to display on the page.&#10;Some hosts, however, such as the cordova and browser hosts, natively use&#10;a browser as part of the host, so in these cases, no web server nor socket&#10;connection is needed and the &lt;em&gt;port&lt;/em&gt; parameter will be ignored.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="html (port)" class="ptolemy.kernel.util.StringAttribute" value="HTML content to render in the body of the page displayed&#10;  by the user interface.">
            </property>
            <property name="resources (port)" class="ptolemy.kernel.util.StringAttribute" value="An object where each named property is an object containing&#10;  two properties, 'data' and 'contentType'. The name of the named property is&#10;  the path to be used to access the resource. The 'data' property is the resource&#10;  itself, an arbitrary collection of bytes. The 'contentType' is the MIME&#10;  type of the data.">
            </property>
            <property name="header (parameter)" class="ptolemy.kernel.util.StringAttribute" value="HTML content to include in the header part of the web page.&#10;  This is a good place to script definitions.">
            </property>
            <property name="content (parameter)" class="ptolemy.kernel.util.StringAttribute" value="HTML content to include in the main body of the page.&#10;  If this is non-empty, then the page is opened upon initialize.&#10;  Otherwise, the page is opened when the first *html* input is received.">
            </property>
            <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The port to use, if needed, for websocket communication between this&#10;  accessor (which updates the HTML content of the web page) and the user interface.&#10;  The web page will listen on this socket for content and display whatever arrives&#10;  on that port. This is ignored on hosts that do not need to invoke an external browser.">
            </property>
            <property name="update (port)" class="ptolemy.kernel.util.StringAttribute" value="An object with three properties, 'id', 'property', and 'content',&#10;  that specifies an update to a DOM element on the page.">
            </property>
            <property name="post (port)" class="ptolemy.kernel.util.StringAttribute">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[835.0, 205.0]">
        </property>
        <property name="header" class="ptolemy.data.expr.Parameter" value="&lt;title&gt;AugmentedReality Demo&lt;/title&gt;&#10;&lt;style&gt;&#10;body {&#10;  background:black;&#10;}&#10;#next {&#10;  width:640px;&#10;}&#10;#container {&#10;  position: relative;&#10;  background: black;&#10;  width: 1000px;&#10;  height: 700px;&#10;}&#10;#image {&#10;  display: block;&#10;}&#10;#overlay {&#10;  position: absolute;&#10;  background-color: rgba(255,255,255,0.85);&#10;  color: black;&#10;  font-size: 12px;&#10;  font-family: sans-serif;&#10;  padding: 6px 6px;&#10;}&#10;table, th, td {&#10;  border: 1px solid black;&#10;  border-collapse: collapse;&#10;  padding: 2px;&#10;}&#10;&lt;/style&gt;&#10;">
            <property name="style" class="ptolemy.actor.gui.style.TextStyle">
                <property name="height" class="ptolemy.data.expr.Parameter" value="10">
                </property>
                <property name="width" class="ptolemy.data.expr.Parameter" value="30">
                </property>
            </property>
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="content" class="ptolemy.data.expr.Parameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <port name="html" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="resources" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="post" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="update" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
    </entity>
    <entity name="Mutable" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.extend('utilities/MutableBase');&#10;	this.implement('ControllableSensor');&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/utilities/Mutable.js">
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="accessor" class="ptolemy.actor.parameters.PortParameter" value="">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[545.0, 335.0]">
        </property>
        <property name="control" class="ptolemy.actor.parameters.PortParameter" value="{}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="_localChanges" class="ptolemy.kernel.util.SingletonAttribute">
        </property>
        <port name="accessor" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
        </port>
        <port name="control" class="ptolemy.actor.parameters.ParameterPort">
            <property name="input"/>
            <property name="defaultValue" class="ptolemy.data.expr.Parameter">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="data" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="schema" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
        </port>
        <port name="state" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="IdGenerator" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// On each trigger input, if the tags input is a non-empty array of tags,&#10;// this script outputs an id for the tag with the least numerical id.&#10;// Whenever it receives an empty *next* input, then upon the next trigger&#10;// input, it advances to the next least id for a visible tag, wrapping&#10;// around to the overal smallest visible id one when it has scrolled&#10;// through the tags. Whenever the tag changes, it outputs 'new' on reset.&#10;// When it  receives an empty tags input for more than countForReset triggers,&#10;// then it outputs 'none' on reset.&#10;&#10;exports.setup = function() {&#10;	this.input('trigger');&#10;    this.input('tags');&#10;    this.input('next');&#10;    &#10;    this.output('reset', {'type': 'string'});&#10;    this.output('id', {'type': 'int'});&#10;    &#10;    this.parameter('countForReset', {'type':'int', 'value':5});&#10;};&#10;&#10;exports.initialize = function() {&#10;    var thiz = this;&#10;    var id = -1;&#10;    var first = true;&#10;    var nextTag = false;&#10;    this.absentCount = 0;&#10;    &#10;    this.addInputHandler('trigger', function() {&#10;        var tags = thiz.get('tags');&#10;        &#10;        if (!tags || tags.length === 0) {&#10;        	// If we have seen enough frames with no tags, send a reset.&#10;        	var countForReset = thiz.getParameter('countForReset');&#10;        	if (thiz.absentCount &gt;= countForReset) {&#10;        		thiz.send('reset','none');&#10;        		if (!first) {&#10;        			// Signal downstream to unreify the accessor.&#10;        			thiz.send('id', -1);&#10;        		}&#10;        		// Set first to true in case a tag reappears later.&#10;        		first = true;&#10;        		return;&#10;        	}&#10;        	thiz.absentCount += 1;&#10;        	return;&#10;        }&#10;        thiz.absentCount = 0;&#10;&#10;        tags.sort( function(a,b){&#10;            if (a.id &lt; b.id){&#10;                return -1;&#10;            }&#10;            if (a.id &gt; b.id){&#10;                return 1;&#10;            }&#10;            return 0;&#10;        });&#10;&#10;&#10;        if (first &amp;&amp; tags &amp;&amp; tags.length &gt; 0) {     &#10;            id = tags[0].id;&#10;            thiz.send('id', id );&#10;            first = false;&#10;            thiz.send('reset', 'new');&#10;            return;  &#10;        }&#10;&#10;        if (nextTag) {&#10;            nextTag = false;&#10;            // Even if there is only one tag, the previous ID may be missing.&#10;            if (tags &amp;&amp; tags.length &gt; 0) {&#10;            	// By default, choose the first in the list.&#10;            	var newId = tags[0].id;&#10;                // Find the next smallest tag ID greater than the current one.&#10;                for(var i = 0; i &lt; tags.length; i++){&#10;                    if(tags[i].id &gt; id){&#10;                        newId = tags[i].id;&#10;                        break;&#10;                    }&#10;                }&#10;                if (newId !== id) {&#10;					id = newId;&#10;                	thiz.send('id', id);&#10;                	thiz.send('reset', 'new');&#10;                }&#10;            }&#10;        }&#10;    });   &#10;&#10;    this.addInputHandler('next', function() {&#10;        var next = thiz.get('next');&#10;        if (typeof next === 'string') {&#10;            next = JSON.parse(next);&#10;        }&#10;        if (!next || (Object.keys(next).length === 0 &#10;                &amp;&amp; next.constructor === Object)) {&#10;            // Empty object or null received.&#10;            nextTag = true;&#10;        }&#10;    });&#10;};">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[390.0, 195.0]">
        </property>
        <port name="reset" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="id" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="next" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
    </entity>
    <entity name="TagToAccessor" class="ptolemy.actor.TypedCompositeActor">
        <property name="_location" class="ptolemy.kernel.util.Location" value="[470.0, 270.0]">
        </property>
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={462, 34, 934, 632}, maximized=false}">
        </property>
        <property name="_vergilSize" class="ptolemy.actor.gui.SizeAttribute" value="[700, 522]">
        </property>
        <property name="_vergilZoomFactor" class="ptolemy.data.expr.ExpertParameter" value="1.0">
        </property>
        <property name="_vergilCenter" class="ptolemy.data.expr.ExpertParameter" value="{350.0, 261.0}">
        </property>
        <property name="storeLocation" class="ptolemy.data.expr.StringParameter" value="$storeLocation">
            <property name="_hideName" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_icon" class="ptolemy.vergil.icon.ValueIcon">
                <property name="_color" class="ptolemy.actor.gui.ColorAttribute" value="{1.0, 0.0, 0.0, 1.0}">
                </property>
            </property>
            <property name="_smallIconDescription" class="ptolemy.kernel.util.SingletonConfigurableAttribute">
                <configure>
      <svg>
        <text x="20" style="font-size:14; font-family:SansSerif; fill:red" y="20">-S-</text>
      </svg>
    </configure>
            </property>
            <property name="_editorFactory" class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[30.0, 325.0]">
            </property>
        </property>
        <property name="Annotation" class="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property name="text" class="ptolemy.kernel.util.StringAttribute" value="Given an ID and a list of tags with translations, match them,&#10;look up an accessor in the key-value value store, and produce&#10;that accessor. If no accessor is found, produce null.">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[15.0, 90.0]">
            </property>
        </property>
        <port name="id" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 200.0}">
            </property>
        </port>
        <port name="tags" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{20.0, 255.0}">
            </property>
        </port>
        <port name="accessor" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[610.0, 230.0]">
            </property>
        </port>
        <port name="translation" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
            <property name="_showName" class="ptolemy.data.expr.SingletonParameter" value="true">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{225.0, 200.0}">
            </property>
        </port>
        <entity name="TagListToKey" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="var httpClient = require('@accessors-modules/http-client');&#10;&#10;exports.setup = function() {&#10;    // Inputs&#10;    this.input('tags');&#10;    this.input('id', {&#10;        'type':'int', &#10;        'value':-1&#10;    });&#10;    &#10;    // Outputs&#10;    this.output('key', {&#10;        'type': 'string'&#10;    });&#10;    this.output('translation');&#10;};&#10;&#10;exports.initialize = function() {&#10;    var thiz = this;&#10;    var previousId = -1;&#10;    &#10;    this.addInputHandler('tags', function() {&#10;        var tags = thiz.get('tags');&#10;        var id = thiz.get('id');&#10;        &#10;        if (id != previousId) {&#10;            // Index has changed. Look up an accessor and produce it.&#10;            thiz.send('key', id);&#10;            previousId = id;&#10;        }&#10;        if (tags &amp;&amp; tags.length &gt; 0) {&#10;            for(var i = 0; i &lt; tags.length; i++){&#10;                if(tags[i].id == id){&#10;                    thiz.send('translation', tags[i].center);&#10;                    break;&#10;                }&#10;            }&#10;        }&#10;    });&#10;    this.addInputHandler('id', function() {&#10;        var tags = thiz.get('tags');&#10;        var id = thiz.get('id');&#10;		// If there are no tags and the id is negative,&#10;		// then just pass on the id.&#10;		if (!tags &amp;&amp; id &lt; 0) {&#10;            thiz.send('key', id);&#10;            previousId = id;	&#10;		}&#10;    });&#10;};&#10;&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{110.0, 210.0}">
            </property>
            <property name="id" class="ptolemy.actor.parameters.PortParameter" value="-1">
            </property>
            <port name="id" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="tags" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="translation" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
            <port name="key" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="KeyValueStore" class="org.terraswarm.accessor.JSAccessor">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2016 The Regents of the University of California.&#10;// All rights reserved.&#10;&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;&#10;/** This accessor reads or writes data to a key-value store web service whenever&#10; *  it receives a trigger input.&#10; *  A URL for the service is specified by the &lt;i&gt;storeLocation&lt;/i&gt; parameter.&#10; *  A Ptolemy II model that provides such a key-value store service can be found&#10; *  at https://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml.&#10; *  A demo client that uses this accessor is provided at&#10; *  https://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml.&#10; *&#10; *  The key and the value are both text items provided as inputs.&#10; *  If &lt;i&gt;remove&lt;/i&gt; is true and the &lt;i&gt;key&lt;/i&gt; is non-empty, then upon firing, this actor&#10; *  will remove the specified key from the store, producing on its output the previous&#10; *  value (if any). If &lt;i&gt;remove&lt;/i&gt; is false, then this actor will either set or&#10; *  retrieve a value in the key-value store, depending on whether the&#10; *  &lt;i&gt;value&lt;/i&gt; input is non-empty. If the &lt;i&gt;value&lt;/i&gt; is non-empty, then this&#10; *  actor sets the value for the specified key.&#10; *  If it is empty, then this actor retrieves the value for the specified key.&#10; *  If no key is given, then this actor retrieves an array of all the keys&#10; *  in the key-value store.&#10; *&#10; *  If an error occurs accessing the key-value store (e.g., no store is found at the specified&#10; *  URL, or no value is found with the specified key),&#10; *  then an exception is thrown.&#10; *&#10; *  This accessor assumes that the protocol implemented at that location matches&#10; *  the specification below for the default location:&#10; *&#10; *  * To store a value with key MY_ID and value MY_VALUE, use&#10; *&#10; *      http://localhost:8077/keyvalue/set?id=MY_ID&amp;value=MY_VALUE&#10; *&#10; *  * To retrieve the value, use&#10; *&#10; *      http://localhost:8077/keyvalue/get?id=MY_ID&#10; *&#10; *  * To remove a value, use&#10; *&#10; *      http://localhost:8077/keyvalue/delete?id=MY_ID&#10; *&#10; *  * To list all the keys, use&#10; *&#10; *      http://localhost:8077/keyvalue/list&#10; *&#10; *  The key and value are both&#10; *  encoded using the JavaScript encodeURIComponent() function,&#10; *  and on retrieval, decoded using decodeURIComponent(),&#10; *  and hence can include any text characters.&#10; *&#10; *  Note that this accessor uses nonblocking reads to access the store,&#10; *  so the output is produced later when the server responds.&#10; *&#10; *  @accessor net/KeyValueStore&#10; *  @input {string} storeLocation The URL of the key-value store service.&#10; *  @input {string} key The key to be updated or retrieved.&#10; *  @input {boolean} remove If true, then remove the key from the store;&#10; *   otherwise, retrieve the value for the key.&#10; *  @input {string} value The value to store in the key-value store,&#10; *   or empty to not store anything.&#10; *  @input trigger The trigger input.&#10; *  @output {string} result The value retrieved from or written to&#10; *   the key-value store.&#10; *&#10; *  @author Edward A. Lee&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint.  Note that there should be no&#10;// space between the / and the * and global.&#10;/*global console, error, exports, readURL */&#10;/*jshint globalstrict: true */&#10;&quot;use strict&quot;;&#10;&#10;var httpClient = require('@accessors-modules/http-client');&#10;&#10;exports.setup = function () {&#10;    this.input('storeLocation', {&#10;        'type': 'string',&#10;        'value': 'http://localhost:8077/keyvalue'&#10;    });&#10;    this.input('key', {&#10;        'type': 'string',&#10;        'value': ''&#10;    });&#10;    this.input('remove', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.input('value', {&#10;        'type': 'string'&#10;    });&#10;    this.input('trigger');&#10;    this.output('result', {&#10;        'type': 'string',&#10;        'spontaneous': true&#10;    });&#10;};&#10;&#10;var inputHandler = null;&#10;exports.initialize = function() {&#10;    inputHandler = this.addInputHandler('trigger', handleInputs.bind(this));&#10;}&#10;&#10;function handleInputs() {&#10;    var store = this.get('storeLocation');&#10;    var theKey = this.get('key');&#10;    var toRemove = this.get('remove');&#10;    var theValue = this.get('value');&#10;    var thiz = this;&#10;    if (toRemove) {&#10;        if (theKey !== &quot;&quot;) {&#10;            httpClient.get(url, function(response) {&#10;                var produce = response.body;&#10;                var url = store + '/delete?id=' + theKey;&#10;                // FIXME: This should use HTTP delete not get.&#10;                httpClient.get(url, function(response) {&#10;                    if (checkResponse(response, thiz) &amp;&amp; produce !== &quot;&quot;) {&#10;                        thiz.send('result', produce);&#10;                    }&#10;                });&#10;            });&#10;        }&#10;    } else {&#10;        // toRemove == false. If there is a value, use it to set.&#10;        if (theValue !== &quot;&quot; &amp;&amp; theValue !== null) {&#10;            if (!theKey) {&#10;                thiz.error(&quot;Invalid key: &quot; + theKey + &quot; for value: &quot; + theValue);&#10;                return;&#10;            }&#10;            // FIXME: encodeURIComponent is not defined as a top-level accessor function.&#10;            var url = store + '/set?id=' + encodeURIComponent(theKey);&#10;            var options = {&#10;                'url':url,&#10;                'body':theValue&#10;            };&#10;            httpClient.post(options, function(response) {&#10;                if (checkResponse(response, thiz)) {&#10;                    thiz.send('result', theValue);&#10;                }&#10;            });&#10;        } else {&#10;            var url;&#10;            if (theKey) {&#10;                url = store + '/get?id=' + theKey;&#10;            } else {&#10;                url = store + '/list';&#10;            }&#10;            httpClient.get(url, function(response) {&#10;                if (checkResponse(response, thiz)) {&#10;                    var valueFromStore = decodeURIComponent(response.body);&#10;                    thiz.send('result', valueFromStore);&#10;                }&#10;            });&#10;        }&#10;    }&#10;};&#10;&#10;function checkResponse(response, thiz) {&#10;    if (response.statusCode &gt;= 400) {&#10;        thiz.error('Server responds with '&#10;                + response.statusCode&#10;                + ': '&#10;                + response.statusMessage);&#10;        return false;&#10;    } else if (response.statusCode &gt;= 300) {&#10;        thiz.error('Server responds with a redirect, no supported yet, code '&#10;                + response.statusCode&#10;                + ': '&#10;                + response.statusMessage);&#10;        return false;&#10;    }&#10;    return true;&#10;}&#10;&#10;exports.wrapup = function() {&#10;    if (inputHandler !== null) {&#10;        this.removeInputHandler(inputHandler);&#10;        inputHandler = null;&#10;    }&#10;}&#10;">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/net/KeyValueStore.js">
            </property>
            <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
                <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor reads or writes data to a key-value store web service whenever&#10; it receives a trigger input.&#10; A URL for the service is specified by the &lt;i&gt;storeLocation&lt;/i&gt; parameter.&#10; A Ptolemy II model that provides such a key-value store service can be found&#10; at https://&lt;a href=&quot;http://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&quot;&gt;www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreServer.xml&lt;/a&gt;.&#10; A demo client that uses this accessor is provided at&#10; https://&lt;a href=&quot;http://www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&quot;&gt;www.icyphy.org/accessors/demo/KeyValueStore/KeyValueStoreClient.xml&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt; The key and the value are both text items provided as inputs.&#10; If &lt;i&gt;remove&lt;/i&gt; is true and the &lt;i&gt;key&lt;/i&gt; is non-empty, then upon firing, this actor&#10; will remove the specified key from the store, producing on its output the previous&#10; value (if any). If &lt;i&gt;remove&lt;/i&gt; is false, then this actor will either set or&#10; retrieve a value in the key-value store, depending on whether the&#10; &lt;i&gt;value&lt;/i&gt; input is non-empty. If the &lt;i&gt;value&lt;/i&gt; is non-empty, then this&#10; actor sets the value for the specified key.&#10; If it is empty, then this actor retrieves the value for the specified key.&#10; If no key is given, then this actor retrieves an array of all the keys&#10; in the key-value store.&lt;/p&gt;&#10;&lt;p&gt; If an error occurs accessing the key-value store (e.g., no store is found at the specified&#10; URL, or no value is found with the specified key),&#10; then an exception is thrown.&lt;/p&gt;&#10;&lt;p&gt; This accessor assumes that the protocol implemented at that location matches&#10; the specification below for the default location:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;&lt;p&gt;To store a value with key MY_ID and value MY_VALUE, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/set?id=MY_ID&amp;amp;value=MY_VALUE&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;To retrieve the value, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/get?id=MY_ID&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;To remove a value, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/delete?id=MY_ID&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;To list all the keys, use&lt;/p&gt;&#10;&lt;p&gt;  http://localhost:8077/keyvalue/list&lt;/p&gt;&#10;&lt;p&gt;The key and value are both&#10;encoded using the JavaScript encodeURIComponent() function,&#10;and on retrieval, decoded using decodeURIComponent(),&#10;and hence can include any text characters.&lt;/p&gt;&#10;&lt;p&gt;Note that this accessor uses nonblocking reads to access the store,&#10;so the output is produced later when the server responds.&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
                </property>
                <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
                </property>
                <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
                </property>
                <property name="storeLocation (port)" class="ptolemy.kernel.util.StringAttribute" value="The URL of the key-value store service.">
                </property>
                <property name="key (port)" class="ptolemy.kernel.util.StringAttribute" value="The key to be updated or retrieved.">
                </property>
                <property name="remove (port)" class="ptolemy.kernel.util.StringAttribute" value="If true, then remove the key from the store;&#10;  otherwise, retrieve the value for the key.">
                </property>
                <property name="value (port)" class="ptolemy.kernel.util.StringAttribute" value="The value to store in the key-value store,&#10;  or empty to not store anything.">
                </property>
                <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" value="The value retrieved from or written to&#10;  the key-value store.">
                </property>
                <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="The trigger input.">
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="storeLocation" class="ptolemy.actor.parameters.PortParameter" value="http://${storeLocation}/keyvalue">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="key" class="ptolemy.actor.parameters.PortParameter" value="">
                <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{380.0, 220.0}">
            </property>
            <port name="storeLocation" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="key" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
                <property name="defaultValue" class="ptolemy.data.expr.Parameter">
                </property>
            </port>
            <port name="remove" class="ptolemy.actor.parameters.ParameterPort">
                <property name="input"/>
            </port>
            <port name="value" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="result" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
                <property name="_spontaneous" class="ptolemy.data.expr.SingletonParameter" value="true">
                </property>
            </port>
            <port name="trigger" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
        </entity>
        <entity name="TimedDisplay" class="ptolemy.actor.lib.gui.TimedDisplay">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={744, 143, 696, 282}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[696, 238]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[505.0, 325.0]">
            </property>
        </entity>
        <entity name="CheckForError" class="ptolemy.actor.lib.jjs.JavaScript">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
            </property>
            <property name="script" class="ptolemy.actor.parameters.PortParameter" value="exports.setup = function() {&#10;	this.input('result');&#10;	this.input('err');&#10;	this.output('accessor');&#10;}&#10;exports.initialize = function() {&#10;	var thiz = this;&#10;	this.addInputHandler('result', function() {&#10;		var result = thiz.get('result');&#10;		thiz.send('accessor', result);&#10;	});&#10;	this.addInputHandler('err', function() {&#10;		thiz.send('accessor', null);&#10;	});&#10;}">
                <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                    <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                    </property>
                </property>
            </property>
            <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
                <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
                </property>
                <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
                </property>
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[510.0, 230.0]">
            </property>
            <port name="result" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="err" class="ptolemy.actor.TypedIOPort">
                <property name="input"/>
            </port>
            <port name="accessor" class="ptolemy.actor.TypedIOPort">
                <property name="output"/>
            </port>
        </entity>
        <entity name="TagToAccessorAccessor2" class="ptolemy.actor.lib.gui.TimedDisplay">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={744, 143, 696, 282}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[696, 238]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="[555.0, 120.0]">
            </property>
        </entity>
        <entity name="TimedDisplay2" class="ptolemy.actor.lib.gui.TimedDisplay">
            <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute" value="{bounds={744, 143, 696, 282}, maximized=false}">
            </property>
            <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute" value="[696, 238]">
            </property>
            <property name="_location" class="ptolemy.kernel.util.Location" value="{312.0, 364.0}">
            </property>
        </entity>
        <relation name="relation" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="{280.0, 240.0}">
            </vertex>
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;KeyValueStore.trigger&quot;,x=380.0,y=220.0}, tail={id=&quot;relation.vertex1&quot;,x=280.0,y=240.0}, points={} },{ head={id=&quot;KeyValueStore.key&quot;,x=380.0,y=220.0}, tail={id=&quot;relation.vertex1&quot;,x=280.0,y=240.0}, points={280.0,210.0} },{ head={id=&quot;TagListToKey.key&quot;,x=110.0,y=210.0}, tail={id=&quot;relation.vertex1&quot;,x=280.0,y=240.0}, points={200.0,220.0,200.0,240.0} } }">
            </property>
        </relation>
        <relation name="relation4" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;translation._location&quot;,x=225.0,y=200.0}, tail={id=&quot;TagListToKey.translation&quot;,x=110.0,y=210.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation2" class="ptolemy.actor.TypedIORelation">
            <property name="_layoutHint" class="ptolemy.vergil.actor.LayoutHint" value="{ { head={id=&quot;id._location&quot;,x=20.0,y=200.0}, tail={id=&quot;TagListToKey.id&quot;,x=110.0,y=210.0}, points={} } }">
            </property>
        </relation>
        <relation name="relation7" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="{445.0, 275.0}">
            </vertex>
        </relation>
        <relation name="relation8" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="[65.0, 240.0]">
            </vertex>
        </relation>
        <relation name="relation3" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="{445.0, 225.0}">
            </vertex>
        </relation>
        <relation name="relation5" class="ptolemy.actor.TypedIORelation">
            <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
            </property>
            <vertex name="vertex1" value="{560.0, 230.0}">
            </vertex>
        </relation>
        <link port="id" relation="relation2"/>
        <link port="tags" relation="relation8"/>
        <link port="accessor" relation="relation5"/>
        <link port="translation" relation="relation4"/>
        <link port="TagListToKey.id" relation="relation2"/>
        <link port="TagListToKey.tags" relation="relation8"/>
        <link port="TagListToKey.translation" relation="relation4"/>
        <link port="TagListToKey.key" relation="relation"/>
        <link port="KeyValueStore.error" relation="relation7"/>
        <link port="KeyValueStore.key" relation="relation"/>
        <link port="KeyValueStore.result" relation="relation3"/>
        <link port="KeyValueStore.trigger" relation="relation"/>
        <link port="TimedDisplay.input" relation="relation7"/>
        <link port="CheckForError.result" relation="relation3"/>
        <link port="CheckForError.err" relation="relation7"/>
        <link port="CheckForError.accessor" relation="relation5"/>
        <link port="TagToAccessorAccessor2.input" relation="relation5"/>
        <link port="TimedDisplay2.input" relation="relation"/>
    </entity>
    <entity name="SchemaToHTML" class="ptolemy.actor.lib.jjs.JavaScript">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// This script accepts a JSON schema (see http://json-schema.org/)&#10;// and produces HTML for entering data that conforms with the specified&#10;// schema. At this point, it is very limited, supporting only a small&#10;// subset of the schema. But it is also extended to allow for hints&#10;// to provide more natural interfaces such as pushbuttons instead of&#10;// entry boxes. The most basic functionality takes a schema like this:&#10;//    { &quot;type&quot;: &quot;object&quot;,&#10;//      &quot;properties&quot;: {&#10;//         &quot;a&quot;: {&#10;//            &quot;type&quot;: &quot;string&quot;,&#10;//            &quot;title&quot;: &quot;A&quot;,&#10;//            &quot;description&quot;: &quot;A description here&quot;,&#10;//			  &quot;choices&quot;: [&quot;first&quot;, &quot;second&quot;]&#10;//          }&#10;//         &quot;b&quot;: {&#10;//             ...&#10;//          }&#10;//       }&#10;// and generates an HTML table with entry boxes labeled with the specified&#10;// title and a &quot;submit&quot; button.&#10;//&#10;// If a property has a &quot;choices&quot; property whose value is an array of&#10;// strings, then a radio button will be used instead of an entry box&#10;// with the specified choices offered as options.&#10;//&#10;// If a property has no &quot;choices&quot; property but instead has an &quot;options&quot;&#10;// property whose value is an array of strings, then a drop-down list&#10;// will br provided instead of an entry box.&#10;exports.setup = function() {&#10;	this.input('schema', {'type':'JSON'});&#10;	this.output('html', {'type':'string'});&#10;}&#10;exports.initialize = function() {&#10;	var self = this;&#10;	this.addInputHandler('schema', function() {&#10;		var schema = self.get('schema');&#10;		var content = '&lt;h2&gt;Inputs:&lt;/h2&gt;&lt;form action=&quot;/&quot; method=&quot;post&quot; target=&quot;blankIframe&quot; id=&quot;form&quot;/&gt;&lt;table&gt;';&#10;&#10;        // FIXME: Handle types other than object, e.g. string, number.      	&#10;        if (schema.type === 'object') {&#10;			for (prop in schema.properties) {&#10;				var name = prop;&#10;				var entry = schema.properties[prop];&#10;				if (entry['title']) {&#10;					name = entry['title'];&#10;				}&#10;				// Default type of entry will be a string.&#10;				// Note that this is not the same as the type in the schema,&#10;				// which specifies a JSON type, not an HTML5 type.&#10;				var choices = entry['choices'];&#10;				var options = entry['options'];&#10;				var input = '';&#10;				if (choices &amp;&amp; choices.length) {&#10;					for (var i = 0; i &lt; choices.length; i++) {&#10;						input += '&lt;input type=&quot;radio&quot; name=&quot;'&#10;							+ prop&#10;							+ '&quot; value=&quot;'&#10;							+ choices[i]&#10;							+ '&quot; form=&quot;form&quot;/&gt;'&#10;							+ choices[i];&#10;					}&#10;				} else if (options &amp;&amp; options.length) {&#10;					input += '&lt;select form=&quot;form&quot; name=&quot;'&#10;							+ prop&#10;							+ '&quot;&gt;';&#10;					for (var i = 0; i &lt; options.length; i++) {&#10;						input += '&lt;option value=&quot;'&#10;							+ options[i]&#10;							+ '&quot;&gt;'&#10;							+ options[i]&#10;							+ '&lt;/option&gt;';&#10;					}&#10;					input += '&lt;/select&gt;';&#10;				} else {&#10;					input = '&lt;input type=&quot;text&quot; name=&quot;'&#10;							+ prop&#10;							+ '&quot; form=&quot;form&quot;/&gt;';&#10;				}&#10;				&#10;				content += '&lt;tr&gt;&lt;td&gt;'&#10;						+ name&#10;						+ '&lt;/td&gt;&lt;td&gt;'&#10;						+ input&#10;						+ '&lt;/td&gt;&lt;/tr&gt;';&#10;			}&#10;		}&#10;		content += '&lt;/table&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; form=&quot;form&quot;&gt;';&#10;		&#10;		self.send('html', content);&#10;	});&#10;}&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[700.0, 335.0]">
        </property>
        <port name="schema" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </port>
        <port name="html" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <entity name="Camera" class="org.terraswarm.accessor.JSAccessor">
        <property name="_windowProperties" class="ptolemy.actor.gui.WindowPropertiesAttribute">
        </property>
        <property name="_paneSize" class="ptolemy.actor.gui.SizeAttribute">
        </property>
        <property name="script" class="ptolemy.actor.parameters.PortParameter" value="// Copyright (c) 2015-2017 The Regents of the University of California.&#10;// All rights reserved.&#10;//&#10;// Permission is hereby granted, without written agreement and without&#10;// license or royalty fees, to use, copy, modify, and distribute this&#10;// software and its documentation for any purpose, provided that the above&#10;// copyright notice and the following two paragraphs appear in all copies&#10;// of this software.&#10;//&#10;// IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY&#10;// FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES&#10;// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF&#10;// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF&#10;// SUCH DAMAGE.&#10;//&#10;// THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,&#10;// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF&#10;// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE&#10;// PROVIDED HEREUNDER IS ON AN &quot;AS IS&quot; BASIS, AND THE UNIVERSITY OF&#10;// CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,&#10;// ENHANCEMENTS, OR MODIFICATIONS.&#10;//&#10;&#10;/** An accessor for a camera on the local host. This can be a built-in camera or&#10; *  a USB-connected camera. This accessor has two modes of operation, &quot;triggered&quot;&#10; *  and &quot;open loop.&quot; In triggered mode, it captures an image whenever a trigger&#10; *  input is received and produces that image on its output. In open-loop mode,&#10; *  it captures every image produced by the camera, at the speed of the camera,&#10; *  and produces on the output a stream of such images. It limits the number of&#10; *  outputs to maxFrameRate images per second, even if the camera produces more&#10; *  images than that. You can use the maxFrameRate parameter to avoid overwhelming&#10; *  your application.&#10; *&#10; *  @accessor cameras/Camera&#10; *  @author Edward A. Lee (eal@eecs.berkeley.edu)&#10; *  @input trigger A trigger input for triggered mode.&#10; *   The value is ignored and can be anything.&#10; *  @output {Object} image A stream of captured images.&#10; *  @parameter {boolean} triggered If true, use triggered mode.&#10; *   Otherwise, use open-loop mode. This is a boolean that defaults to false.&#10; *  @parameter {number} maxFrameRate If not triggered, this limits the output&#10; *   to the specified number of frames per second. This is a number that defaults to 25.&#10; *  @parameter {string} camera The name of the camera to use.&#10; *   A list of available cameras is presented as options.&#10; *   This is a string that defaults to &quot;default camera&quot;,&#10; *   which uses the system default, if there is one.&#10; *  @parameter {{width: number, height: number}} viewSize The view size&#10; *   to use for capture, in pixels. A list of available view sizes for&#10; *   the selected camara is presented as options. This is a JSON specification&#10; *   with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.&#10; *  @version $$Id$$&#10; */&#10;&#10;// Stop extra messages from jslint and jshint.  Note that there should be no&#10;// space between the / and the * and global. See https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSHint */&#10;/*global addInputHandler, error, exports, getParameter, input, output, parameter, removeInputHandler, require, send */&#10;/*jshint globalstrict: true*/&#10;&quot;use strict&quot;;&#10;&#10;var cameras = require(&quot;@accessors-modules/cameras&quot;);&#10;var camera;&#10;var handle = null;&#10;&#10;/** Create the inputs, outputs, and parameters, and update the parameters for the selected camera. */&#10;exports.setup = function () {&#10;    this.input('trigger');&#10;    this.output('image');&#10;    this.parameter('triggered', {&#10;        'type': 'boolean',&#10;        'value': false&#10;    });&#10;    this.parameter('maxFrameRate', {&#10;        'type': 'number',&#10;        'value': 25&#10;    });&#10;    // NOTE: The following assumes that setup() is reinvoked whenever a parameter&#10;    // value changes, since the camera will change and so will the available options.&#10;    this.parameter('camera', {&#10;        'type': 'string',&#10;        'value': 'default camera'&#10;    });&#10;    this.parameter('viewSize', {&#10;        'type': 'JSON'&#10;    });&#10;    // This is in a try-catch so that this accessor can be instantiated even if the&#10;    // host does not provide a cameras module.&#10;    try {&#10;        this.parameter('camera', {&#10;            'options': cameras.cameras()&#10;        });&#10;        camera = new cameras.Camera(this.getParameter('camera'));&#10;        this.parameter('viewSize', {&#10;            'value': camera.getViewSize(),&#10;            'options': camera.viewSizes()&#10;        });&#10;    } catch (err) {&#10;        error(err);&#10;    }&#10;};&#10;&#10;/** Set the view size of the camera, open it, and depending on the triggered mode, either&#10; *  set up an input handler for the trigger input or set up a handler for the 'image'&#10; *  event notification from the camera.&#10; */&#10;exports.initialize = function () {&#10;    camera.setViewSize(this.getParameter('viewSize'));&#10;    camera.open();&#10;    var self = this;&#10;    if (this.getParameter('triggered')) {&#10;        // Request a snapshot.  Note the video stream might not be playing.&#10;        // An event will be generated when a snapshot is available.&#10;        camera.on('snapshot', function (image) {&#10;            self.send('image', image);&#10;        });&#10;&#10;        handle = this.addInputHandler('trigger', function () {&#10;            camera.snapshot();&#10;        });&#10;    } else {&#10;        var maxFrameRate = self.getParameter('maxFrameRate');&#10;        var frameInterval = 1000.0/maxFrameRate; // In ms.&#10;        var lastFrameTime = 0;&#10;        camera.on('image', function (image) {&#10;            var currentTime = Date.now();&#10;            if (currentTime - lastFrameTime &gt;= frameInterval) {&#10;                self.send('image', image);&#10;                lastFrameTime = currentTime;&#10;            }&#10;        });&#10;    }&#10;};&#10;&#10;/** Remove handlers and close the camera. */&#10;exports.wrapup = function () {&#10;    camera.removeAllListeners('image');&#10;    if (handle !== null) {&#10;        this.removeInputHandler(handle);&#10;    }&#10;    camera.close();&#10;};&#10;">
            <property name="style" class="ptolemy.actor.gui.style.NoteStyle">
                <property name="note" class="ptolemy.kernel.util.StringAttribute" value="NOTE: To see the script, invoke Open Actor">
                </property>
            </property>
        </property>
        <property name="accessorSource" class="org.terraswarm.accessor.JSAccessor$ActionableAttribute" value="https://accessors.org/cameras/Camera.js">
        </property>
        <property name="_location" class="ptolemy.kernel.util.Location" value="[120.0, 390.0]">
        </property>
        <property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
            <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;An accessor for a camera on the local host. This can be a built-in camera or&#10; a USB-connected camera. This accessor has two modes of operation, &amp;quot;triggered&amp;quot;&#10; and &amp;quot;open loop.&amp;quot; In triggered mode, it captures an image whenever a trigger&#10; input is received and produces that image on its output. In open-loop mode,&#10; it captures every image produced by the camera, at the speed of the camera,&#10; and produces on the output a stream of such images. It limits the number of&#10; outputs to maxFrameRate images per second, even if the camera produces more&#10; images than that. You can use the maxFrameRate parameter to avoid overwhelming&#10; your application.&lt;/p&gt;">
            </property>
            <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee (eal@eecs.berkeley.edu)">
            </property>
            <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
            </property>
            <property name="trigger (port)" class="ptolemy.kernel.util.StringAttribute" value="A trigger input for triggered mode.&#10;  The value is ignored and can be anything.">
            </property>
            <property name="image (port)" class="ptolemy.kernel.util.StringAttribute" value="A stream of captured images.">
            </property>
            <property name="triggered (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If true, use triggered mode.&#10;  Otherwise, use open-loop mode. This is a boolean that defaults to false.">
            </property>
            <property name="camera (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The name of the camera to use.&#10;  A list of available cameras is presented as options.&#10;  This is a string that defaults to &quot;default camera&quot;,&#10;  which uses the system default, if there is one.">
            </property>
            <property name="viewSize (parameter)" class="ptolemy.kernel.util.StringAttribute" value="The view size&#10;  to use for capture, in pixels. A list of available view sizes for&#10;  the selected camara is presented as options. This is a JSON specification&#10;  with a &quot;width&quot; and &quot;height&quot; field, as in for example {&quot;width&quot;:640, &quot;height&quot;:480}.">
            </property>
            <property name="maxFrameRate (parameter)" class="ptolemy.kernel.util.StringAttribute" value="If not triggered, this limits the output&#10;  to the specified number of frames per second. This is a number that defaults to 25.">
            </property>
        </property>
        <property name="_tableauFactory" class="ptolemy.vergil.toolbox.TextEditorTableauFactory">
            <property name="attributeName" class="ptolemy.kernel.util.StringAttribute" value="script">
            </property>
            <property name="syntaxStyle" class="ptolemy.kernel.util.StringAttribute" value="text/javascript">
            </property>
        </property>
        <property name="camera" class="ptolemy.data.expr.Parameter" value="default camera">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="viewSize" class="ptolemy.data.expr.Parameter" value="{&quot;width&quot;:640, &quot;height&quot;:480}">
            <property name="_stringMode" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
            <property name="_JSON" class="ptolemy.kernel.util.SingletonAttribute">
            </property>
        </property>
        <property name="triggered" class="ptolemy.data.expr.Parameter" value="false">
        </property>
        <property name="maxFrameRate" class="ptolemy.data.expr.Parameter" value="10.0">
        </property>
        <port name="trigger" class="ptolemy.actor.TypedIOPort">
            <property name="input"/>
        </port>
        <port name="image" class="ptolemy.actor.TypedIOPort">
            <property name="output"/>
        </port>
    </entity>
    <relation name="relation" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[195.0, 390.0]">
        </vertex>
    </relation>
    <relation name="relation3" class="ptolemy.actor.TypedIORelation">
        <property name="width" class="ptolemy.data.expr.Parameter" value="-1">
        </property>
        <vertex name="vertex1" value="[330.0, 280.0]">
        </vertex>
    </relation>
    <relation name="relation7" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation8" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation9" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation10" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[635.0, 390.0]">
        </vertex>
    </relation>
    <relation name="relation12" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[450.0, 415.0]">
        </vertex>
    </relation>
    <relation name="relation13" class="ptolemy.actor.TypedIORelation">
        <vertex name="vertex1" value="[345.0, 415.0]">
        </vertex>
    </relation>
    <relation name="relation15" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation5" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation6" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation4" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation16" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation2" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation11" class="ptolemy.actor.TypedIORelation">
    </relation>
    <relation name="relation17" class="ptolemy.actor.TypedIORelation">
    </relation>
    <link port="ObjectRecognizer.input" relation="relation"/>
    <link port="ObjectRecognizer.output" relation="relation16"/>
    <link port="ObjectRecognizer.tags" relation="relation3"/>
    <link port="ConstructUI.reset" relation="relation4"/>
    <link port="ConstructUI.translate" relation="relation6"/>
    <link port="ConstructUI.data" relation="relation15"/>
    <link port="ConstructUI.html" relation="relation7"/>
    <link port="ConstructUI.resources" relation="relation8"/>
    <link port="ConstructUI.update" relation="relation9"/>
    <link port="ConstructUI.spec" relation="relation17"/>
    <link port="ConstructUI.image" relation="relation10"/>
    <link port="UserInterface.html" relation="relation7"/>
    <link port="UserInterface.resources" relation="relation8"/>
    <link port="UserInterface.post" relation="relation12"/>
    <link port="UserInterface.update" relation="relation9"/>
    <link port="Mutable.accessor" relation="relation5"/>
    <link port="Mutable.control" relation="relation12"/>
    <link port="Mutable.data" relation="relation15"/>
    <link port="Mutable.schema" relation="relation11"/>
    <link port="IdGenerator.reset" relation="relation4"/>
    <link port="IdGenerator.id" relation="relation2"/>
    <link port="IdGenerator.trigger" relation="relation16"/>
    <link port="IdGenerator.tags" relation="relation3"/>
    <link port="IdGenerator.next" relation="relation13"/>
    <link port="TagToAccessor.id" relation="relation2"/>
    <link port="TagToAccessor.tags" relation="relation3"/>
    <link port="TagToAccessor.accessor" relation="relation5"/>
    <link port="TagToAccessor.translation" relation="relation6"/>
    <link port="SchemaToHTML.schema" relation="relation11"/>
    <link port="SchemaToHTML.html" relation="relation17"/>
    <link port="Camera.image" relation="relation"/>
    <link relation1="relation" relation2="relation10"/>
    <link relation1="relation12" relation2="relation13"/>
</entity>
