<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor sends and/or receives messages from an XBee radio located on a&#10; specified serial port on the host. The accessor lists all the serial ports&#10; that it finds as options, although most likely only some of these are actually&#10; XBee radio devices. It is quite tricky to get this accessor working, as you have&#10; to have properly configured the XBee devices, for example to be on the same&#10; network as each other and to use the same baud rate as specified in this&#10; accessor. Information about XBee devices can be found here:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/XBee&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; Whenever an input is received on the &lt;code&gt;toSend&lt;/code&gt; input,&#10; the data on that input is sent to the serial port, and then presumably over&#10; the readio.&lt;/p&gt;&#10;&lt;p&gt; Whenever a message is received from the serial port, that message is&#10; produced on the &lt;code&gt;received&lt;/code&gt; output.&lt;/p&gt;&#10;&lt;p&gt; When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the serial port.&lt;/p&gt;&#10;&lt;p&gt; The send and receive types can be any of those supported by the host.&#10; The list of supported types will be provided as options for the &lt;code&gt;sendType&lt;/code&gt;&#10; and &lt;code&gt;receiveType&lt;/code&gt; parameters. For the Ptolemy II host, these include at&#10; least &apos;string&apos;, &apos;number&apos;, and a variety of numeric types.&lt;/p&gt;&#10;&lt;p&gt; If both ends of the socket are known to be JavaScript clients,&#10; then you should use the &apos;number&apos; data type for numeric data.&#10; If one end or the other is not JavaScript, then&#10; you can use more specified types such as &apos;float&apos; or &apos;int&apos;, if they&#10; are supported by the host. In all cases, received numeric&#10; data will be converted to JavaScript &apos;number&apos; when emitted.&#10; For sent data, this will try to convert a JavaScript number&#10; to the specified type. The type &apos;number&apos; is equivalent&#10; to &apos;double&apos;.&lt;/p&gt;&#10;&lt;p&gt; When type conversions are needed, e.g. when you send a double&#10; with &lt;code&gt;sendType&lt;/code&gt; set to int, or an int with &lt;code&gt;sendType&lt;/code&gt; set to byte,&#10; then a &amp;quot;primitive narrowing conversion&amp;quot; will be applied, as specified here:&#10; https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.3 .&lt;/p&gt;&#10;&lt;p&gt; For numeric types, you can also send an array with a single call&#10; to this.send(). The elements of the array will be sent in sequence all&#10; at once, and will be received in one batch and emitted as an array.&lt;/p&gt;&#10;&lt;p&gt; Accessors that extend this one can override the &lt;code&gt;toSendInputHandler&lt;/code&gt; function&#10; to customize what is sent.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires the &apos;xbee&apos; module.&lt;/p&gt;">
    </property>
    <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The data to be sent over the radio.">
    </property>
    <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The data received from the radio.">
    </property>
    <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The port on the server to connect to. This defaults to the&#10;  last (most recently added, presumably) serial port in the list of serial ports on&#10;  the host.">
    </property>
    <property name="receiveType (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="See above.">
    </property>
    <property name="sendType (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="See above.">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
    </property>
</property>