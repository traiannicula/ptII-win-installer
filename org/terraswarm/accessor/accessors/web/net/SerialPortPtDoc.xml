<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Beth Osyk, Chadlia Jerad, Victor Nouvellet">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor sends and/or receives data from a serial port on the host.&#10; The accessor lists all the serial ports that it finds as options.&#10; Whenever an input is received on the &lt;code&gt;toSend&lt;/code&gt; input,&#10; the data on that input is sent to the serial port.&#10; Whenever data is received from the serial port, the data is&#10; produced on the &lt;code&gt;received&lt;/code&gt; output.&#10; When &lt;code&gt;wrapup()&lt;/code&gt; is invoked, this accessor closes the serial port.&lt;/p&gt;&#10;&lt;p&gt; The send and receive types can be any of those supported by the host.&#10; The list of supported types will be provided as options for the &lt;code&gt;sendType&lt;/code&gt;&#10; and &lt;code&gt;receiveType&lt;/code&gt; parameters. For the Nashorn host, these include at&#10; least &apos;string&apos;, &apos;number&apos;, &apos;JSON&apos;, and a variety of numeric types.&#10; The type &apos;number&apos; is equivalent to &apos;double&apos;.&lt;/p&gt;&#10;&lt;p&gt; The data chunks sent on the &lt;code&gt;received&lt;/code&gt; output depend on the &lt;code&gt;receiveType&lt;/code&gt;&#10; parameter. Each output will be of the specified type. Note that if&#10; &lt;code&gt;receivedType&lt;/code&gt; is &apos;string&apos; or &apos;JSON&apos; then the output is produced only&#10; after a null byte is received on the serial port. If the type is &apos;JSON&apos;,&#10; then this accessor will attempt to parse the JSON. If parsing fails,&#10; then the raw byte array will be sent to the &lt;code&gt;invalid&lt;/code&gt; output port.&lt;/p&gt;&#10;&lt;p&gt; When type conversions are needed, e.g. when you send a double&#10; with &lt;code&gt;sendType&lt;/code&gt; set to int, or an int with &lt;code&gt;sendType&lt;/code&gt; set to byte,&#10; then a &amp;quot;primitive narrowing conversion&amp;quot; will be applied, as specified here:&#10; https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.3 .&lt;/p&gt;&#10;&lt;p&gt; For numeric types, you can also send an array with a single call&#10; to this.send(). The elements of the array will be sent in sequence.&lt;/p&gt;&#10;&lt;p&gt; Accessors that extend this one can override the &lt;code&gt;toSendInputHandler&lt;/code&gt; function&#10; to customize what is sent.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires the &apos;serial&apos; module.&lt;/p&gt;&#10;&lt;p&gt; See &lt;a href=&quot;https://accessors.org/wiki/VersionCurrent/Serial&quot;&gt;https://accessors.org/wiki/VersionCurrent/Serial&lt;/a&gt;.&lt;/p&gt;">
    </property>
    <property name="toSend (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The data to be sent over the serial port.">
    </property>
    <property name="received (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The data received from the serial port converted to the specified type.">
    </property>
    <property name="invalid (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="Byte arrays that fail to parse in JSON.">
    </property>
    <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The port on the host to connect to. This defaults to the&#10;  last (most recently added, presumably) serial port in the list of serial ports on&#10;  the host.">
    </property>
    <property name="receiveType (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="See above.">
    </property>
    <property name="sendType (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="See above.">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
    </property>
</property>