<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Elizabeth Osyk">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;A composite accessor that accepts a test file name and executes the tests.&#10; Tests are written using the Mocha framework.  The test results are displayed&#10; to the console window.&lt;/p&gt;&#10;&lt;p&gt; To run:&#10; For the browser, first, start the test server.  Please see:&#10; /accessors/web/hosts/browser/test/README.txt&#10; Open a browser window and point to:&#10; http://localhost:8088/hosts/browser/test/test/testRunner.html&#10; Click &amp;quot;react to inputs&amp;quot;.  The test output will appear at the top of the&#10; page, and also in the browser console window.  You may need to open a&#10; debugging pane to see the console window.&lt;/p&gt;&#10;&lt;p&gt; In node, from the command prompt, change to the directory:&#10; /accessors/web/hosts/node/test/mocha&#10; Execute:&#10; node ../../nodeHostShell.js &amp;lt; ./testCommon.js&lt;/p&gt;&#10;&lt;p&gt; In Cape Code, there is a demo available at:&#10; $PTII/ptolemy/actor/lib/jjs/modules/testing/demo/Testing/Testing.xml&lt;/p&gt;&#10;&lt;p&gt; The Mocha framework allows developers to describe a test case, execute code,&#10; then check assertions.  Mocha tracks each assertion and reports if the&#10; assertion is satisfied or if it fails.  Add-on libraries extend Mocha&apos;s&#10; capabilities.  Chai is an assertion library offering &amp;quot;should&amp;quot;, &amp;quot;expect&amp;quot;, and&#10; &amp;quot;assert&amp;quot; styles.  Sinon is used for creating test spies, stubs and mocks;&#10; for example, mocking an HTTP response.&#10; Please see this page for instructions on installing Mocha, Chai and Sinon&#10; and writing tests.&#10; https://chess.eecs.berkeley.edu/ptexternal/wiki/Main/JSMocha&lt;/p&gt;&#10;&lt;p&gt; For an overview of the testing capabilities of different hosts, please see:&#10; https://&lt;a href=&quot;http://www.icyphy.org/accessors/wiki/Main/Testing&quot;&gt;www.icyphy.org/accessors/wiki/Main/Testing&lt;/a&gt;&lt;/p&gt;&#10;&lt;p&gt; Test results are send to the output port and logged to the console.&#10; A future improvement is to format results JUnit-style.&lt;/p&gt;">
    </property>
    <property name="testFile (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The test file to execute.">
    </property>
    <property name="result (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The test result.">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
    </property>
</property>