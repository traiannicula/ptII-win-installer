<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Edward A. Lee, Marcus Pan, Elizabeth Osyk, Marten Lohstroh">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor controls a Philips Hue lightbulb via a Hue Bridge.&#10; To use it, you need to know the IP address of the Hue Bridge, which is&#10; unfortunately, somewhat hard to find out.  See below for some hints.&lt;/p&gt;&#10;&lt;p&gt; Upon initialization, this accessor will use the userName parameter to&#10; contact the Hue Bridge. If the userName is invalid, then the accessor will&#10; engage in a dialog with the Bridge to create a new user. This will require&#10; the user to push the button on the Hue Bridge when the alert to do so appears.&#10; The assigned userName will be recorded in the userName parameter.&lt;/p&gt;&#10;&lt;p&gt; Upon authenticating with the Bridge, this accessor will output a data&#10; structure that reports all the lights that have been registered with the Bridge.&#10; These lights each have a number ID, such as &apos;1&apos;.  The state of each light&#10; will be reported in this output. The most important property of the state&#10; is the &apos;reachable&apos; property. If this has value false, then the light is not&#10; reachable by the Bridge and therefore cannot be controlled.&lt;/p&gt;&#10;&lt;p&gt; The &lt;em&gt;commands&lt;/em&gt; input is either a single command or an array of commands,&#10; where each command can have the following properties:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;id (required):  The id of the light to manipulate, which is a number.&lt;/li&gt;&#10;&lt;li&gt;on: true to turn on; false to turn off.&lt;/li&gt;&#10;&lt;li&gt;bri: Brightness.  0-255.&lt;/li&gt;&#10;&lt;li&gt;hue: Color, for bulbs that support color. This is a number in the&#10;range 0-65280.&lt;/li&gt;&#10;&lt;li&gt;xy: Two numbers between 0.0 and 1.0 in an array, e.g. [0.4, 0.4],&#10;specifying a color according to the image at&#10;https://&lt;a href=&quot;http://www.developers.meethue.com/documentation/core-concepts&quot;&gt;www.developers.meethue.com/documentation/core-concepts&lt;/a&gt;&lt;/li&gt;&#10;&lt;li&gt;sat: Saturation, for bulbs that support color. This is a number in the&#10;range 0-255.&lt;/li&gt;&#10;&lt;li&gt;ct: Color temperature. This takes values in a scale called &amp;quot;reciprocal&#10;megakelvin&amp;quot; or &amp;quot;mirek&amp;quot;. Using this scale, the warmest color 2000K&#10;is 500 mirek (&amp;quot;ct&amp;quot;:500) and the coldest color 6500K is 153 mirek (&amp;quot;ct&amp;quot;:153).&lt;/li&gt;&#10;&lt;li&gt;transitiontime: The time in ms for the bulb to make the transition.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; Please see Hue docs for mapping colors to hue/saturation values:&#10; http://&lt;a href=&quot;http://www.developers.meethue.com/documentation/core-concepts&quot;&gt;www.developers.meethue.com/documentation/core-concepts&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt; Some common colors given as xy are (for a gammut B bulb):&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;orange:     [0.60, 0.38]&lt;/li&gt;&#10;&lt;li&gt;red:        [0.67, 0.32]&lt;/li&gt;&#10;&lt;li&gt;yellow:     [0.54, 0.42]&lt;/li&gt;&#10;&lt;li&gt;green:      [0.41, 0.52]&lt;/li&gt;&#10;&lt;li&gt;violet:     [0.17, 0.04]&lt;/li&gt;&#10;&lt;li&gt;blue:       [0.17, 0.05]&lt;/li&gt;&#10;&lt;li&gt;magenta:    [0.41, 0.18]&lt;/li&gt;&#10;&lt;li&gt;cool white: [0.28, 0.28]  (about 10,000 Kelvin)&lt;/li&gt;&#10;&lt;li&gt;warm white: [0.46, 0.41]  (about 2,700 Kelvin)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt; If a light is not accessible, this accessor warns but does not error.&#10; In CapeCode, this results in a dialog box with a message.&#10; Sometimes Hue lights are transient (get unplugged, become temporarily&#10; disconnected) and may be valid in the future. Rather than terminating the&#10; model, we hope that the lights come back. A good practice is to use the&#10; lights output to determine which lights are reachable.&lt;/p&gt;&#10;&lt;p&gt; Discovery: Finding the IP address of the Hue Bridge is not necessarily easy.&#10; The bridge acquires its address via DHCP, so the address will typically change&#10; each time the bridge is rebooted. Moreover, the address will likely not be&#10; accessible except on the local network.  The bridge responds to UPnP packets&#10; (universal plug-and-play), so it is possible to use software such as&#10; &lt;a href=&quot;http://4thline.org/projects/cling/&quot;&gt;Cling&lt;/a&gt; to discover the bridge.&#10; Another option is to use the Discovery accessor and look for a device named&#10; philips-hue (or the name assigned to your bridge if assigned manually).&lt;/p&gt;">
    </property>
    <property name="commands (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="JSON commands for the Hue, for example,&#10;  {&quot;id&quot; : 1, &quot;on&quot; : true, &quot;hue&quot; : 120}">
    </property>
    <property name="probe (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="Trigger production of a &apos;lights&apos; output that gives the status of&#10;  lights registered with this bridge.">
    </property>
    <property name="lights (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="An object with one property for each light that is registered&#10;  with the bridge. The name of the property is the light ID, an integer given as&#10;  a string, and the value is an object with information about the light&#10;  (manufacturer, modelid, name, state, etc.). The state property has a boolean&#10;  &apos;on&apos; indicating whether the light is on and &apos;reachable&apos; indicating whether the&#10;  light is in communication with the bridge.">
    </property>
    <property name="assignedUserName (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="If a user name is automatically generated and&#10;  registered with the bridge, then it will be sent on this output port.">
    </property>
    <property name="response (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The response from the bridge to a command.">
    </property>
    <property name="bridgeIP (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The bridge IP address (and port, if needed).">
    </property>
    <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The username for logging on to the Hue Bridge.&#10;  This must be at least 11 characters, or the Hue regards it as invalid.&#10;  A username will be automatically generated if none is available.&#10;  The assigned user name will be sent on the assignedUserName output.">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
    </property>
</property>