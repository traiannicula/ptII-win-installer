<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Chadlia Jerad">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor discovers and controls a Lifx lightbulb.&lt;/p&gt;&#10;&lt;p&gt; If the bulbs are already set up (through the Lifx mobile app for example),&#10; then the host running this accessor needs to be connected to the same LAN.&lt;/p&gt;&#10;&lt;p&gt; Otherwise, with an unconfigured bulb, you can connect your computer to the Lifx&#10; network provided by the bulb (an open Wifi network with a name like&#10; &amp;quot;LIFX_Axx_xxxxxx&amp;quot;).&lt;/p&gt;&#10;&lt;p&gt; If you have a bulb that has been configured to operate on some other network, you can&#10; reset it to factory defaults by turning it on and off five times in succession.&lt;/p&gt;&#10;&lt;p&gt; While it is possible to interact with Lifx bulbs over the Internet by &#10; sending HTTP requests to the Cloud, this module does not provide such&#10; mechanism.&lt;/p&gt;&#10;&lt;p&gt; The communication with Lifx light bulbs is done over UDP/IP. Messages are &#10; arrays of numeric bytes ordered in little-endian. The packets construction&#10; can be found in this link:&#10; https://lan.developer.lifx.com/docs/introduction&lt;/p&gt;&#10;&lt;p&gt; Upon initialization, this accessor creates a UDP socket for communication.&#10; There are two ways to configure this accessor in order to control a bulb:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;the first one consists on discovering Lifx bulbs on the network and then &#10;selecting the one to use.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;the second is by running a manual setup, where the light parameters are&#10;received in the input port. A use case of this scenario is when a server &#10;sends information about available devices and their parameters.&lt;/p&gt;&#10;&lt;p&gt;Discovery starts if an input is provided in &apos;triggerDiscovery&apos; input port. &#10;The accessor will broadcast discovery messages. Since available bulbs will &#10;be asynchronously sending State messages, the accessor will be listening.&#10;Discovery messages will be repeatedly sent every &apos;discoveryInterval&apos;&#10;parameter value, if no device has been selected. Each newly discovered &#10;light bulb will be added to discoveredLifxLights array. Selecting a device&lt;br&gt;is done by providing the index of the LifxLight in the array of discovered &#10;devices in the input port &apos;selectLight&apos;.&lt;/p&gt;&#10;&lt;p&gt;Once the light bulb is chosen and successfully configured, discovery will &#10;stop and the accessor will start to react to &apos;control&apos; input.&lt;/p&gt;&#10;&lt;p&gt;The &lt;em&gt;control&lt;/em&gt; input is a JSON object that may have the following properties:&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;on: &apos;on&apos; to turn on; &apos;off&apos; to turn off.&lt;/li&gt;&#10;&lt;li&gt;hue: Color, for bulbs that support color. This is a number in the&#10;range 0-65535.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;color: Color, for bulbs that support color. This is a string that is converted&#10;into a hue number using the colorToHexHue variable.&lt;/p&gt;&#10;&lt;p&gt;HSBK is used to represent the color and color temperature of a light. The&#10;color is represented as an HSB (Hue, Saturation, Brightness) value.&#10;Please refer to https://en.wikipedia.org/wiki/HSL_and_HSV&#10;A LifxLight is a class that has the following parameters:&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;ipAddress&lt;/strong&gt;: IP address of the bulb in the LAN.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt;: integer. It defaults to 56700 as noted in the Lifx developer&#10;  API.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;macAddress&lt;/strong&gt;: a string of 12 hex numbers (6bytes) that refer to the &#10;  bulb macAddress.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;color&lt;/strong&gt;: the current hue values.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;power&lt;/strong&gt;: if true, then the bulb is switched on, false if switched off.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;strong&gt;userName&lt;/strong&gt;: this is the name of the user. It can be used to filter the &#10;  received messages.&lt;/p&gt;&#10;&lt;p&gt;LifxLight class declares a set of functions for light control:&lt;/p&gt;&#10;&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;swithOn()&lt;/strong&gt;: switches the light on. The latest selected color is the one&#10;  used. &lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;swithOff()&lt;/strong&gt;: switches the light off.&lt;/li&gt;&#10;&lt;li&gt;&lt;strong&gt;setColor()&lt;/strong&gt;: changes the light color.&lt;/li&gt;&#10;&lt;li&gt;&lt;p&gt;&lt;strong&gt;probe()&lt;/strong&gt;: sends a &apos;getState&apos; message to ckeck if the light bulb is still&#10;  working. This feature allows for fault-tolerance.&lt;/p&gt;&#10;&lt;p&gt;The supported communication schemas between the accessor and the bulbs are the &#10;following:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;To run discovery, a discovery message will be broadcasted. Bulbs will answer with&#10;a &apos;stateService&apos; message.&lt;/li&gt;&#10;&lt;li&gt;To switch the light on or off, a &apos;setPower&apos; message is sent. The bulb will answer &#10;with a &apos;statePower&apos; message.&lt;/li&gt;&#10;&lt;li&gt;To set the light color, a &apos;setColor&apos; message is sent. The bulb will answer &#10;with a &apos;stateLight&apos; message.&lt;/li&gt;&#10;&lt;li&gt;To probe the light, a &apos;getLight&apos; message is sent. The bulb will answer &#10;with a &apos;stateLight&apos; message.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/li&gt;&#10;&lt;/ul&gt;">
    </property>
    <property name="control (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="JSON control for the Hue, for example,&#10;               {&quot;on&quot; : &quot;on&quot;, &quot;color&quot; : &quot;red&quot;}">
    </property>
    <property name="triggerDiscovery (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="signal to start discovery">
    </property>
    <property name="selectLight (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="index in discoveredLifxLights array of the light to &#10;  be configured.">
    </property>
    <property name="manualBulbSetup (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="JSON object for the light configuration. At least,&#10;  the mac address and the ip address should be provided. Example:&#10;           {&quot;ipAddress&quot;: &quot;192.168.1.100&quot;, &quot;macAddress&quot;: &quot;d073d523995c&quot;}">
    </property>
    <property name="probe (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="signal to probe the bulb">
    </property>
    <property name="data (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="Outputs the received information from the bulb">
    </property>
    <property name="discoveryInterval (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The time interval to re-send discovery messages,&#10;  if no light has been configured">
    </property>
    <property name="listeningIpAddress (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="the IP address of the accessor to listen to the&#10;  bulb packets. This defaults to 0.0.0.0 to listen to all UDP packets.">
    </property>
    <property name="listeningPort (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="the port number for listening. If a swarmlet is using two &#10;  or more instances of Lifx accessor, than each one needs to have its own distinct listening &#10;  port.">
    </property>
    <property name="userName (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="Name of the user. Should be 8bytes.">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id: Lifx.js 1597 2017-04-29 15:41:50Z cxh $$">
    </property>
</property>