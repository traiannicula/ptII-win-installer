<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Marcus Pan">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor advertises and publishes to a ROS topic. It extends&#10;the WebSocketClient to communicate to a rosbridge websocket. &lt;br&gt;&lt;/p&gt;&#10;&lt;p&gt;During intialize, it will advertise the topic it will publish to,&#10;along with its type. The purpose of &apos;advertise&apos; here is to&#10;establish the ROS topic if isn&apos;t already established. This is&#10;slightly different from the &apos;advertise&apos; function in NodeHandle&#10;which simply publicizes that the the node will be publishing&#10;messages to the topic.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;If the topic does not already exist, and the type is valid, a&#10;topic will be established with this type.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with a different type, no new topic&#10;will be established&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists with the same type, no new topic&#10;will be established.&lt;/li&gt;&#10;&lt;li&gt;If the topic already exists but the type isn&apos;t resolved, no new&#10;topic will be established.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt; On input from &apos;toSend&apos;, this accessor publishes that input to the&#10; aforementioned topic.&#10; The input from &apos;toSend&apos; must be in JSON form, and must match the message&#10; datatype that the ROS topic is expecting. For example if ROS topic is&#10; expecting &lt;code&gt;std_msgs/String&lt;/code&gt;, then the input in &apos;toSend&apos; should be&#10; as follows:&#10; &lt;pre&gt; { &amp;quot;data&amp;quot;: &amp;quot;hello world&amp;quot; } &lt;/pre&gt;&#10; Some ROS types contain a header which consists of a sequence,&#10; timestamp, and a frame_id. If the ROS type has a header, you can&#10; either:&#10; &lt;ul&gt;&#10; &lt;li&gt;send the message on toSend without the header, and check the&#10; parameter &apos;addHeader&apos;. This sends the message with a header with&#10; only the frame_id specified, and rosbridge will add the sequence&#10; and timestamp for you.&lt;/li&gt;&#10; &lt;li&gt;send a fully formed message with all fields in the header&#10; included and don&apos;t check the parameter &apos;addHeader&apos;.&lt;/li&gt;&#10; &lt;/ul&gt;&#10; This accessor doesn&apos;t do any error checking. All error messages&#10; orginate from rosbridge and will appear on the console running&#10; rosbridge. More information ccan be viewed on the &lt;a href=&apos;https://github.com/RobotWebTools/rosbridge_suite/blob/groovy-devel/ROSBRIDGE_PROTOCOL.md&apos;&gt;rosbridge&#10; protocol specification&lt;/a&gt; site.&lt;/p&gt;">
    </property>
    <property name="topic (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The ROS topic to publish to.">
    </property>
    <property name="ROStype (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The ROS datatype of the topic.">
    </property>
    <property name="addHeader (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="If (true), this accessor will send a header with a blank seq and timestamp field, and rosbridge will add the header for you.">
    </property>
    <property name="frame_id (parameter)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="The frame_id of the header (only needed if a header is required).">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
    </property>
</property>