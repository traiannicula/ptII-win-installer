<property name="documentation" class="ptolemy.vergil.basic.DocAttribute">
    <property name="author" class="ptolemy.kernel.util.StringAttribute" value="Brad Campbell, Pat Pannuto. Contributor: Edward A. Lee">
    </property>
    <property name="description" class="ptolemy.kernel.util.StringAttribute" value="&lt;p&gt;This accessor exposes a subset of commands and sensor data&#10; for a type of robot called a &amp;quot;Scarab&amp;quot; created by Prof. Vijay Kumar&apos;s&#10; group at the University of Pennsylvannia (see [1]).&#10; This accessor communicates with the robot through a websocket connection&#10; to ROS, the Robotic Operating System, using a websocket interface&#10; for ROS called ROSBridge.&lt;/p&gt;&#10;&lt;p&gt; This accessor requires very specific hardware. In the usual configuration,&#10; the ROS core and ROS bridge are executed on a SwarmBox, and robot itself&#10; operates as a ROS client.  The ROS bridge provides a websocket that can&#10; be used to publish and subscribe to ROS events.&lt;/p&gt;&#10;&lt;p&gt; Following are instructions for running this accessor in the DOP Center&#10; setup at Berkeley:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Get your laptop on the SwarmMaster network, hosted by a SwarmBox.&lt;/li&gt;&#10;&lt;li&gt;Connect to the Swarmbox using ssh.  E.g.:&#10;   ssh -l sbuser 192.168.0.111&#10;You will need a password.&lt;/li&gt;&#10;&lt;li&gt;Start screen on the swarmbox:&#10;   screen&lt;/li&gt;&#10;&lt;li&gt;Run the ROS core:&#10;   roscore&lt;/li&gt;&#10;&lt;li&gt;Create a new &amp;quot;window&amp;quot; in screen:&#10;   Ctrl-A C&lt;/li&gt;&#10;&lt;li&gt;Run the ROS bridge:&#10;   roslaunch rosbridge_server rosbridge_websocket.launch&lt;/li&gt;&#10;&lt;li&gt;Detach from screen:&#10;   Ctrl-A D&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt; ROSBridge on Swarmbox will be running at IP 192.168.0.111, port 9090.&lt;/p&gt;&#10;&lt;p&gt; You can now log off from the swarmbox.  To stop the ROS core and bridge&#10; on the SwarmBox later, you can:&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Connect to the Swarmbox using ssh, as above.&lt;/li&gt;&#10;&lt;li&gt;Resume screen on the swarmbox:&#10;   screen -r&lt;/li&gt;&#10;&lt;li&gt;Stop the program:&#10;   Ctrl-C&lt;/li&gt;&#10;&lt;li&gt;End the &amp;quot;window&amp;quot;:&#10;   Ctrl-D&lt;/li&gt;&#10;&lt;li&gt;Repeat for all screen windows.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;p&gt; Next, set up the robot. The DOP center robot is Lucy, and the ROS prefix&#10; for pub/sub is &amp;quot;/scarab/lucy&amp;quot;.&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;Power on the robot (all switches and one push button).&lt;/li&gt;&#10;&lt;li&gt;Find the robot&apos;s IP address. You can use the Discovery swarmlet or&#10;command-line tools. The DOP center robot Lucy has mac address&#10;&amp;quot;4:f0:21:3:6:9&amp;quot;.&lt;/li&gt;&#10;&lt;li&gt;Connect to the robot using ssh: e.g., assuming the IP address is 192.168.0.105,&#10;   ssh 192.168.0.105 -l terraswarm&lt;/li&gt;&#10;&lt;li&gt;Enter the password.&lt;/li&gt;&#10;&lt;li&gt;Start screen:&#10;   screen&lt;/li&gt;&#10;&lt;li&gt;Tell the robot it&apos;s IP address:&#10;   export ROS_IP=192.168.0.105&lt;/li&gt;&#10;&lt;li&gt;Launch the ROS client:&#10;   roslaunch scarab dop.launch robot:=lucy map_file:=dop.yaml&lt;/li&gt;&#10;&lt;li&gt;Detach from screen and log off (if you like):&#10;  Ctrl-A D&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&lt;h2&gt; References&lt;/h2&gt;&lt;ol&gt;&#10;&lt;li&gt;Nathan Michael, Michael M. Zavlanos, Vijay Kumar, and George J. Pappas,&#10;Distributed Multi-Robot Task Assignment and Formation Control,&#10;IEEE International Conference on Robotics and Automation (ICRA),&#10;Pasadena, CA, USA, May 19-23, 2008.&#10;DOI: 10.1109/ROBOT.2008.4543197&lt;/li&gt;&#10;&lt;/ol&gt;">
    </property>
    <property name="pose (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="Send the robot to a location with a given orientation,&#10;  where orientation is a quaternion.">
    </property>
    <property name="cmdvel (port)" class="ptolemy.kernel.util.StringAttribute" type="[object Object]" value="Low-level control for the wheel motors.&#10;  To drive the robot straight forward and backward, set the linear.x property&#10;  to a value between -1.0 (backwards) and 1.0 (forwards). To turn the robot,&#10;  set the angular.z property to a value between -1.0 and 1.0. Both can be&#10;  to steer the robot while it drives forward or backward. The other properties&#10;  are ignored. Note that this interface is not recommended for normal&#10;  operation. In the general case, only `pose` should be used to direct the&#10;  robot.">
    </property>
    <property name="cancel (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="Upon receiving any message, cancel the robot&apos;s current&#10;  navigation goal. This will cause the robot to stop.">
    </property>
    <property name="battery (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The percentage of battery remaining.">
    </property>
    <property name="state (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The current state of the robot&apos;s navigation algorithm. It can&#10;  be one of &apos;idle&apos;, &apos;navigating&apos;, or &apos;stuck&apos;. If the robot is &apos;idle&apos; it&#10;  is currently not trying to navigate to any pose. In &apos;navigating&apos; state,&#10;  the robot is actively trying to reach a desired pose goal. If the robot&#10;  is unable to find a path to the goal (beacuse there were obsticals in the&#10;  way), it will enter the &apos;stuck&apos; state.">
    </property>
    <property name="location (port)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The &quot;pose&quot; type of where the robot currently is. See the&#10;  input &quot;pose&quot; for a description of the format.">
    </property>
    <property name="server (parameter)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The IP address of the ROS bridge, e.g. &apos;192.168.0.111&apos;.">
    </property>
    <property name="port (parameter)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The port used by the ROS bridge web socket, e.g. 9090.">
    </property>
    <property name="topicPrefix (parameter)" class="ptolemy.kernel.util.StringAttribute" type="undefined" value="The identifier for the robot, e.g. &apos;/scarab/lucy&apos;.">
    </property>
    <property name="version" class="ptolemy.kernel.util.StringAttribute" value="$$Id$$">
    </property>
</property>